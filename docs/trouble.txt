== Euphoria Trouble-Shooting Guide

If you get stuck, here are some things you can do:

# Type: ##guru## followed by some keywords associated with your problem. For example,
  ##guru declare global include##
# Check the list of common problems ([[:Common Problems and Solutions]]).
# Read the relevant parts of the documentation, i.e. ##refman.doc## or ##library.doc##
# Try running your program with trace:
<eucode>
with trace
trace(1)
</eucode>
# The [[http://www.rapideuphoria.com/listserv.htm|Euphoria Mailing List]] has a search facility. You can search 
  the archive of all previous messages. There's a good chance that your question has already been discussed.
# Post a message on the mailing list.
# Visit the Euphoria IRC channel, [[irc://irc.freenode.net/#euphoria]].

=== Common Problems and Solutions

Here are some commonly reported problems and their solutions.

==== Console window disappeared

//I ran my program with ##euiw.exe## and the console window disappeared
before I could read the output.//

The console window will only appear if required, and will disappear immediately when your program 
finishes execution. Perhaps you should code something like:

<eucode>
puts(1, "\nPress Enter\n")
if getc(0) then
end if
</eucode>
at the end of your program.

You may also run your console program with ##eui.exe##.

==== Press Enter

//At the end of execution of my program, I see "Press Enter" and I have to hit the Enter key. How do I get rid of that?//

Call [[:free_console]] just before your program terminates.

<eucode>
include dll.e

free_console()
</eucode>

==== Full Screen Console

//When I run ##euid.exe## in a DOS Window, it makes my small DOS window go to full
screen.//

This is only susposed to happen the first time you run ##euid.exe## after creating a new small
DOS window. This can be prevented by setting the EUCONS environment variable to "1".  
You can make the window small again by pressing //Alt-Enter//. It may go full-screen again. 

These days, you should only use ##euid.exe## for applications that require it.  This
interpreter provides routines for full-screen graphics but does so in a way that is 
not compatable with Windows Vista.  You can have graphics with ##eui.exe## using a
graphics library.  In summary, if you don't want a full-screen application you shouldn't
use this interpreter!

Your Euphoria program can keep the window small by executing:

<eucode>
if graphics_mode(-1) then
end if
</eucode>

at the start of execution. This may cause some brief screen flicker. Your program can force a text window to be full-screen 
by executing:

<eucode>
if graphics_mode(3) then
end if
</eucode>

You may also wish to execute your program using ##eui.exe## instead.

==== CGI Program Hangs/No Output

//My Euphoria CGI program hangs or has no output//

Look for an ex.err file in your cgi-bin directory. Turn on ##with trace## /
##trace(3)## to see what statements are executed (see ##ctrace.out## in your
cgi-bin). Insert ##without warning## at the top of your program. On
//Windows//, when there are warnings, Euphoria will issue a prompt before terminating,
causing your program to hang. On Windows you should always use ##eui.exe##
to run CGI programs, or you may have problems with standard output. With
Apache Web Server, you can have a first line in your program of:
#!.\eui.exe to run your program using eui.exe in the current (cgi-bin)
directory. Be careful that your first line ends with the line breaking characters
appopriate for your platform, or the ###!## won't be handled correctly. You must also set the
execute permissions on your program correctly, and ##ex.err## and ctrace.out
must be writable by the server process or they won't be updated. See a
href=cgi.htm>cgi.htm</a> for more.

==== Read/Write Ports?

//How do I read/write ports?//

Get **Jacques Deschenes**' collection of machine-level and DOS system routines from the
[[http://www.rapideuphoria.com|Euphoria Web Page]]. See his file **ports.e**.

==== Graphics/Control Break/System seems dead

//I'm having trouble running a //DOS32// graphics program. 
I hit control-Break and now my system seems to be dead.//

Some graphics programs will not run unless you start them from DOS or from a
full-screen DOS window under Windows. Sometimes you have to edit the program
source to use a lower resolution graphics mode, such as mode 18. Some SVGA
graphics modes might not work for you under a DOS window, but will work when
you restart your machine in MS-DOS mode. A better driver for your video card
might fix this.
   
You should stop a program using the method that the program documentation
recommends. If you abort a program with control-c or control-Break you may
find that your screen is left in a funny graphics mode using funny colors.
When you type something, it may be difficult or even impossible to read what
you are typing. //The system may even appear dead, when in fact it is
**not**//.
   
Try the following DOS commands, in the following order, until you clear
things up:

# **type:** //Alt-Enter// to get a normal (non-full-screen) window again.
# **type:** ##cls## Even when you can't see any keystrokes echoed on the screen
  this may clear the screen for you.
# **type:** ##ex## The Euphoria interpreter will try to restore a normal text mode 
  screen for you.
# **type:** ##exit## If you are running under Windows, this will terminate the
  DOS session for you.
# **type:** ##Control-Alt-Delete## This will let you kill the current DOS session 
  under Windows, or will soft-reboot your computer if you are running under DOS.
# If all else fails, reset or power your computer off and back on. You should 
  immediately run **scandisk** when the system comes back up.

==== SVGA resolution

//When I run Euphoria programs in SVGA, the output on the screen
is crammed into the top part of the screen.//

Try: ##[[:use_vesa]](1)## in ##machine.e##.
   
Try downloading the latest driver for your video card from the Internet.
   
Others have had their video problems clear up after installing the latest version of DirectX.

==== DOS window messy

//My program leaves the DOS window in a messy state. I want it to leave me
with a normal text window.//

When your program is finished, it should call the function
##[[:graphics_mode]](-1)## to set the DOS window back to normal. e.g.
<eucode>
if graphics_mode(-1) then
end if
</eucode>

==== ed.ex/control-c

//When I run my program from the editor and I hit control-c, the program
dies with an operating system error.//

This is a known problem. Run your program from the command-line,
outside the editor, if you might have to hit control-c or control-Break.

==== Program has no errors, no output

//When I run my program there are no errors but nothing happens.//

You probably forgot to call your main procedure. You need
a top-level statement that comes after your main procedure to call the
main procedure and start execution.

==== Routine not declared

//I'm trying to call a routine documented in ##library.doc##, but it keeps
saying the routine has not been declared.//

Did you remember to include the necessary ##.e## file from
the ##euphoria\include## directory? If the syntax of the routine says for example, 
"##include graphics.e##", then your program must have "##include
graphics.e##" (without the quotes) before the place where you first call the routine.

==== Routine not declared, my file

//I have an include file with a routine in it that I want to call, but when I 
try to call the routine it says the routine has not been declared. But it **has** 
been declared.//

Did you remember to define the routine as ##public##, ##export## or possibly ##global##?
If not, the routine is not visible outside of its own file.

==== After user input, left margin problem

//After inputting a string from the user with ##gets()##, the next line that comes
out on the screen does not start at the left margin.//

Your program should output a //new-line// character e.g.

<eucode>
input = gets()
puts(SCREEN, '\n')
</eucode>

==== Floating-point calculations not exact

//Why aren't my floating-point calculations coming out exact?//

Intel CPU's, and most other CPU's, use binary numbers to represent
fractions. Decimal fractions such as 0.1, 0.01 and
similar numbers can't be represented precisely. For example, 0.1 might
be stored internally as 0.0999999999999999. That means that 10 * 0.1
might come out as 0.999999999999999, and floor(10 * 0.1) might be 0,
not 1 as you'd expect. This can be a nuisance when you are dealing
with money calculations, but it's not a Euphoria problem. It's a
general problem that you must face in most programming languages.
Always remember: floating-point numbers are just an approximation
to the "real" numbers in mathematics. Assume that any floating-point calculation
might have a tiny bit of error in the result. Sometimes you can
solve the problem by rounding, e.g. x = round( x, 100 ) would round
x off to the nearest hundredth.  Storing money values as an integer 
number of pennies, rather than a fractional number of dollars 
(or similar currency) will help, but some calculations could still 
cause problems.



==== Number to a string?

//How do I convert a number to a string?//

Use [[:sprintf]]:

<eucode>
string = eu:sprintf("%d", 10) -- string is "10"
</eucode>

or use [[:number]]:

<eucode>
include std/locale.e as locale
string = locale:number(10) -- string is probably "10.00" if called in the U.S.
                           -- It depends on the locale preferences set on your computer.
</eucode>

Number formats according to the locale setting on your computer and
strangely, this means to give you two decimal places whether or not
you supply an integer value for the U.S. locale.

Besides ##%d##, you can also try other formats, such as
##%x## (Hex) or ##%f## (floating-point).

==== String to a number?

//How do I convert a string to a number?//

Use [[:value]].

==== Redefine my for-loop variable?

//It says I'm attempting to redefine my for-loop variable.//

For-loop variables are declared automatically. Apparently you already have a
declaration with the same name earlier in your routine or your program.
Remove that earlier declaration or change the name of your loop variable.

==== Unknown Escape Character

//I get the message "unknown escape character" on a line where I am trying
to specify a file name.//

**Do not** say ##"C:\TMP\MYFILE"##. You need to say ##"C:~\~\TMP~\~\MYFILE"##. 

Backslash is used for 
escape characters such as ##\n## or ##\t##. To specify a single backslash in a string you need 
to type ##~\~\##. Therefore, say ##"C:~\~\TMP~\~\MYFILE"## instead of
##"C:\TMP\MYFILE"##

==== Mouse Input in SVGA mode

//I'm trying to use mouse input in a SVGA graphics mode but it just doesn't
work.//

//DOS// does not support mouse input in modes beyond graphics mode 18 (640x480 16 color). 
//DOS 7.0// (part of //Windows 95/98//) does seem to let you at least read the x-y coordinate 
and the buttons in high resolution modes, but you may have to draw your own mouse pointer 
in the high-res modes. **Graeme Burke**, **Peter Blue** and others have good solutions 
to this problem. See their files on the a
[[http://www.rapideuphoria.com/archive.htm|Euphoria Archive]] Web page.

==== Only first character in printf

//I'm trying to print a string using [[:printf]] but only the first character
comes out.//

You need to put braces around the parameters sequence to [[:printf]]. You
probably wrote:

<eucode>
printf(1, "Hello, %s!\n", mystring)
</eucode>

but you need:

<eucode>
printf(1, "Hello, %s!\n", {mystring})
</eucode>

==== Only 10 significant digits during printing

//When I print numbers using [[:printf]] or [[:?]] only 10 significant digits are
displayed.//

Euphoria normally only shows about 10 digits. Internally, all
calculations are performed using at least 15 significant digits. To see
more digits you have to use [[:printf]]. For example,

<eucode>
printf(1, "%.15f", 1/3)
</eucode>

This will display 15 digits.

==== A type is expected here

//It complains about my routine declaration, saying, "a type is expected
here."//

When declaring subroutine parameters, Euphoria requires you to
provide an explicit type for each individual parameter. e.g.

<eucode>
procedure foo(integer x, y)         -- WRONG
procedure foo(integer x, integer y) -- RIGHT
</eucode>

In all other contexts it is ok to make a list:

<eucode>
atom a, b, c, d, e
</eucode>

==== Expected to see...

//It says: ##Syntax Error - expected to see possibly 'xxx', not 'yyy'##//

At this point in your program you have typed a variable, keyword, number or
punctuation symbol, yyy, that does not fit syntactically with what has come
before it. The compiler is offering you one example, xxx, of something that
would be accepted at this point in place of yyy. Note that there may be many
other legal (and much better) possibilities at this point than xxx, but xxx
might at least give you a clue as to what the compiler is "thinking."

==== DR-DOS

//I'm having problems running Euphoria with DR-DOS.//

Your ##config.sys## should have just ##HIMEM.SYS## but not ##EMM386.EXE## in it.

==== Windows NT character-mode executable

//I try to run a program with ##euiw.exe## and it says "this is a Windows NT
character-mode executable."//

##euiw.exe## is a **32-bit Windows program**. It must be run under
//Windows// or in a //DOS// window in //Windows//. It will not work under
plain DOS on an old system. ##euid.exe## **will** work under plain //DOS//.
