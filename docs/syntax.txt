= Syntax Reference

<<LEVELTOC depth=3>>

== basics ==
<eucode>
ALPHA ==: ('a' - 'z') | ('A' - 'Z')
DIGIT ==: ('0' - '9')
USCORE ==: '_'

INDENTIFIER ==: ( ALPHA | USCORE ) [(AlPHA | DIGIT | USCORE) ... ]

NUMEXPR ==: (an expression that evaluates to an atom)

STREXPR ==: (an expression that evaluates to a string sequence)

SEQEXPR ==: (an expression that evaluates to an sequence)

BOOLEXPR ==: (an expression that evaluates to an atom in which zero represents falsehood and non-zero represents truth)

EXPR ==:

STATEMENT ==: 

STMTBLK ==: STATEMENT [STATEMENT ...]

LABEL       ==:  'label' STRINGLIT

LISTDELIM   ==:  ','

STRINGLIT   ==: SIMPLESTRINGLIT | RAWSTRINGLIT

SIMPLESTRINGLIT ==: SSLITSTART [ (CHAR | ESCCHAR) ... ] SSLITEND
SSLITSTART  ==: '"'
SSLITEND    ==: '"'
CHAR        ==: (any byte value)
ESCCHAR     ==: ESCLEAD ( 't' | 'n' | 'r' | '\' | '"' \ ''')
ESCLEAD     ==: '\'

RAWSTRINGLIT ==: DQRAWSTRING | BQRAWSTRING
DQRAWSTRING ==: '"""' [ MARGINSTR ] [CHAR ...] '"""'
BQRAWSTRING ==: '`' [ MARGINSTR ] [CHAR ...] '`'
MARGINSTR  ==: '_' ...
</eucode>

== statements ==
=== flow control ===
[[:IFSTMT]]\\
[[:SWITCHSTMT]]\\
[[:BREAKSTMT]]\\
[[:CONTINUESTMT]]\\
[[:RETRYSTMT]]\\
[[:EXITSTMT]]\\
[[:FALLTHRUSTMT]]\\
[[:FORSTMT]]\\
[[:WHILESTMT]]\\
[[:LOOPSTMT]]\\
[[:GOTOSTMT]]\\


== slice == @[SLICE]
<eucode>
SLICE      ==: SLICESTART INTEXPRESSION SLICEDELIM INTEXPRESSION SLICEEND
SLICESTART ==: '['
SLICEDELIM ==: '..'
SLICEEND   ==: ']'
</eucode>

== if == @[IFSTMT]
<eucode>
 IFSTMT  ==:  IFTEST [ ELSIF ...] [ELSE] ENDIF 
 IFTEST  ==:  'if' ATOMEXPR [ LABEL ] 'then' [ STMTBLOCK ] 
 ELSIF   ==:  'elsif' ATOMEXPR 'then' [ STMTBLOCK ] 
 ELSE    ==:  'else' [ STMTBLOCK ] 
 ENDIF   ==:  'end' 'if' 
</eucode>

== switch == @[SWITCHSTMT]
<eucode>
 SWITCHSTMT  ==:  SWITCHTEST CASE [ CASE ...] [ CASEELSE ] [ ENDSWITCH ]
 SWITCHTEST  ==:  'switch' EXPRESSION [ WITHFALL ] [ LABEL ] 'do'
 WITHFALL    ==:  ('with' | 'without') 'fallthru'
 CASE        ==:  'case' CASELIST 'then' [ STMTBLOCK ]
 CASELIST    ==:  EXPRESSION [(LISTDELIM EXPRESSION) ...]
 CASEELSE    ==:  'case' 'else'
 ENDSWITCH   ==:  'end' 'switch'
</eucode>

== break == @[BREAKSTMT]
<eucode>
 BREAKSTMT       ==:  'break' [ STRINGLIT ]
</eucode>

== continue == @[CONTINUESTMT]
<eucode>
 CONTINUESTMT       ==:  'continue' [ STRINGLIT ]
</eucode>

== retry == @[RETRYSTMT]
<eucode>
 RETRYSTMT       ==:  'retry' [ STRINGLIT ]
</eucode>

== exit == @[EXITSTMT]
<eucode>
 EXITSTMT       ==:  'exit' [ STRINGLIT ]
</eucode>

== fallthru == @[FALLTHRUSTMT]
<eucode>
 FALLTHRUSTMT       ==:  'fallthru'
</eucode>

== for == @[FORSTMT]
<eucode>
 FORSTMT ==: 'for' FORIDX [ LABEL ] 'do' [STMTBLK] 'end' 'for'
 FORIDX  ==: IDENTIFIER '=' NUMEXPR 'to' NUMEXPR ['by' NUMEXPR]
</eucode>
 
== while == @[WHILESTMT]
<eucode>
 WHILESTMT ==: 'while' BOOLEXPR [WITHENTRY] [LABEL] 'do' STMTBLK [ENTRY] 'end' 'while'
 WITHENTRY ==: 'with' 'entry'
 ENTRY ==: 'entry' [STMTBLK]
</eucode>
 
== loop == @[LOOPSTMT]
<eucode>
 LOOPSTMT ==: 'loop' [WITHENTRY] [LABEL] 'do' STMTBLK [ENTRY] 'until' BOOLEXPR 'end' 'loop'
</eucode>
 
== goto == @[GOTOSTMT]
<eucode>
 GOTOSMT ==: 'goto' LABEL
</eucode>
