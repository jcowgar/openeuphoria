= Euphoria Release Notes

== Version 2.5 Alpha Release November 15, 2004:
=== New Features


<li>
**Source code for a complete Euphoria
interpreter**,
100% compatible with the official RDS
**Interpreter** on all platforms,
is now provided. See **euphoria\source**.
It's written 100% in Euphoria and has the same front-end as 
the official RDS **Interpreter**. 
Since it's Public Domain, it may be
used and modified for any purpose, including commercial or 
closed-source applications. It can be bound into a single executable 
file using the **Binder**, or translated 
with the **Euphoria to C Translator** to 
get a much faster executable.</li>

<li>
The official **Euphoria Interpreter** was
re-written as 30% Euphoria (front-end), 
and 70% hand-coded C (back-end). It was formerly 100% C, and the boundary 
between front-end and back-end was fuzzy. </li>

<li>
The **Euphoria Translator** has been
re-written as 100% Euphoria. It was formerly 100% C. It uses the same 
front-end as the **Interpreter** and the 
**Binder**. This reduces future maintenance
costs, and helps catch subtle bugs (subscript out of bounds, uninitialized
variable etc.)</li>

<li>
The free Public Domain **Interpreter**
(**ex.exe**,
**exw.exe**,
**exu**), 
now includes full support for **trace()**
beyond 300 statements, and for **profiling**.
Thus there is no longer a registered "Complete Edition"
interpreter. However, registration is still required for the 
**Binder / shrouder**.</li>

<li>
A new **Binder** was developed 
(100% in Euphoria). Since it shares the
same front-end with the **Interpreter**
and **Translator**,
possible incompatibilities are avoided, and the future maintenance 
cost has been greatly reduced. </li>

<li>
A bound program can now provide a complete 
**ex.err** dump, without including any lines
of source code in the **.exe** file.</li>

<li>
Bound programs now start up immediately with no parsing required.</li>

<li>
The **Binder** for 
**Windows** has a ##-con##
option, so you can make a console application.</li>

<li>
A separate **Interpreter back-end executable**
was developed for use with the **Binder**.
It executes intermediate code (**.il** files), 
and is smaller than the **Interpreter**, 
since it has no front-end (parser).
This reduces the size of bound programs.</li>

<li>
 A new ##$## symbol represents the length
 of the current sequence.
 Instead of saying s[length(s)], you can say s[$]. Instead of saying
 s[1..length(s)-1], you can say s[1..$-1]. More complicated expressions
 like s[i][$-5..$-1] are also possible. 
 
 **Note:** In order to implement
 this feature properly, a small incompatibility with version 2.4 was 
 introduced. A change was made to the order of evaluation of expressions
 in a multiply-subscripted assignment statement:
 
 lhs_var[lhs_expr1][lhs_expr2]... = rhs_expr
 
 
 This change will cause a problem only if you are trying to modify 
 lhs_var via a function call, during the same statement that is
 assigning to lhs_var. You should change your code
 to perform any such function calls before you perform the 
 subscripted assignment, e.g.
 
    temp = rhs_expr<br>
    lhs_var[lhs_expr1][lhs_expr2] = temp 

  
  The same would apply if one of the left-hand-side expressions contained
  a function call that tried to modify lhs_var.
  
  
  This situation is very rare (and pretty weird), but a few examples have 
  been found.</li>

<li>
  Programs now have the ability to get control after a crash 
  (a Euphoria-detected or machine-detected run-time error).
  Using **crash_routine()** you can specify
  the routine id's of one or more
  Euphoria routines to be invoked when something goes wrong. You can save
  critical data to disk, inform the user, inform the programmer, etc.</li>

<li>
 The library routines: **put_screen_char()**, 
 **get_screen_char()**,
 **save_text_image()**
  and **display_text_image()** have been
  implemented for **Windows text-mode** 
  consoles. These functions now work across all platforms. 
  Suggested by C.K. Lester.</li>


<li>
**Translator**: All the files you need
for translating Euphoria programs to C are now included in the
main download packages for **DOS/Windows** 
and **Linux/FreeBSD**. You just need
one or more of the supported free C compilers.</li>

<li>
**Translator**: The free Public Domain 
**Translator**
(**ec.exe**,
**ecw.exe**,
**ecu**) now includes
Euphoria statements as comments in the C source. It also supports 
**trace(3)**
for debugging. When you register, you will eliminate the 
initial message and delay on compiled programs.</li>

<li>
 **Translator**: 
 Some new optimizations will speed things up, and also reduce 
  the size of the C code. For example the code block:
  <eucode>        if //expression// then
           ...
           //many statements of Euphoria code//
           ...
        end if
  </eucode>
  will be completely deleted if the
  **Translator** can tell that //expression//
  will always be false. This can lead to further optimizations, such as
  a whole routine being deleted because there are no more calls to it.
  An example where this is useful is when there is different code 
  for different platforms, e.g.
  
  <eucode>        if platform() = DOS then ...
  </eucode>
  **while** //expression// and
  **elsif** //expression// can also be 
  optimized in the same way. When the expression is always true, the 
  **if/while/elsif** 
  test and jump are eliminated.</li>
  
<li>
 **Translator**: A couple of additional small improvements were made in 
  converting the source from C to Euphoria. They allow for slightly 
  better optimization.</li>

<li>
 **Translator**: A minor adjustment lets
  the Translator produce slightly 
  fewer C files, while reducing the slight risk of creating a huge C 
  file that's too big for the C compiler to handle. Also, some empty .c 
  files that were sometimes created, have now been eliminated.</li>
  
<li>
  **Translator**: The Translator for Windows
  has a new ##-con## option for making
  a console application.
  It's supported for each of the three Windows C compilers.</li>

<li>
  **Translator**: After successfully building
  a **.exe** (or **.dll**) file,
  **emake.bat** will delete all the .c
  and .h files that were created
  by the Translator. This reduces clutter in the directory.</li>
  
<li>
 The **install** program for
 **DOS/Windows**
 automatically creates **exwc.exe**, as well
 as **exw.exe**.</li>

<li>
 **ed**:
  **ed.bat** has been changed. It now runs 
  ed.ex using **exwc.exe**.
  Instead of using control-Home/control-End to move to the top/bottom 
  of a file, use control-t/control-b.
  On **Windows** XP, this change gives
  **ed**
  faster keyboard response, and full support for long filenames.</li>

<li>
 **ed**: A call to
  **free_console()** is made at the very end,
  so you won't see "Press Enter", as occurs on some
  **Linux** systems.</li>

<li>
  The **Interpreter** 
  **exw** no longer brings up a blank console
  window while performing **trace(3)**.</li>

<li>
  **pretty_print()** has a new option to
  limit the number of lines of output.</li>
  
<li>
  Both types of slashes (backslash, forward slash) 
  are now fully supported in pathnames on
  **DOS** and
  **Windows**.
  Backslash is the standard, but since Windows also supports
  forward slash in most cases, Euphoria also now supports 
  either slash in all situations, not just a few situations as before.
  On **Linux** and
  **FreeBSD** only forward slash is supported.</li>
  
<li>
  The ##-m486## option was removed from the
  **gnuexu** batch file used in building the
  Euphoria interpreter on **Linux**.
  It causes warnings and is not necessary.</li>

</ul>

=== Bug Fixes


<li>
  **bug fixed**: 
  ##with profile## and similar
  **with/without** statements
  caused an error when followed immediately by a comment, with no whitespace 
  before the start of the comment. Thanks to Daniel Kluss.</li>

<li>
  **bug fixed**:
  **ex.err** would sometimes report the wrong
  value for a for-loop variable, when the for loop was used during a 
  recursive call. Thanks to Pete Lomax.</li>
  
<li>
  **bug fixed**: On Windows, using either 
  the Interpreter, or translated code compiled by WATCOM, 
  **dir()** caused an exception when given 
  an argument that ended with "*.". This was due to a bug in the WATCOM 
  routine used to implement dir(). Thanks to Daniel Kluss.</li>
  
<li>
  **bug fixed**: In 2.4, on ME/98/95 the 
  argument to **dir()** could no longer be a
  long file (or directory) name.
  This used to work in 2.3. (Note: On XP it can't be long).
  Thanks to Rangi and Juergen Luethje.</li>

<li>
  **bug fixed -  Translator: **
  On Windows when you create a Euphoria .dll, the global routines need to be
  called using the __stdcall convention. However indirect calls to those 
  routines via **call_func()** and 
  **call_proc()** from within the 
  same .dll, were using the __cdecl convention. Thanks to Andy Serpa.</li>
    
<li>
  **bug fixed**: An error message referred to
  "printf()", when it should have referred to "sprintf()". Thanks to Al Getz.</li>
  
<li>
  **bug fixed -  safe.e: **
  Poking an empty sequence into a 1-byte block 
  of allocated memory caused a false-alarm error message. 
  e.g. allocate_string("") &nbsp;
  Thanks to Bernie Ryan and Josef Jindra.</li>
  
<li>
  **bug fixed**: If you called 
  **repeat()** with a repetition count that
  was extremely close to the maximum size of a Euphoria integer
  (1073741823), you would get a machine exception. You will now get 
  an "Out of memory" error from Euphoria. Thanks to Bob Elia.</li>
    
<li>
  **bug fixed -  Translator: **
  In some cases, when using the Translator to build 
  a dll, WATCOM C would give the error message "statement required after 
  label" near the end of EuInit(). Lcc also complained. Borland C did not
  complain, and things worked fine. Thanks to Matthew Lewis.</li>

<li>
  **bug fixed -  Interpreter: **
  In programs larger than a couple of 
  thousand statements, an assignment operation with subscripting 
  on the left might cause a machine exception. The chance of this 
  happening was about 1 in 1000. Any change to the program 
  that shifted the offending statement's position in memory 
  would cause the bug to go away.  For example,
  <eucode>        x[i] -= y
  </eucode>
  This bug has been lurking since January 1999 (version 2.1 alpha).
  The Translator was not affected. Thanks to Pete Lomax.</li>

<li>
  **bug fixed**:
  On Windows, Linux and FreeBSD, when reading standard input, and an input
  line was longer than 1040 characters,
  **gets()** would set the 1041st character
  to 0. DOS was OK, and files other than standard input were ok.</li>

<li>
  **bug fixed -  EDS: **
  When **db_open()** opened a database file but
  failed to secure an exclusive or shared lock on the file, 
  it was neglecting to close the file before returning a failure code.</li>

<li>
  **bug fixed -  ttt.ex: **
  A moderately-long human name would damage the 
  board grid. Thanks to Igor Kachan.</li>

<li>
  **bug fixed**: The line number reported for 
  run-time errors occurring in a short-circuited if-statement 
  could be off slightly. Thanks to Kat.</li>
  
<li>
  **bug fixed -  Translator: **
  The range of return values assumed for
  **getc()** was [0,255]. It should
  have been [-1,255].</li>

<li>
  **bug fixed -  Translator: **
  The generated C code failed to free the storage for the for-loop variable
  when a return statement was executed inside a for-loop, and the loop variable
  had a non-integer value. A similar problem could occur when there was 
  an ##else##, ##exit## or ##end while## immediately
  after the for-loop, and the loop variable value was not an integer.</li>
</ul>

=== Documentation



<li>
  A document on a href=cgi.htm>CGI Applications in Euphoria</a> has 
  been added.</li>
<li>
  Thanks to Kenneth Rhodes,
  **db_rename_table()** is now documented. This
  had been accidentally left out of the **EDS**
  documentation.</li>

<li>
  It's now mentioned that format strings 
  in **pretty_print()** could have additional
  text along with the format. Thanks to Juergen Luethje.</li>
  
<li>
  The Reference manual now says that hex literals, such as #FFFFFFFF, are
  never considered to be negative numbers. Thanks to Juergen Luethje.</li>
  
<li>
  **sprintf()/printf()**: It's documented
  that -1 prints as FFFFFFFF in %x format. Thanks to Juergen Luethje.</li>

</ul>

== Version 2.4 Official Release July 3, 2003:



<li>
 
**define_c_proc()**
and
**define_c_func()**
have been extended, so in addition to defining C routines in external 
.dll's and shared libraries, you can now define the parameters 
and return value for a machine-code routine that your program pokes
into its own memory. You can call the machine-code routine using 
**c_proc()**
or
**c_func()**. Thanks to Daniel Kluss.</li>

<li>
 Performance Improvement: **get4()** and
 **put4()** in
 **database.e** have been 
 speeded up slightly. They are very important to the overall speed of
 **EDS**. Thanks to Derek Parnell.</li>

<li>
 Performance Improvement: **get_bytes()**
 is now much faster when the number of bytes requested far exceeds the number
 of bytes remaining in the file. Thanks to Pier Feddema. </li>

<li>
 **Translator**: When translating a huge
  Euphoria routine (many hundreds of 
  Euphoria statements), the Translator will now output calls to a 
  dereference routine, rather than using
  in-lined C statements. This reduces the chance of exceeding a
  size limit imposed by the C compiler (especially Watcom C). It also
  reduces the **.exe** size. Since the dereference routine is more 
  likely than the in-lined statements to be in cache, the speed 
  difference is not that great.</li>

<li>
 **Interpreter Source Code**: In
  **watexw.bat**,
  **runtime windows=4.0** was added
  to the link command for building **exw.exe**.</li>
  
<li>
 There are now some checks for invalid argument type and invalid
  return type in calls to **define_c_func()**
  and **define_c_proc()**.</li>

<li>
 Some syntax error messages are now more descriptive when namespace 
 identifiers are involved.</li>

<li>
 The filesort.ex tutorial program was altered 
 to make it more usable under Linux and FreeBSD.</li>

<li>
 By default, **safe.e** now does a less-strict,
  "edges-only" check for memory corruption, when the platform is
  **WIN32**.
  Windows programs often access memory that was not allocated using Euphoria's
  **allocate()**.</li>
  
<li>
 **bug fixed**: When a literal floating-point
  constant in the Euphoria
  program was larger than about 1e308, the Translator would output "inf" 
  in **init_.c**.
  This caused the C compiler to issue an undefined 
  symbol error. Thanks to Juergen Luethje.</li>

<li>
 **bug fixed**: In a rare case, the Translator 
 was failing to emit C code to make a copy of a sequence with multiple 
 references to it, before overwriting an element of that sequence. 
 Thanks to Juergen Luethje. </li>

<li>
 **bug fixed**: In certain cases, when a
  Euphoria program exchanged Euphoria data with a **.dll** written in
  Euphoria, the data might not be freed (until
  the program terminated). Thanks to Wayne Overman (Euman).</li>
  
<li>
 **bug fixed**: If you used "asm" in your
  program, as a private variable or
  parameter name, the Translator would use "_asm" in the C code. 
  This was not acceptable for some C compilers. The Translator will now
  avoid using "_asm", as well as "_try", "_Seg16", "_stdcall" and 
  several other single-underscore names that are reserved by various 
  C compilers. Thanks to George Papadopoulos and Matt Lewis.</li>

<li>
 **bug fixed**: If the HOT_KEYS parameter in
  **ed.ex** was set to FALSE,
  then **Esc h Enter** would not bring up the help prompt.
  Thanks to J. Brown.</li>

</ul>
  
== Version 2.4 Beta-test Release April 10, 2003:


This release updates the **Euphoria 
Interpreter**, the **Euphoria To C 
Translator**,
and the **Interpreter Source Code** products,
for **Windows**,
**DOS**,
**Linux** and
**FreeBSD**.

=== New Features


<li>
    **bind** and
    **shroud** now have an option
    ##-out## for specifying the output file,
    so you won't be prompted for it. Thanks to Jonas Temple, Rusty Davis 
    and others.</li>
  
<li>
    **bind**
    and **shroud** now have an option
    ##-quiet## that suppresses normal messages
    and statistics, and therefore eliminates the window that normally pops up.
    Only errors are reported. Thanks to Jonas Temple.</li>

<li>
    The namespace error message that's issued when you refer to a global 
    symbol that's defined in two or more files, now 
    gives you a list of all the files where that symbol 
    has been defined. Thanks to Derek Parnell and Irv Mullins.</li>
  
<li>
    **Translator**: In many cases,
    the C code generated for **remainder()**,
    integer multiplication, and **compare()**
    is smaller and faster.</li>

<li>
    **exw, ecw -wat**: Deallocation of space for huge numbers of small 
    objects (atoms or small sequences) is much faster than in 2.4 alpha. 
    Thanks to Andy Serpa.
    (Note that //allocation// of huge numbers of small objects in **exw**,
    or **ecw -wat**, became much faster in 2.4 alpha, 
    and remains much faster.)</li>

<li>
    When an **ex.err** file is created,
    any warnings issued against the program will be listed at the end of
    the **ex.err** file. Thanks to Al Getz.</li>
  
<li>
    The file name is now included in the warning message that you get for
    some of the common warnings (variable not used, variable not assigned to).
    Thanks to Al Getz.</li>

<li>
    **New Icon**: On
    **Windows**, Euphoria include files are
    now labelled with a gray-scale version of the Euphoria ##E)## icon.
    This lets you easily distinguish the executable Euphoria files from the 
    include files. Thanks to Wolfgang Fritz.</li>
    
<li>
    Out-of-bounds floating-point subscript values 
    were being reported after rounding down to an integer. 
    Now the value before rounding is reported. </li>
  
<li>
    **Euphoria Database System (EDS)**:
    **db_rename_table()** now checks to see
    if the target table name already exists, before it renames a table.
    Thanks to Mike Nelson.</li>

<li>
    The first value returned by **rand()**
    (in the absence of **set_rand()**)
    is now more "random". Thanks to Yuku Sugianto. </li>
  
</ul>

=== Bug Fixes


<li>
    **bug fixed**: Due to a change made in
    2.4 alpha, the **dir()** routine 
    for Borland and Lcc was concatenating the file attributes 
    characters (if any)  to the file name field. 
    Thanks to Dr. Juan R. Herguijuela.</li>
    
<li>
    **bug fixed**: No error message was
    issued when ',' was followed immediately by ')' in a routine's parameter
    declaration list. Thanks to Brage Moris.</li>
  
<li>
    **bug fixed**: Huge positive out-of-bounds
    subscripts (over 2 billion) were reported as huge negative values. </li>
    
<li>
    **bug fixed**:
    **repeat(0, size)**, where size was a
    huge positive floating-point number, incorrectly reported:
    "repetition count must not be negative". Now it reports:
    "repetition count is too large". Thanks to Martin Stachon.</li>

<li>
    **bug fixed**:
    **machine_proc(x, 5)**, where x was a huge 
    floating-point number, incorrectly reported:
    "an integer was expected, not a sequence".
    Now it reports: "The first argument to machine_proc/func must be a small
    positive integer". Thanks to Martin Stachon.</li>
    
</ul>

== Version 2.4 Alpha-test Release February 21, 2003:

=== New Features



<li>
  Most machine-level exceptions (peek/poke to bad addresses etc.)
  in both the main program and in .dlls, are now caught by
  **exw**
  and **exu**, 
  and reported in the usual way, with a full traceback and
  **ex.err** 
  variable dump. This is a great improvement over the cryptic 
  machine-level messages you used to get (and still get when using
  compiled languages, and most interpreted languages) about 
  "segmentation violation", "illegal instruction" etc.). 
  Thanks to Martin Stachon.</li>

<li>
  In addition to ##__stdcall##, the C ##__cdecl## calling
  convention 
  is now supported for calls to C routines in .dll's and also call-backs 
  to Euphoria routines from C code.</li>
  
<li>
  Euphoria's support for DOS long filenames has been extended to
  Windows XP.</li>

<li>
  The **trace** screen shows you large
  sequences in pretty-print display on a separate
  screen. You can scroll through the whole sequence.</li>
  
<li>
  **pretty_print()** was added to
  **misc.e**. 
  It lets you display Euphoria objects
  with a nice, readable structured display, and many formatting options.</li>

<li>
  Pretty-printing of sequences is now done in
  **ex.err**,
  the **?** command, and
  **db_dump()**. </li>
  
<li>
  **Euphoria Database System (EDS)**:
  **db_rename_table(name, new_name)**
  was added to **database.e**.
  This routine was submitted by Jordah Ferguson, and included 
  with only trivial changes.</li>

<li>
  **Linux/FreeBSD**:
  **system()** no longer initializes
  curses when there is no console window yet. Thanks to Daniel Johnson.</li>

<li>
  The number of levels of nested include files has been raised to 30 (from 10).
  Thanks to Tone Skoda.</li>

<li>
  Include statement path names can have double-quotes around them, 
  so paths containing blanks can be handled correctly. This was 
  actually implemented for 2.3 but never documented.</li>

<li>
  **exw.exe**, and any executables
  produced by the **Translator** with Watcom,
  now have the subsystem set to 4.0 instead of 3.1. This improves the
  appearance of GUI's in some cases. The utility
  **make31.exw** will 
  create a version of **exw.exe** that
  supports Windows GUI 3.1 as before, 
  in the unlikely case that there are compatibility problems with
  Euphoria 2.3. Thanks to H. W. Overman, Brian Broker and others for 
  recommending this change.</li>

<li>
  **makecon.exw** - will create a version
  of **exw.exe** that
  operates as a console application - no console window is popped up,
  and **stdin/stdout** can be redirected</li>

<li>
  **trace(1 2 and 3)** are now allowed
  with **bind -clear**
  (still not allowed with **shrouded bind**
  for security reasons). Thanks to Jonas Temple.</li>

<li>
  **Translator**: You can now make a
  Euphoria .dll using Lcc and interface it with interpreted programs running
  under **exw**, and translated programs
  using Borland and Watcom. Previously, the main program had to also be
  compiled with Lcc.</li>
  
<li>
  The **Translator** no longer uses
  the **-m486** or **-mpentium** options available with
  GCC and DJGPP.
  These options were causing warnings, and the C compiler apparently
  sets the machine model correctly by itself. Thanks to Kenneth Rhodes.</li>

<li> 
  The **Translator** will now perform 
  automatic calls
  to user-defined types, in the
  unusual case where the type routine has side-effects (it sets global
  variables, performs I/O etc.). Thanks to Andy Serpa.</li>

<li>  
  **euphoria\demo\bench** compares 
  the 
  **Euphoria Interpreter** and the
  **Euphoria To C Translator** against
  more than 20 other interpreted languages.</li>

</ul>  

=== Porting Activity

<li>
  We ported the **Interpreter**
  and **Translator**
  to **FreeBSD.**
  The source now has several C #ifdef's for FreeBSD.</li>
  
<li>
  Andy Cranston has ported Euphoria to HP Unix, and he plans to do 
  Sun Unix.</li>

</ul>

=== Optimizations
	
<div>**- Interpreter -**</div>
  

<li>
  Typical large slices are faster.
  About 30% faster for slices from about 100 to 50000 in length.
  (Overhead dominates for smaller slices, and lack of caching
  affects larger slices.)
  This assumes the slice is mostly integers (usually true), 
  and an actual copy of the data is made (usually true since v1.4b).</li>
  
<li>
  Statements that contain multiple ##&##
  concatenations are much faster. 
  
  {{{        e.g. instead of:
             **result = a & b & c**
             being evaluated as:
               1. copy a and b into temp
               2. copy temp and c into result 
                  (a and b are effectively copied twice!)
  
             We now do:
               1. copy a and b and c directly into result
  }}}
  
  So there is less copying of data and fewer temp sequences to create.
  The more ##&## operators in an
  expression, the greater the speed-up. e.g. with 3
  ##&## operators some of the data
  was copied 3 times, etc.
  Jordah Ferguson pointed out that this was slow.</li>

<li>
  The time overhead involved in calling and returning from a 
  Euphoria call-back routine has been reduced by about 10 percent.</li>

<li>
  In **exw** and **ecw -wat**, allocation of space for large numbers of 
  objects is faster. It can be tremendously faster when hundreds of
  thousands or millions of objects are involved.</li>
  
<li>
  Better UPX compression has chopped a few K off
  **exw.exe** vs. 2.3 
  (even though new code was added). Thanks to Wolfgang Fritz</li>

</ul>

**- Euphoria Database System -**



<li>
  Keys and records are read faster due to a faster
  **decompress()** routine.
  Almost twice as fast when the key or record data to be retrieved 
  consists mainly of sequences of characters or small integers. 
  This case is quite common.</li>
   
<li>
  Allocating new space in a database is much faster, up to 4x faster,
  especially in large databases with a large list of free blocks</li>
     
<li>
  Inserting and deleting records in huge tables is now much faster. 
  Combined with the speeded-up slices in Euphoria 2.4,
  **database.e** is
  now about 25% faster for a table with 10,000 records and 
  over 3x faster for a table with 100,000 records.
  This really only matters if you are trying to insert/delete hundreds
  of records per second. In the typical case of a human operator
  entering data via GUI, you would never notice the insert/delete time
  for one record (a few milliseconds). Derek Parnell pointed out the
  slowness.</li>

<li>
  **db_select_table()** is significantly
  faster.</li>

<li>
  **get4()** is faster which speeds up
  everything.</li>
     
</ul>

  
  **- Other Optimizations -**



<li>
  **bytes_to_int()** in
  **machine.e** is now more than twice as fast.</li>

<li>
  **gets()** is about 5% faster</li>

<li>
  **sort()** and
  **custom_sort()** are a few percent faster.
  Thanks to Ricardo Forno for tweaking the Shell sort algorithm. </li>
  
<li>
  Several additional optimizations have been added to the
  **Translator**.
  It produces executables that are faster and smaller 
  than version 2.3. The 2.4 Translator has been successfully tested 
  on hundreds of thousands of lines of Euphoria code, and there are
  currently no known code generation bugs. Some Translator 
  benchmark results are in
  **euphoria\demo\bench**.</li>

</ul>

=== Bug Fixes


 **- Source Code -**


<li>
  **bug fixed**: The
  **gnubsd** batch file referred to
  **syncolor.c** and
  **syncolor.o**.
  (**gnuexu** was ok.)</li>
  
<li>
  **bug fixed**: Karl Bochert pointed out a necessary C coding 
  change to make **poke()** work with
  the latest version of Lcc. The change 
  corrected the **Translator** (with
  recent versions of Lcc) and the **Interpreter
  Source Code** (compiled with Lcc)</li>
</ul>                

  **- Interpreter -**


<li>
  **bug fixed**: A crash might occur in situations where a call-back routine
  indirectly called itself recursively. Thanks to Matthew Lewis 
  and George Papadopoulos.</li>

<li>
  **bug fixed**: In for-loops at the top-level of a program 
  (outside of any routine), 
  that incremented the loop variable by an integer other than the default 
  of +1, ##end for## was taking up to
  15x longer than necessary due to a 
  bug fix that was made back in November 1999. Only the
  ##end for##
  itself was slow, not the code contained in the body of the loop.
  Antoine Tammer detected this.</li>

<li>
  **bug fixed**: On XP, when you open a new DOS window that has more than 25 lines,
  the Virtual DOS Machine (VDM) is at first confused about the true number
  of lines. The first time (only) when you ran a Euphoria program in 
  that window, if you ran it near the very bottom of the screen, the output 
  might disappear, or the VDM or Euphoria might report an error etc. 
  Euphoria (**ex.exe**) now detects the
  rare cases when VDM is
  confused and clears the screen, which clears up the confusion. 
  A similar problem existed on NT, and was fixed a few years ago.</li>

<li>
  **bug fixed**: The interpreter was referring
  to "call back from Windows" in **ex.err**,
  even on Linux or FreeBSD. It now says "call-back from external source"
  on those systems. Thanks to Pete Eberlein.</li>
  
<li>
  **bug fixed**: When an include file couldn't
  be found, the error message 
  referred to "euphoria\include". It now uses %EUDIR%\include</li>
  
<li>
  **bug fixed**: An error message will no longer be generated on any platform 
  for ##without profile_time##. Thanks to Alan Oxley.</li>
</ul>

  **- Translator -**


<li>
  **bug fixed**: When assigning
  the result of an arithmetic calculation (typically multiply) 
  involving two integers, to a variable declared as atom, 
  where the atom variable had already (in the same basic block) 
  been assigned an integer value, the Translator might 
  not output any code to check for integer overflow (result outside
  of +/- one billion). This could cause a crash. Thanks to Andy Serpa.</li>

<li>
  **bug fixed**: DJGPP strip.exe command
  in **emake.bat** would fail on XP,2000 due to
  a bug in DJGPP.
  Now **emake.bat** has: **SET LFN=n**
  to work around the bug in strip.exe  </li>

<li>
  **bug fixed**: Translated code compiled
  with Borland C was not producing 
  INF's and NAN's, like Watcom and Lcc. Rather, it was crashing when
  a floating-point overflow (over 1e308), or an undefined f.p. 
  result was calculated. The **Interpreter Source
  Code** was also 
  corrected for those who wish to compile **exw.exe**
   using Borland.
  Thanks to Andy Serpa.</li>
  
<li>
  **bug fixed**: In the first basic block
  of a Euphoria routine (i.e. before any control-flow statements),
  **peek4u()**, <font color="#006699">
  **peek4s()**, and the
  "add integer 1" operation, would sometimes neglect to check for 
  possible 31-bit integer overflow when assigning to a private variable 
  declared as atom, unless the variable had been previously
  initialized. Thanks to Mike Duffy.</li>

<li>
  **bug fixed**: In some cases, when
  assigning a sequence element
  to a variable declared as integer, and known to have an integer value
  at this point, the case where the element was an integer value stored
  in C double form was not handled correctly.</li>

<li>
  **bug fixed**: In rare cases, the
  translator might output two unary minus operators
  in a row, which would be parsed by a C compiler as the 
  C decrement operator "--".</li>

<li>
  **bug fixed**: Euphoria .dll's were not
  always correctly freeing storage
  allocated by the main program, and vice versa. Memory could be wasted,
  and you might get a machine-level crash. Thanks to H. W. Overman.
  
  **Note:** Due to this fix, any Euphoria .dll's created with the 
  Translator version 2.3 or earlier, must be re-translated with 2.4, 
  and re-compiled, in order to interface with the Euphoria 2.4 (or later) 
  interpreter or translated code. New .dll's created with version 2.4 
  or later, will not work with the interpreter version 2.3 or earlier, 
  except in trivial cases.</li>

<li>
  **bug fixed**: The
  **sleep(x)** function was only sleeping
  for x milliseconds 
  when using the Lcc run-time library. It now sleeps for x seconds, 
  to conform with the Euphoria documentation for
  **sleep()**. Thanks to Wolfgang Fritz.</li>
  
<li>
  **bug fixed**: On some versions of Linux, a translated/compiled Euphoria
  program would crash if standard output was redirected, e.g. for CGI</li>

<li>
  **bug fixed**: On some versions of Linux, a translated/compiled Euphoria
  program would crash if machine(M_GET_SCREEN_CHAR, {row, col}) were called.</li>

<li>
  **bug fixed**: In some cases the code was not correct when an 
  integer variable was assigned the unary minus of an atom variable.</li>

<li>
  **bug fixed**: In a very rare case, an uninitialized value in memory
  might be used to determine if a literal floating-point value should be
  treated as an integer or not. Incorrect code could result.</li>
  
</ul>

  **- Binder -**


  
<li>
  **bug fixed**: The binder would crash
  after seeing a comment with no new-line character, just EOF, on the last
  line of a file. Some versions of Win32Lib.ew had this.
   Thanks to Henri Goffin.</li>

<li>
  **bug fixed**: The usage report of
  **bind**/<font color="#993333">**shroud**
   still said "-scramble", instead of "-clear" and had other
  errors for Linux/FreeBSD. Thanks to Chris Bensler.</li>

<li>
  **bug fixed**:
  **bind/shroud -clear** might neglect to 
  rename a private variable, when an earlier local variable gets renamed 
  into the same name. Thanks to Pete Lomax.</li>

<li>
  **bug fixed**: When an include file was
  missing ##\n## on the last line,
  **bind/shroud -clear** might neglect to leave some whitespace 
  before the next word in the main file. Thanks to Pete Lomax.</li>
  
<li>
  **bug fixed**: If you defined a constant
   that was never used, and
   it was defined using an expression that contained a binary 
   minus operator, a syntax error could occur in the bound or 
   shrouded file that you create. Thanks to Chris Bensler.</li>

</ul>

  
  **- Library Routines -**

  

<li>
  **bug fixed**: 
  **walk_dir("/",...)** would fail on Linux.
  Thanks to Ricardo Forno.</li>

<li>
  **bug fixed**:
  **db_compress()** of EDS had an error
  if the database file or it's path contained a blank character. A
  blank is ok now on all platforms except DOS. Thanks to Virtual B.</li>

<li>
  **bug fixed**:
  **wildcard_file()** in
  **euphoria\include\wildcard.e** is now case 
  sensitive on Linux/FreeBSD (but is still case insensitive on DOS/Windows). 
  Thanks to Jeff Fielding.</li>

<li>
  **bug fixed**:
  **dir()** was not always reporting file
  sizes greater than 1 Gb correctly. It now handles up to 4 Gb. Arithmetic
  performed on the file size would probably fail. Thanks to Ricardo Forno.</li>

<li>
  **bug fixed**:
  **where()** was not always reporting file
  positions greater than 1 Gb
  correctly. Arithmetic performed on the position would probably fail. 
  It now handles up to 2 Gb.</li>

<li>
  **bug fixed**:
  **ex, exw, ec -wat, ecw -wat**: The
  **dir()** function for 
  DOS and Windows was not handling wildcards correctly when a backslash 
  appeared at the end of the file or directory path. Thanks to Juergen Luethje.</li>

</ul>

  
  **- Namespace Feature -**


<li>
  **bug fixed**: If you tried to declare a
  new variable, using a namespace
  qualifier, e.g. **integer y:x** (which is illegal)
  it wouldn't complain, and would just ignore the "y:" part,
  as long as y:x was a routine (not a variable) in an earlier file. 
  This is now caught as an error. Thanks to Martin Stachon.</li>

<li>
  **bug fixed**: When declaring the type of a parameter, using a global type that was
  defined in more than one file, you would get an unclear error
  message stating "a type is expected here". Now you'll get a
  message pointing out that the type requires a namespace identifier
  to resolve it. Thanks to Juergen Luethje.</li>
   
<li>
  **bug fixed**: The error message that you get if you specify a namespace
  qualifier and a ':', but you neglect to follow it with a properly-formed 
  identifier, has been improved.  Thanks to Carl White.</li>

</ul>

  
  **- Demo Programs -**
  

<li>
  **bug fixed**:
  In the **window.exw** demo program,
  **allocate(64)** and
  **allocate(16)** 
  caused a storage leak. Thanks to Wolfgang Fritz and Jordah Ferguson.</li>
</ul>

  
  **- Trace/Debug -**
  

<li>
  **bug fixed**: When
  **trace(0)** was executed, followed later by
  **trace(1)**, with no
  screen I/O in between, the values of some variables on the trace screen 
  were not updated. Thanks to Ricardo Forno.</li>

<li>
  **bug fixed**:
  **with trace** /
  **with profile** /
  **trace(3)**, used all together,
  produced garbage source lines in
  **ctrace.out**. Thanks to Kat.</li>

</ul>

<div>a name="v2.3"></a></div>

== Version 2.3 Official Release February 11, 2002:


This release updates the Euphoria Interpreter, 
the Euphoria To C Translator, and the Interpreter Source Code product,
for all platforms.



<li>
 The DJGPP version of the interpreter source code now uses 
 GNU C's dynamic labels, just like the Linux version. This allows
 it to achieve full speed, without the need for any assembly-level 
 tweaking. Thanks to Bernie Ryan.</li>

<li>
 The Interpreter Source Code now includes an overview document
 describing how the interpreter works.</li>
 
<li>
 In the Complete Edition, bind.bat and bindw.bat now use exw to run
 the binder/shrouder. This avoids problems with long filenames
 on some systems. A console window will appear while the binder/shrouder
 is running. Thanks to "void", Bruce Axtens, and others.</li>

<li>
**bug fixed : **
 Due to a bug in the WATCOM 10.6 C library, the ex and exw interpreters,
 and code translated to C and compiled by Watcom, might get the wrong
 result from Euphoria's where() function when the file was opened in 
 append mode, and the file pointer was in the uncommitted (not written 
 to disk yet) portion of the file. The bug has been worked around 
 by having Euphoria flush() the file in this particular case, 
 before calling the Watcom routine. Thanks to Bob Elia.</li>

<li>
**bug fixed : **
 A bug introduced in the binder for 2.3 beta, might cause
 a function call on the last line of a program to be ignored.
 Thanks to Wolfgang Fritz.</li>

<li>
**bug fixed : **
 Several Euphoria files in the WIN32+DOS32 distribution had Linux-style
 line terminators (\n only). This made them hard to view using 
 NotePad and some other editors. Thanks to Pete Lomax.</li>

<li>
**bug fixed : **
 If "with type_check" was turned on, ed.ex would get a type_check failure
 when the Esc key was pressed. Thanks to Kenneth Orr.</li>
 
</ul>

== Version 2.3 Beta Release January 15, 2002:

This release updates the Euphoria Interpreter, 
the Euphoria To C Translator, and the Interpreter Source Code product,
for all platforms.



<li>
  You can now override a Euphoria built-in routine with your own
  variable or namespace identifier of the same name. 
  Previously this was only allowed for user-defined routines.
  Besides giving programmers more freedom, it will allow RDS
  to add new built-in routines in the future without breaking 
  existing code.</li>

<li>
  The warning about having multiple global symbols with the same name
  in different source files has been removed. It was felt to be unnecessary 
  since you'll be asked to supply a namespace identifier if you actually 
  make an ambiguous reference to a global symbol.</li>

<li>
  You can now have a trailing \ (or Linux /) on the end of all directory names 
  in **EUINC**, and you can have blanks in the directory name.</li>

<li>
  To eliminate confusion, the binder/shrouder will now delete the 
  output file if a fatal error occurs during the bind or shroud.</li>

<li>
  Numerous improvements and corrections were made to the documentation.
  Thanks to Igor Kachan.</li>

<li>
  Old, pre-ANSI function definitions in the interpreter source code,
  have been updated to ANSI-style, which is more compatible with C++.</li>

<li>
**bug fixed : **
  With DJGPP C, when compiling code produced by the Translator, 
  or compiling the Interpreter source code, 
  there was a memory allocation bug that could waste a bit of time, 
  or, in rare cases, cause a crash.</li>

<li>
**bug fixed : **
  On Windows, using the Interpreter, or a Translated program, you were 
  sometimes required to hit Enter twice to exit from a console window. 
  Thanks to Tone Skoda.</li>

<li>
**bug fixed: **
   The Euphoria dir() function, as implemented for Lcc or Borland,
   did not handle directories properly when they had extra attributes
   set, such as READ_ONLY. Thanks to Euman, who encountered the problem,
   and then showed how to fix the Interpreter source code for dir().</li>

<li>
**bug fixed: **
  You can now declare a namespace identifier with the same name as a built-in function,
  without causing a lot of errors. Thanks to Martin Stachon 
  (although he recommended a different solution).</li>
  
<li>
**bug fixed -  Binder: **
 Support for the new **EUINC** environment variable
 has now been added to the binder. Thanks to Ross Boyd. </li>

<li>
**bug fixed -  Binder: **
  Appending resource files to a bound .exe didn't work
  correctly when bind -clear was used. Thanks to Wolfgang Fritz. </li>

<li>
**bug fixed -  Binder: **
 When using the binder interactively, you would get a
 "variable not initialized" error when trying to substitute a
 different Windows icon. Thanks to Tony Steward.</li>

<li>
**bug fixed -  Binder: **
 In some cases the keyword "constant" would be dropped from 
 the shrouded output, when the previous line of input had a 
 constant declaration ending in ']'. Thanks to Ross Boyd.</li>

<li>
**bug fixed -  Binder: **
When a general expression, (not just a string in quotes), 
was used as the argument to routine_id(), local routines that were
potentially the target of that expression, might have their
names changed (unless -clear was used), thus causing routine_id()
to return -1 at run-time. Global routines were ok.</li>

<li>
**bug fixed -  Binder: **
The binder/shrouder kept going even though an include file was missing.
Thanks to Ross Boyd.</li>

<li>
**bug fixed -  Linux Binder:**
 The Linux search path bug for bound executables, supposedly fixed
 by the 2.3 alpha release, wasn't fixed properly. Fixed now.
 Thanks to Kenneth Rhodes. </li>

<li>
**bug fixed -  Linux Binder:**
  bindu -clear  and shroud -clear with a file containing 
  DOS/Windows-style \r\n line terminators gave you errors 
  "illegal character" when your shrouded program was run, 
  and "not bound correctly" when your bound file was run. </li>

<li>
**bug fixed -  Interpreter Source:**
  The link command for building the DOS interpreter with WATCOM C,
  listed a non-existent .obj file.</li>

</ul>

== Version 2.3 Alpha Release November 30, 2001:

This release updates the Euphoria Interpreter for WIN32, DOS32 and Linux.
It also updates the Euphoria To C Translator for all platforms, 
and it introduces a new product - the Euphoria Interpreter Source Code.


<li>
The registration incentives and prices have changed.</li>

<li>The Interpreter product now has just one option: 
   WIN32, DOS32 //and// Linux, formerly $59, for just $39.</li>

<li>The Interpreter source code (minus a few registered features)
    is now available for $49. See the a href=license.htm>source license</a>
    and a href=register.htm>register.doc</a> for more details.</li>
<li>
The Translator continues to cost $29.</li>

<li> When Public Domain users reach 300 statements, they will no longer
lose the run-time error diagnostics. They will only lose the trace() facility.</li>

</ul>

a href=register.htm>register.doc</a> has more details, including the
requirements for getting a free upgrade.

<li> 
 The Euphoria interpreter can now be built successfully by 6 different 
 C compilers on 3 platforms.</li>

<li> 
 New //namespace qualifiers// eliminate naming conflicts
 between identical global symbols declared in different include files.
 Also, local symbols will now override global symbols of the same name,
 rather than causing an error. See a href=refman_2.htm#42>Scope Rules</a>.</li>

<li> 
 The Complete Edition Interpreter product comes with a new 
 2-pass binder/shrouder that eliminates all unused routines and constants,
 resulting in smaller executable files. It also has an option to bind 
 clear source, so you can get understandable error messages from your users.</li>
 
<li> 
 A new environment variable, EUINC, has been introduced.
 If present, it specifies a list of additional directories that will be
 searched for include files. The directory containing the main file 
 is always searched first, then the directories in EUINC, 
 then euphoria\include.</li>

<li> 
 The Interpreter now supports a new trace mode, trace(3).
 It logs all executed Euphoria statements to a file, so 
 you'll be able to see the last statement that was 
 executed at the time of any crash, as well as the 499 statements 
 that preceded it.
 This is particularly helpful in the case of machine-level crashes
 where Euphoria is unable to write an ex.err file.
 Thanks to Matthew Lewis.</li>

<li> 
 The Euphoria interpreter can now pass Euphoria data - 
 atoms and sequences, to .dll files coded in Euphoria and built 
 by the Translator. Use the new E_ types in dll.e</li>
  
<li> 
 On Linux we added RTLD_GLOBAL on the dlopen() call. This lets you link
 successfully with more shared libraries.</li>
   
<li> 
 On Linux, when using the #! feature on the first line, 
 to make your source file directly executable, 
 you no longer need a .exu extension on your file.
 Linux programmers often prefer to have no extension on their executable files.</li>

<li> 
  Windows callback routines written in Euphoria can now take 9
  arguments (was 8). Thanks to Matt Lewis.</li>

<li> 
  In addition to C_DOUBLE (8-byte floating point), C_FLOAT 
  (4-byte floating-point) is now supported for arguments and 
  return values from C routines. Thanks to David Guy.</li>
  
<li> 
  Windows .dlls opened with open_dll() are now closed automatically
  when your program terminates. This avoids a tiny bit of memory leakage.
  Thanks to Euman.</li>
  
<li> 
  safe.e has a new option to check just the edges of registered blocks
  and not complain if other blocks of memory are used.</li>

<li> 
  get_bytes() is 30% faster.</li>

<li> 
  allocate_string() was speeded up. Thanks to Yuku Sugianto.</li>

<li> 
  The mydata.ex demo program now uses an EDS database.</li>
    
<li>
 **bug fixed -  Translator: ** 
  When a global or local variable containing a sequence or floating-point
  number was assigned the result of a function,
  and at some point during the function call 
  the global or local variable was overwritten, 
  some corruption would take place, leading to a probable
  crash later in the program. Thanks to Sergio Gelli.</li>

<li>**bug fixed -  Linux Interpreter: **
programs of more than a few thousand lines had a chance (maybe 20%)
of having one of their statements crash whenever it was executed.</li>

<li>**bug fixed - Interpreter: ** **s[i][j]...[k] = s**
 caused the interpreter to crash. i.e. an assignment of an entire sequence 
 to an element of an element of itself using 2 or more levels of 
 subscripting. Thanks to Henri Goffin.</li>

<li>**bug fixed -  Linux binder: ** (Kenneth Rhodes)  
  Bound executable programs stored somewhere on the search path
  would not run properly unless they were in the current directory
  or unless you specified the full path to the executable.</li>
   
<li>**bug fixed -  Binder: ** "with profile_time" in a 
bound or shrouded program would cause a crash</li>

<li>**bug fixed -  DOS Interpreter: ** In image.e,
 put_screen_char() has been corrected to have:
  **if overflow > 0 then ...** instead of: ** if overflow then ... **</li>

<li>**bug fixed -  Interpreter: ** 
  A time optimization for slicing could in rare cases cause a lot of
  wasted space. The optimization has been adjusted to handle those cases.
  Thanks to Brian Clausing.</li>

<li>**bug fixed - safe.e: ** free() and free_low() 
were not actually freeing the block of memory, and on Linux free() 
could cause a segmentation violation. The same routines in 
**machine.e** were ok.</li>

<li>**bug fixed - Translator for DJGPP: **A 
  couple of minor differences from ex.exe in the display of text 
  were corrected.</li>

<li>**bug fixed - define_c_var(): ** 
works on WIN32 too. The documentation was corrected.  </li>

</ul>

== Euphoria to C Translator Official Release June 5, 2001:

<li> A couple of minor enhancements and bug fixes.</li>
</ul>

== 
Euphoria to C Translator Beta-2 Release May 8, 2001:

<li> You can now use the translator to make a .dll file.</li>
</ul>

== Euphoria to C Translator Beta-1 Release February 15, 2001:

<li> Some bugs were fixed. Smaller, faster C code is produced.</li>
</ul>

== Euphoria to C Translator Alpha-4 Release December 14, 2000:

<li> Pixel-graphics and mouse support was added for DJGPP C.</li>
</ul>

== Euphoria to C Translator Alpha-3 Release November 27, 2000:

<li> Some bugs were fixed. Some new features were added. 
     Borland C++ is now supported.</li>
</ul>

== 
Euphoria to C Translator Alpha-2 Release October 26, 2000:

<li> Support for the Lcc C compiler for Windows was added. DJGPP C (DOS) 
     is partially supported (no pixel graphics).</li>
</ul>

== 
Euphoria to C Translator Alpha Release September 6, 2000:

<li> The first release of the translator. It supports Euphoria version 2.2.
It relies on WATCOM C for DOS and Windows, and GNU C for Linux. Prime sieve
runs 3.2x faster than with the interpreter. Shell sort runs 4.5 times faster.</li>
</ul>

== 
Version 2.2 Official Release for WIN32+DOS32 January 14, 2000:

<li> Better error messages are now issued from the interpreter, and from
the bind program, for some typical errors that users can make when 
binding a program.</li>
<li> The documentation has been improved in a few places.</li>
<li> The **window.exw** demo program shows how to load the 
Euphoria icon contained in exw.exe.</li>
<li> Language War uses Jiri Babor's improved version of **putsxy.e**.
</ul>

== Version 2.2 Beta Release for WIN32+DOS32 December 23, 1999:

Most of the new library routines developed for Euphoria 2.2 on 
Linux, have now been ported to WIN32 and DOS32. 
These are: sleep(), chdir(), flush(), lock_file(), unlock_file(),
crash_file(), get_screen_char() and put_screen_char(). For a
description of these routines refer to the Linux release notes below,
or a href=library.htm>LIBRARY.DOC</a>.


Some cross-platform bug fixes and other miscellaneous improvements 
were made during the Linux port. These bug fixes and improvements
have now been ported back to WIN32+DOS32. See the Linux release notes (below).


In addition, the following improvements have been made specifically 
for WIN32 and DOS32:

<li> **exw.exe** now contains a Euphoria icon that is displayed 
automatically by Windows. The icon was contributed by Gary Dumer.
Registered users may change this icon when they bind a program.</li>
<li> **exw.exe** is now a compressed executable of just 73K (or so).
It's compressed using the UPX compression tool for .exe files.</li>
<li> **ex.exe** has been updated with the latest release of 
the CauseWay DOS extender. A problem where
CauseWay would sometimes limit you to 64Mb of memory under
some DOS configurations has been eliminated, and a few other minor
bugs were fixed.</li>
<li> **bug fixed:**
The error traceback could sometimes crash or be misprinted when
a type_check failure occurred. It could only happen when 1 was added to
an expression, and the non-integer result of the expression 
was assigned to a variable declared as integer.</li>
<li> **bug fixed:**
If text_rows() was called as the first routine needing a WIN32 console
window, Euphoria would fail to set the new number of lines of
text on the console.</li>

</ul>

== Version 2.2 Official Release for Linux November 22, 1999:

<li> **All platforms: bug fixed:**
If a Euphoria routine called itself recursively from inside a
for-loop, and at one level of recursion the for-loop counted //up// 
to an upper limit, and at another level of recursion the for-loop 
counted //down// to a 
lower limit, the for-loop would probably malfunction at one of the levels.
Thanks to Delroy Gayle.</li>
<li> The documentation was improved in many places, especially with respect
to the Linux platform.</li>
</ul>

== Version 2.2 beta-test release for Linux October 22, 1999:

//Most of these features and bug fixes will also be made available 
in Version 2.2 for **WIN32 + DOS32**//. 

<li>
**platform()** has been moved from misc.e into exu to eliminate 
the function call overhead. platform() now takes zero time to compute.
The compiler simply plugs in the appropriate constant value.
<li>
 **lock_file()** 
 and **unlock_file()** have been added 
 to allow multiple processes
 to share access to files. This can be important in CGI programming and
 other areas.
<li>
**flush()** will force the contents of the memory buffer out to a file or device.
<li>
**chdir()** will change to a new current directory and let you know if it
was successful.
<li>
**sleep()** will suspend execution of your program for a number of seconds,
and let the operating system schedule another process.
<li>
**put_screen_char()** will write a character and its attributes (colors etc.)
to the screen.
<li>
**get_screen_char()** will read a character and its attributes from the screen.
<li>
**save_text_image()** now works on Linux (as well as DOS32). It copies
a rectangular text image from the screen.
<li>
**display_text_image()** now works under Linux (as well as DOS32). 
It writes a rectangular text image to the screen.
  
<li>
The "short-circuit" warning now gives the filename and line number of the 
  possibly short-circuited call. Minor clarifications were made in some 
  other error messages as well.
<li>
Minor improvements were made to **ed** and **search**.
<li>
A portability problem in **how2reg.ex** was fixed.
<li>
**exu** is compressed better. It's actually a bit smaller now,
although functionality has been added to it. 
</ul>


&nbsp;<br>
 
== 
Version 2.2 alpha-test release for Linux August 24, 1999:


//Many of these features and bug fixes will also be made available 
in Version 2.2 for **WIN32 + DOS32**//. 

<li>
 The documentation has been brought up-to-date to include 
  **Linux**-specific information for library
  routines and Euphoria in general.
<li>
 There is now a Complete Edition for
  **Linux**, including
  **binding** and 
  **shrouding**. See
  **register\register.doc**.
<li>
 There is now **text mode** mouse support using
  **get_mouse()**. You must have **GPM
  server** running. It works in a text console or an **xterm** window.
<li>
 **Linux:**
  **define_c_var(name)** will return the
  address of a global C variable in a shared library.
<li>
 It was confirmed that you can call Euphoria routines from
  **Linux** C routines using exactly the same
  mechanism as in **WIN32** Euphoria.
  See **euphoria/demo/linux**.
<li>
 An example of creating your own shared library routines and calling them from
  Euphoria was added. See
  **euphoria/demo/linux**.
<li>
 **All platforms: crash_file(file_name)** will
  cause diagnostic messages to be written to **file_name** instead of
  **ex.err**. You can use 
  **crash_file("/dev/null")** to get
  diagnostics on screen but not in a file.<br>
  **crash_file("")** means
  "no diagnostics" (to screen or ex.err). 
<li>
 **Trace** mode in **xterm** now detects
  the **F1/F2** keys.
<li>
 **time()** now reports real "wall-clock" time,
  not CPU time.
<li>
 **search**,
  **guru** and
  **cdguru** now place their output in your
  $HOME directory instead of the current directory.
<li>
 **#!** is now restricted to just the first line of a file.
<li>
 **All platforms:** In **ed**, the
  **Esc n**, **Esc d**, **Esc f** and **Esc r** commands will
  immediately redisplay your last choice. You can press
  **up-arrow/down-arrow** to 
  see other choices, or clear the choice. If you start typing without
  editing, it will clear the choice and take your new input.
<li>
 **free_console()** will set the terminal
  parameters back to normal. Normally, when running a Euphoria program the
  parameters are set the way that **curses** wants them and they are set
  back to normal when the program terminates.
  If your program needs to terminate
  in a strange way (other than calling abort()),
  **free_console()** should be called first. 
<li>
 **bug fixed: <font color="#006699">get()</font>
  ** now considers '\r' to be a whitespace character. This is important when
  reading DOS files.
<li>
 **All platforms: bug fixed:** It was not
  immediately issuing a **type_check** 
  failure when 1 was added to an integer variable that was set to the maximum
  value for an integer (1.07 billion). Thanks to Jeff Fielding.
<li>
 **All platforms: bug fixed:** It was not
  always detecting an improperly-formed 
  exponent on a floating-point number. Thanks to Lionel Wong.
<li>
 **All platforms:** The performance of the storage allocator has been 
  improved in certain cases. A bug that could cause the interpreter to 
  crash when you are almost out of memory has been fixed. 
</ul>       
&nbsp;<br>
 
== 
Version 2.2 pre-alpha #4 for Linux July 15, 1999:

<li>
 You can call C routines in **Linux**
  shared libraries (**.so** files). See
  **euphoria/demo/linux/callc.exu** for
  some examples.
<li>
 If your program does not output anything to the **xterm** window, 
  **exu** will not issue the "Press Enter"
  prompt.
<li>
  **All platforms: ed** now lets you recall
   previous top-line command text using **up-arrow** and **down-arrow**,
   similar to doskey in DOS and the shell history in Linux. This works with
   any strings that you type for **Esc n** (new file),
   **Esc d** (Linux command), **Esc f** (find string) or
   **Esc r** (replace string). In addition, you can now use
   **arrow keys**, **Home**, **End**, **Delete** etc. to edit
   strings before you press **Enter**. 
</ul>       
&nbsp;<br>

== 
Version 2.2 pre-alpha #3 for Linux July 8, 1999:

<li>
 In an **xterm** window, **exu** will
  prompt you to hit **Enter** before it exits. Without this, **xterm**
  restores the screen so fast that you don't see any output or error messages.
<li>
 An internal coding change was made to Euphoria's
  **rand()** function. 
  (The algorithm has not changed.)
  Hopefully this will
  allow rand() to work on all distributions of
  **Linux**. Please let us know if
  rand() still fails.
<li>
 **ed:** The **Esc h** command will
  display the Euphoria help files. This was broken in pre-alpha#2.
<li>
 In an **xterm** window, Euphoria's
  **video_config()** now reports the correct 
  number of lines and columns - this helps
  **ed** to work much better.
  **ed** will work with the initial size of
  window in effect when **ed** starts up.
<li>
 **ed:** **F1**, **F2**, **F3**,
  **F4**, **Home**, **End**, and the **Delete** key work now in
  **xterm** (under Red Hat 5.2 at least). The other F-keys were already
  working. **PageUp/PageDown** and some other keys still don't work - feel
  free to add your own alternate keys.
<li>
 **exu** is now even smaller - just 82K.
</ul>       
&nbsp;<br>

== 
Version 2.2 pre-alpha #2 for Linux July 6, 1999:

<li>
 The **ncurses** library has been statically linked into
  **exu**.
<li>
 **exu** is now a compressed executable (97K).
<li>
 **bug fixed: <font color="#993333">ed</font>**
  can now edit files with upper case letters in the name.
<li>
 The fraction of a second delay when you press the **Esc** key in
  **ed** has been removed.

</ul>
&nbsp;<br>

== 
Version 2.2 pre-alpha #1 for Linux July 1, 1999:

<li> The first version of Euphoria for
 **Linux** was released.
</ul>       
&nbsp;<br>

== **
<_dul>Version 2.1 Official Release for WIN32 + DOS32 March 29, 1999:</_dul>
**


<li>
  Updates to the **trace** screen have been
  optimized. Unnecessary refreshes of the source code, and the variables on
  the trace screen, have been eliminated. When a refresh is necessary, it is
  now slightly faster. This makes a noticeable difference in
  **exw.exe**, and also in
  **ex.exe** in
  pixel-graphics modes. For 
  **ex.exe** in 
  text modes, it reduces screen flicker 
  slightly.
<li>
  The **install** program no longer requires 
  that your PATH be less than 128 characters. It will simply warn you if it 
  isn't. Newer versions of DOS allow for a longer PATH. Thanks to Steve Adams.
<li>
  An extra error check was added to
  **unregister_block()** in
  **safe.e**. Thanks to David Guy.
</ul>
  
&nbsp;<br>

== 
Version 2.1 beta-test release March 5, 1999:


<li>
  The rest of the files in the **euphoria\doc**
  directory have now been converted to HTML. Every **.doc** file in the
  **doc** directory now has a corresponding
  **.htm** file in the **euphoria\html**
  directory. Many improvements and clarifications were made to the
  documentation.
<li>
  You will now be warned when you have code that comes immediately
  after an **exit**,
  **return** or
  **abort()** statement. This code can never
  be executed. Suggested by Gabriel Boehme.
<li>
  **safe.e** no longer includes
  **graphics.e**. This eliminates possible
  naming conflicts when **safe.e** is
  substituted for **machine.e**.
<li>
  Using code supplied by David Guy, **safe.e**
  will now let you add or remove externally-allocated blocks of memory on
  the "safe address list". **See the new library
  routines:**
  **register_block()** and
  **unregister_block()**.
<li>
  **message_box()** now uses the **handle of
  the active window** rather than NULL. This forces the user to reply to
  your message before he can continue to interact with your program.
  He won't be prevented from interacting with other programs. Thanks to
  Austin C.
<li>
  **get()** and
  **value()** have been sped up by a
  further 5% thanks to Gabriel Boehme.
<li>
  **exw.exe** has been made less likely
  to crash mysteriously when attacked by a virus.
<li>
  **sanity.ex** now checks your installation
  of Euphoria. You'll be warned if your PATH or EUDIR variables are not set,
  or your **ex.exe**,
  **exw.exe**,
  **pdex.exe**, or
  **pdexw.exe** files have been corrupted
  or not installed correctly in
  **euphoria\bin**.
<li>
  The security of **bound** and
  **scrambled** programs has been tightened
  some more. Thanks to Rusty Davis.
<li>
  To save space in **euphor21.zip**, the
  **install** program now //generates// the
  HTML and DOC files from a common source, using Junko Miura's
  **documentation generator**. In the process,
  the generator is deleted, but you can download it from the RDS site.
<li>
  When a **type_check** failure occurs
  you'll be warned if the type erroneously returned a //sequence// for it's
  "true/false" result. Previously, a sequence result was simply reported
  as a type_check failure. Suggested by Ralf Nieuwenhuijsen.
<li>
 The code for **demo\win32\winwire.exw** was
 cleaned up considerably.
<li>
 The **install** program will warn you to
 change your **autoexec.bat** file when you install a new
 release of Euphoria onto a //different// drive.
</ul>

&nbsp;<br>

== 
Version 2.1 alpha-test release January 15, 1999:


<li>
 We've made a number of changes to the packaging, pricing, and registration
 incentives for the Euphoria product:


<li>
     The Dual-Platform (DOS32+WIN32) package, formerly $53 has been reduced
     to $39 U.S., effective immediately.
<li>
     The Single-Platform (DOS32-only) package, formerly $32, has been
     discontinued.
<li>
     The printed manual has been discontinued. Instead, there is now an
     official HTML version of the manual, included with the Public Domain
     .zip file.
<li>
     All useful 3rd-party include files, such as **Win32Lib.ew** and many
     others, will be "stamped" by RDS with a code number that makes them
     **//free//**, just like the files in
     **euphoria\include**. They will not 
     add to your statement count, provided you do not significantly modify
     them. This will also allow 3rd-party developers to get better diagnostic
     information from their users.
<li>
     **Binding**,
     **shrouding** and
     **profiling** will now be part of the
     Complete Edition only. These are features that beginners do not require,
     but serious users might find valuable.

</ul>

<li>
 Short-form assignment operators **&nbsp; += &nbsp;
 -= &nbsp; *= &nbsp; /= &nbsp; &= &nbsp;** have been added. 
 For example, instead of saying:
<eucode>
           count = count + 1
</eucode>
 You can now say:
<eucode>
           count += 1
</eucode>

 Instead of saying:
<eucode>
           matrix[row][column] = matrix[row][column] * 5.0
</eucode>
 You can say:
<eucode>
           matrix[row][column] *= 5.0
</eucode>

 Instead of saying:
<eucode>
           test_scores[start..finish] = test_scores[start..finish] / 100
</eucode>
 You can say:
<eucode>
           test_scores[start..finish] /= 100
</eucode>
 See a class="blue" href="refman_2.htm#assignop">
 **refman.doc**</a> for the details.

<li>
 Euphoria now uses "short-circuit" evaluation of
 ##and## and
 ##or## expressions in
 **if/elsif/while** conditions.
 e.g. in an ##and## condition:
<eucode>
           if A and B then ...
</eucode>
   the interpreter will skip the evaluation of expression B whenever 
   expression A is 0 (false), since it knows that the overall result
   must be false. In an ##or## condition:
<eucode>
           while A or B do ...
</eucode>
   the interpreter will skip the evaluation of expression B whenever
   expression A is non-zero (true), since it knows that the overall result
   must be true.

   Euphoria code written prior to version 2.1 may no longer work correctly if
   expression B contains a function with **//side-effects//** such as
   setting a global variable, doing I/O etc. In practice this kind of code is
   very rare, but just in case, a warning will now be issued if a function
   with side-effects might be short-circuited. 

   By skipping the evaluation of B, short-circuit evaluation is typically
   faster, and will allow you to write statements such as:
<eucode>
           if atom(x) or length(x)=1 then ...
</eucode>
   that would generate an error on older versions of Euphoria whenever x
   was an **atom**, since
   length() is not defined for atoms.

   See a class="blue" href="refman_2.htm#shortcir">
   **refman.doc**</a> for the details.

<li>
 Several new routines were added.

 <_sul>**Built-in to ex.exe/exw.exe:

 <table border=0 cellspacing=2 cellpadding=2>

 <tr><td width=24 nowrap></td>
   <td width=120 nowrap></td>
   <td width=10></td>
   <td></td>
   </tr>
 
 <_4clist
   name="profile()"
   pos=25
   description="turns **profiling**
    **on/off** so you can focus your
    **profile** and
    **profile_time** runs on particular
    events within your program."
 >

 <_4clist
   name="system_exec()"
   pos=25
   description="gives you the exit code from calling a **.exe** or
    **.com** file, or another Euphoria program."
 >
 
 <_4clist
   name="equal()"
   pos=25
   description="compares any 2 Euphoria objects for equality.
     equivalent to: compare(a,b) = 0  but
     more readable."
 >
 
 </table>


 <_sul>**Added to various include files:**</_sul>
 

 <table border=0 cellspacing=2 cellpadding=2>

 <tr><td width=24 nowrap></td>
   <td width=120 nowrap></td>
   <td width=10></td>
   <td></td>
   </tr>

 <_4clist
   name="walk_dir()"
   pos=26
   description="recursively goes through a directory and subdirectories,
     calling a routine that you supply."
 >

 <_4clist
   name="reverse()"
   pos=26
   description="returns a sequence in reverse order."
 >

 <_4clist
   name="sprint()"
   pos=26
   description="returns the string representation of any Euphoria object."
 >

 <_4clist
   name="arcsin()"
   pos=26
   description="inverse trig function."
 >

 <_4clist
   name="arccos()"
   pos=26
   description="inverse trig function."
 >

 <_4clist
   name="get_bytes()"
   pos=26
   description="returns the next n bytes from a file."
 >

 <_4clist
   name="prompt_number()"
   pos=26
   description="prompts the user to enter a number."
 >

 <_4clist
   name="prompt_string()"
   pos=26
   description="prompts the user to enter a string."
 >

 <_4clist
   name="instance()"
   pos=26
   description="**WIN32:** returns the
    instance handle of the program."
 >

 <_4clist
   name="PI"
   pos=26
   description="the constant PI - 3.14159... was added to
    **misc.e**."
 >

 </table>


   See a class="blue" href="library.htm">**library.doc**
   </a> for the details.

<li>
 The main Euphoria documentation can now be viewed locally with a Web 
   browser. The plain-text files **refman.doc**
   and **library.doc** are still 
   available in the **doc** subdirectory,
   but we now have **refman.htm** and 
   **library.htm** in the new
   **html** subdirectory. We have developed
   a tool (written in Euphoria) that lets us easily maintain both an
   up-to-date HTML version, and an up-to-date plain-text version of
   **refman** and
   **library**.
  
   The documentation has also been clarified and expanded in many places.

<li>
 **WIN32:** you can create an
 **unlimited** number of Euphoria
 call-back routines,
   as long as each routine is a function with 0 to 8 parameters. 
   See a class="blue" href="platform.htm#callback">
   **platform.doc**</a>. In version 2.0 you could only have one
   call-back routine and it had to have exactly 4 parameters.

<li>
 The ##xor## keyword has been added to
  complement: **and/or/not** and
  **xor_bits()** e.g.
<eucode>
           if a xor b then...
</eucode>
   ##xor## works on sequences too.
   It's similar to ##or##.

<li>
 The **dir(path)** library routine now
 officially supports the use of **wildcards *** and **?** in the path
 that you supply. This feature was always available, but wasn't
 documented until now. e.g.
<eucode>
           info = dir("mydata\\*.d?t")
</eucode>

<li>
 **optimization:**
  Subroutine call+return overhead was reduced by an average of 
   30%. The speed-up occurs for all normal function/procedure/type calls, 
   user-defined type-checks,
   call_proc()/call_func() calls using a
   **routine id**, 
   and Windows call-backs. Only recursive calls cost the same as before. 
   Programs with a reasonably-high frequency of calls can easily be 10% faster 
   overall because of this.

<li>
 **optimization:**
 Branch ##//straightening//## has been
  implemented. The compiler will optimize branches in the internal code
   such that a branch from A->B where location B contains a branch to
   location C, will be optimized to a direct branch from A->C. Even something
   like A->B->C->D can be straightened to A->D. This often occurs in
   while-loops that contain if-statements.

<li>
 **optimization:**
 In many cases, variable initialization checks are
   now replaced by "no-ops" after the first check is performed. Euphoria
   was already optimizing out many checks at compile-time.

<li>
 **optimization:**
 **get()** and
 **value()** are now much faster in most
  cases thanks to Jiri Babor and some further optimizations by RDS.
   The new v2.1 **ex.exe** with the new
   v2.1 **get.e** is:
<blockquote>
          
          1.45x faster reading a sequence of f.p. numbers from a file and<br>
          2.25x faster when reading a sequence of integers from a file.
</blockquote>

<li>
 **optimization:**
 **power(x,2)** is converted internally
  to x*x which is faster in all cases, especially when x is a large
  integer or a f.p. number. 

<li>
 **optimization:** Thanks to Jiri Babor,
 **int_to_bits()** is at least 15% faster
   in most cases.

<li>
 **optimization:**
 Plotting a long sequence of pixels in 16-color graphics modes 
 is about 3% faster.

<li>
 **optimization:**
 **draw_line()** has been sped up by a
  few percent.

<li>
 **Language War** has had a major
 face-lift. It now runs in **pixel-graphics
   mode 18** (640 x 480 x 16 colors) instead of
   **text mode**. It also has 
   ##//fine-grain//## parallelism,
   i.e. virtually anything can happen in parallel 
   with anything else. Multiple torpedos, phasors etc can be drawn on the 
   screen simultaneously, while ships are moving, commands are being entered,
   things are exploding etc. Even the timing needed for the PC speaker sound 
   effects is handled by the **task scheduler**. There are
   **//no//** time-delay "busy" 
   loops executed during the game. The galaxy scan now shows you a scaled 
   picture of the whole galaxy, rather than just a bunch of numbers.

<li>
 The default print format for atoms was changed from "%g" to "%**.**10g".
   This format is used by print(),
   **?**,
   the **trace** facility, and
   **ex.err** dumps. This allows large
   integers -9,999,999,999 to +9,999,999,999
   to be printed as integers, rather than as scientific notation. It also 
   provides about 10 digits of accuracy to be displayed on fractional numbers,
   rather than just 6. Art Adamson and others made it clear that more 
   digits should be displayed.

<li>
 The state of all **with/without** settings
  is saved upon entering an **included file**, and restored at the end
  of the **included file**. An included file can change the settings,
  but they will be restored at the end of the included file. e.g. warnings
   might be turned off just within the included file (and any files it
   includes). As a result some 
   programs now display warnings where none were seen before.

<li>
 Warnings are now displayed
 <_ba>//after//</_ba> your program finishes
 execution, so they won't be erased by
 clear_screen(),
 graphics_mode() etc.
 Some programs now show warnings where none were seen before.

<li>
 The security of scrambled code and bound code has been improved thanks to 
 ideas contributed by Rusty Davis. When a bound program starts executing,
 a quick integrity check will be made to detect any corruption or tampering.
 It's still ok to add data to the end of a
 **bound .exe** file, as long as
 your last line is ##abort(x)##.

<li>
 The **ed** editor now lets you view and
 edit beyond column 80.

<li>
 **ed** has a new command: **Esc m**
 (modifications). It will show the differences between the original file on
 disk and the current edit buffer. This can be very useful when you've
 forgotten what changes you've made, and you are wondering if it's safe to
 save them.

<li>
 The **trace** window now provides an upper
 case **Q** command which lets the program run to completion, ignoring
 any trace(1) commands. Lower case
 **q** lets it run to the next trace(1).

<li>
 **safe.e** (debug version of
 **machine.e**) has been enhanced. It will now 
   automatically catch additional cases where data is illegally written just 
   **//before//**, or just **//after//**, the boundaries of an
   allocated block of memory. This can be particularly useful in
   **WIN32** where Windows might overwrite 
   one of your under-sized blocks. Without a tool such as
   **safe.e**, this type 
   of bug could take hours or even days to track down.

<li>
 The **euphoria\tutorial** directory
 was created to hold several small tutorial programs.

<li>
 The limit on the number of open files was raised to 25 from 15.
   Three of these files are 0,1,2: standard-input, standard-output 
   and standard-error, so you can now have up to 22 of your own files
   open simultaneously. (As far as we know, no one ever exceeded the old 
   limit, but it seemed wise to raise it.)

<li>
 When the user simply types ##ex## or
 ##exw## and is prompted for the 
   name of the Euphoria **.ex** or **.exw** file to run,
   **command_line()** will now 
   be updated to include the filename as the second command-line argument,
   just as if the user had originally typed: ##ex filename##.
   Thanks to Mathew Hounsell for suggesting this.

<li>
 **mset.ex** now saves pictures in **.bmp**
 format. Previously it was using a non-standard, compressed format.

<li>
 **lines.ex**
 (**lines.bat**) now reports
 non-blank/non-comment lines as well. This is
 <_ba>//not//</_ba> the same as the
 "statement count" used by Euphoria for the diagnostic limit, but it's
 usually within +/- 10%, assuming you write one statement per line.

<li>
 Numeric literals greater than 1e308 (roughly) are now set to
 **+/-** ##inf##. They used to cause a compile-time error.

</ul>
<hr>

&nbsp;<br>

== 
Version 2.0 Official Release March 25, 1998:


<li>
 The install procedure has changed. The Euphoria .zip file now contains a 
   large ##bundle.dat## file that contains over 100 files. This
   makes it easier for people to locate the important files:
   **readme.doc**,
   **install.bat**, etc. 
   that they should look at before installing. The .zip file is also 35K
   smaller as a result.

<li>
 **shroud** will warn you to use
 **bind/bindw** if you try to create a
 shrouded source file with a name ending in "**.**exe".

</ul>

&nbsp;<br>

== 
Version 2.0 (beta) February 26, 1998:


<li>
 The WIN32 interpreter, **exw.exe**, is now
 a **true WIN32 GUI** program. In 
 2.0 alpha it was a WIN32 ##//console//## program that was always
 associated with a ##//console//## or DOS-window. A DOS-style
 console window will now be created only if your program needs one.
 **exw** will automatically create 
 a new console window the first time your program writes to the screen, reads 
 from the keyboard, or calls any library routine that requires a console to 
 work. The console will disappear automatically when your program finishes 
 execution. 

<li>
 A new library routine, **free_console()**,
 will immediately delete the console window if you currently have one.

<li>
 The Complete Edition of Euphoria now provides a
 **-scramble** option of
 **bind** and
 **shroud** to improve the security of
 programs that you distribute.

<li>
 You can now pass Euphoria **atoms** to
 C routines as 64-bit C double type floating-point arguments, and you can
 receive a floating-point result back from a C function.

<li>
 **exw.exe (beta)** runs 10 to 15% faster
 than **exw.exe (alpha)** (based on 
 **sieve.ex**,
 **shell.ex**, etc.). The WATCOM C compiler
 was doing a bad job of optimizing a critical section of the interpreter
 when building exw.exe, but was producing excellent code when building
 **ex.exe**.
 With some trivial changes to the interpreter C code, WATCOM now produces
 excellent code for both platforms.

<li>
 The average program now has 60K more memory available before having to 
 use the swap file.

<li>
 The limit on the size of a single procedure, function or type has been 
 eliminated. 

<li>
 The limit on the size of a single top-level statement has been eliminated.

<li>
 The limit on the total number of include files that can make up a program
   has been increased to 256 from 150.

<li>
 Some **optimizations** were added. The
 following general forms of expression are now faster:
<eucode>
           2 * x 
           x * 2 
           1 + x 
</eucode>
     where x can be any expression, and have type atom or sequence.

<li>
 There is a new documentation file,
 **perform.doc** with lots of tips for
 performance-obsessed programmers.

<li>
 If you call a C routine using **c_func()**,
 but you linked the C routine using
 **define_c_proc()** you will get an error
 message. Similarly, if you call it using
 **c_proc()**, but you linked it using
 **define_c_func()** you'll get 
 an error message. This restriction was documented, but not actually 
 enforced in 2.0 alpha. Some programs written for the alpha release will 
 have to be corrected.

<li>
 You will now see the actual name of the C or Euphoria routine that you
 were attempting to call, when you get an error message from
 **call_proc()**,
 **call_func()**,
 **c_proc()**,
 or **c_func()**.

<li>
 A new **-clear_routines** option of
  **bind** and
  **shroud** will leave the names of
  all routines unshrouded. This is necessary if your program calls 
  **routine_id()**. You'll be warned if you
  use routine_id() and do not choose this option. (Registered users can
  use **-scramble** together with
  **-clear_routines** to restore a high level of shrouding.)

<li>
 If a name conflict arises with a global symbol, the
  **shrouder** will now warn you, and then
  choose a new name. It used to abort with a message.

<li>
 It is no longer possible to **trace**
 or **profile** shrouded code.

<li>
 A new demo program, **hash.ex**, was added
  to **euphoria\demo**.

<li>
 **freq.ex** was moved from
 **euphoria\bin** to
 **euphoria\demo** and renamed as
 **tree.ex**.

<li>
 A new documentation file, **bind.doc**
 describes all the features of **bind.bat**
 and **shroud.bat**. The previous description
 in **refman.doc** has been shrunk.

<li>
 The file **overview.doc** gives a quick
 overview of all documentation files.

<li>
 The description of **get_mouse()** in
 **library.doc** discusses the problem of
 320-wide graphics modes (you must divide the x coordinate value by 2).

</ul>

&nbsp;<br>

== 
Version 2.0 (alpha) November 5, 1997:


<li>
 A **//new platform//** is now supported.
 **exw.exe** will run Euphoria programs using
 the **WIN32** (Windows 32-bit) operating
 system. **ex.exe** will run programs
 using **DOS32** (extended DOS).
 See **platform.doc** for further details.

<li>
 The following library routines have been introduced.

 <_sul>**For both DOS32 and WIN32:

 <table border=0 cellspacing=2 cellpadding=2>
 
 <tr><td width=24 nowrap></td>
   <td width=120 nowrap></td>
   <td width=10></td>
   <td></td>
   </tr>
 
 <_4clist
   name="platform()"
   pos=25
   description="find out which platform you are executing on. (The 
   PLATFORM constant is available in Euphoria 2.2 and later)."
 >
 
 <_4clist
   name="routine_id()"
   pos=25
   description="get a small integer id number for a Euphoria procedure or
    function."
 >
 
 <_4clist
   name="call_proc()"
   pos=25
   description="call a Euphoria procedure by using its id."
 >
 
 <_4clist
   name="call_func()"
   pos=25
   description="call a Euphoria function by using its id."
 >
 
 <_4clist
   name="custom_sort()"
   pos=25
   description="sort a sequence using a compare function that you specify."
 >
 
 <_4clist
   name="poke4()"
   pos=25
   description="store a number into 4 bytes of memory.
     poke4(address, value) is at least 10x
     faster than:
     poke(address, int_to_bytes(value)).
     poke4() also works with sequences of values."
 >
 
 <_4clist
   name="peek4s()"
   pos=25
   description="read 4 bytes of memory as a signed integer (works on
     sequences too)."
 >
 
 <_4clist
   name="peek4u()"
   pos=25
   description="read 4 bytes of memory as an unsigned integer (works on
     sequences too). peek4u(address) is 10x
     faster than:
     bytes_to_int(peek({address, 4}))."
 >
 
 <_4clist
   name="allocate_string()"
   pos=25
   description="allocate and store a 0-terminated string in memory."
 >

</table>


 <_sul>**For WIN32 only:

 <table border=0 cellspacing=2 cellpadding=2>
 
 <tr><td width=24 nowrap></td>
   <td width=120 nowrap></td>
   <td width=10></td>
   <td></td>
   </tr>
 
 <_4clist
   name="open_dll()"
   pos=26
   description="open a Windows **.**dll file."
 >
 
 <_4clist
   name="define_c_proc()"
   pos=26
   description="define a C routine that will be called from Euphoria
     (no value returned)."
 >
 
 <_4clist
   name="define_c_func()"
   pos=26
   description="define a C routine that will be called from Euphoria
     (a value will be returned)."
 >
 
 <_4clist
   name="call_c_proc()"
   pos=26
   description="call a C routine from Euphoria (no value is returned)."
 >
 
 <_4clist
   name="call_c_func()"
   pos=26
   description="call a C routine from Euphoria (a value is returned)."
 >
 
 <_4clist
   name="call_back()"
   pos=26
   description="get a **//call-back address//**, so Windows can call
     your Euphoria routine when the user interacts with your window."
 >
 
 <_4clist
   name="message_box()"
   pos=26
   description="display a simple **Yes/No/Cancel** window."
 >

</table>

<li>
 New Demo programs:


<li>
**csort.ex**
<li>
**email.exw**
<li>
**window.exw**
<li>
**winwire.exw**
<li>
**dsearch.exw**
</ul>

<li>
 New include files:

 <table border=0 cellspacing=2 cellpadding=2>
 
 <_4clist
   name="safe.e"
   pos=22
   description="debug version of
    **machine.e**"
 >
 
 <_4clist
   name="misc.e"
   pos=22
   description="miscellaneous"
 >
 
 <_4clist
   name="dll.e"
   pos=22
   description="dll access"
 >
 
 <_4clist
   name="msgbox.e"
   pos=22
   description="Windows message box"
 >

</table>

<li>
 The following additional improvements have been made to the
  **DOS32** version:


<li>
    On Pentium and higher systems, floating-point calculations are now
    about 20% faster (and floating-point in
    **exw** is a further 20%
    faster than **ex** for 2.0).

<li>
    **printf()** to the screen, and
    **print()** to the screen are both 
    significantly faster in most cases.

<li>
    The **trace** screen is updated a bit
    faster.

<li>
    The **time profile** is more accurate
    regarding **getc()**.

<li>
    The **mset.ex** demo runs 30% faster.
</ul>

</ul>

<hr>

&nbsp;

<_center>**
<br>
                      Highlights of Older Releases:<br>
**</_center>

&nbsp;<br>

== 
Version 1.5a June 13, 1997:


<li>
 Many operations and library routines were optimized. 


<li>
   **get_key()** is
   100x faster when there is no key in the buffer.

<li>
   **get_all_palette()** is over 100x faster
   and this makes **save_screen()** much faster.

<li>
   The following routines have now been built directly into
   **ex.exe**, to avoid the overhead of
   calling machine_proc() or
   machine_func():
   **pixel()**, 
   **get_pixel()**,
   **mem_set()**,
   **mem_copy()**.

<li>
   **poke()** of a long sequence into memory,
   other than video memory, is 50% faster.

<li>
   **pixel()** is 4x faster in mode 19.

<li>
   **get_pixel()** is faster in all modes.

<li>
   **display_image()** is about 30% faster in
   most modes and up to 4x faster in mode 19, 
   because <br>pixel() is faster.

<li>
   All arithmetic and bitwise operations applied to sequences of integers are 
   now 29% faster.  

<li>
   a **&** b (concatenation) is 15% faster
   in most cases, and is dramatically faster in the case where you grow a
   very long sequence by concatenating many small sequences onto it. 

<li>
   **getc()** is 12% faster.

<li>
   **match()** is 8% faster in typical cases.

<li>
   **append()/prepend()** are 15% faster in
   many cases.

<li>
   **find()** of an integer within a
   sequence of integers is 64% faster.

<li>
   Formation of a 2-element sequence **{a,b}** is 11% faster.

<li>
   Internal copying of a shared sequence when it can no longer be shared is
   15% faster.
</ul>

</ul>

&nbsp;<br>

== 
Version 1.5 March 21, 1997:


<li>
 The following library routines were added. They are described fully
   in **library.doc**.


<li>
        **allow_break()**
<li>
        **check_break()**
<li>
        **mem_copy()**
<li>
        **mem_set()**
<li>
        **atom_to_float32()**
<li>
        **atom_to_float64()**
<li>
        **float32_to_atom()**
<li>
        **float64_to_atom()**
<li>
        **get_all_palette()**
<li>
        **save_bitmap()**
<li>
        **save_screen()**
<li>
        **arctan()**
<li>
        **and_bits()**
<li>
        **or_bits()**
<li>
        **xor_bits()**
<li>
        **not_bits()**
<li>
	**get_vector()**
<li>
	**set_vector()**
<li>
	**lock_memory()**
<li>
	**tick_rate()**
</ul>

<li>
 **with profile_time** (time profiling for
 DOS32) was added.

</ul>

&nbsp;<br>

== 
Version 1.4b, October 1996:


<li>
 **mset.ex** has a more visible selector
 box on it's grid. It has also been sped up.

<li>
 **ed.ex** now allows special characters
 greater than ASCII 127 to be entered by pressing the **Alt** key and
 typing digits on the numeric keypad.

</ul>

&nbsp;<br>

== 
Version 1.4a, July 1996:


<li>
 **crash_message()** library routine was
 added.

<li>
 Programs **bound** by registered users
 will now produce run-time error diagnostics regardless of the size of the
 program.

<li>
 **shroud.bat** has a new option
 ##-full_keywords##.

</ul>

&nbsp;<br>

== 
Version 1.4, May 1996:


<li>
 You can now convert any Euphoria program into a
 **stand-alone .exe** file.

<li>
 The separate DOS4GW.EXE DOS extender file has been eliminated. 

<li>
 Windows 95 long filename support.

<li>
 Support for DOS software interrupts.

<li>
 New utility programs: **key.ex**,
 **where.ex**,
 **ascii.ex**,
 **guru.ex**.

<li>
 New demo program: **dosint.ex**.

<li>
 New library routines: **set_rand()**,
 **use_vesa()**.

<li>
 You can peek or poke an entire sequence of bytes.

<li>
 Editor enhancements.

<li>
 Reduction in space overhead for sequences.

</ul>

&nbsp;<br>

== 
Version 1.3, June 1995:


<li>
 You can now edit multiple files using multiple edit windows. 

<li>
 20 new library routines were added.

<li>
 Graphics performance was greatly improved.

</ul>

&nbsp;<br>

== 
Version 1.2, March 1994:


<li>
  A problem that prevented Euphoria from running in a DOS prompt under 
  Windows was eliminated.

</ul>

&nbsp;<br>

== 
Version 1.1, January 1994:


<li>
  Several language features and demo programs were added.

</ul>

&nbsp;<br>

== 
Version 1.0, July 1993:


<li>
  Euphoria was first released after 3 years of research and development
  and 6 months of Beta testing. Many of the ideas behind Euphoria came
  from Robert Craig's Master's Thesis in Computer Science at the University
  of Toronto. That thesis was strongly influenced by the work of John Backus
  on functional programming (FP) languages.

</ul>

