<_init_comment>
<html>
<head><title>Euphoria Reference Manual Part II - Section 3.11 - Machine Level Interface</title>
<_css>
</head>
<body>

<font color="#FF0099" size=+1>
<br>

<_dul>3.11 - Machine Level Interface</_dul>

</font>
<p>

<_routine name="allocate">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 a = allocate(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Allocate i contiguous bytes of memory. Return the address of the
 block of memory, or return 0 if the memory can't be allocated.
 The address returned will be at least 4-byte aligned. "
 >
<_2clist
  name="Comments:"
  description=
"When you are finished using the block, you should pass the address of the
block to free(). This will free the block and make the memory available
for other purposes. Euphoria will never free or reuse your block until
you explicitly call free(). When your program terminates, the operating
system will reclaim all memory for use with other programs."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
buffer = allocate(100)
for i = 0 to 99 do
    poke(buffer+i, 0)
end for

</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#free\">free</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#poke\">poke</a>,
<a href=\"lib_mach.htm#mem_set\">mem_set</a>,
<a href=\"lib_mach.htm#call\">call</a>"
 >
</table>


<_routine name="allocate_low">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b> DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 i2 = allocate_low(i1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Allocate i1 contiguous bytes of low memory, i.e. conventional
 memory (address below 1 megabyte). Return the address
 of the block of memory, or return 0 if the memory can't be
 allocated. "
 >
<_2clist
  name="Comments:"
  description=
" Some DOS software interrupts require that you pass one or
 more addresses in registers. These addresses must be
 conventional memory addresses for DOS to be able to read or
 write to them.
 "
 >
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\dos32\dosint.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#dos_interrupt\">dos_interrupt</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#poke\">poke</a>"
 >
</table>


<_routine name="allocate_string">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 a = allocate_string(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Allocate space for string sequence s. Copy s into this space
 along with a 0 terminating character. This is the format
 expected for C strings. The memory address of the string will
 be returned. If there is not enough memory available,
 0 will be returned. "
 >
<_2clist
  name="Comments:"
  description="To free the string, use free()."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
atom title

title = allocate_string("The Wizard of Oz")

</_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\win32\window.exw</b></font>"
 >

 <_2clist
  name="See Also:"
  description="
  <a href=\"lib_mach.htm#allocate\">allocate</a>,
  <a href=\"lib_mach.htm#free\">free</a>"
 >
</table>

<_routine name="atom_to_float32">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 s = atom_to_float32(a1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Convert a Euphoria atom to a sequence of 4 single-byte values.
 These 4 bytes contain the representation of an IEEE
 floating-point number in 32-bit format. "
 >
<_2clist
  name="Comments:"
  description=
" Euphoria atoms can have values which are 64-bit IEEE
 floating-point numbers, so you may lose precision when you convert
 to 32-bits (16 significant digits versus 7). The range of
 exponents is much larger in 64-bit format (10 to the 308, versus
 10 to the 38), so some atoms may be too large or too small to
 represent in 32-bit format. In this case you will get one of the
 special 32-bit values:
 <a href=\"refman_2.htm#inf_nan\">inf or -inf (infinity or -infinity)</a>.
To avoid this, you can use atom_to_float64().
<P>
Integer values will also be converted to 32-bit floating-point
 format.
 "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
fn = open("numbers.dat", "wb")
puts(fn, atom_to_float32(157.82)) -- write 4 bytes to a file

</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#atom_to_float64\">atom_to_float64</a>,
<a href=\"lib_mach.htm#float32_to_atom\">float32_to_atom</a>"
 >
</table>


<_routine name="atom_to_float64">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 s = atom_to_float64(a1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Convert a Euphoria atom to a sequence of 8 single-byte values.
 These 8 bytes contain the representation of an IEEE
 floating-point number in 64-bit format. "
 >
<_2clist
  name="Comments:"
  description=
" All Euphoria atoms have values which can be represented as
 64-bit IEEE floating-point numbers, so you can convert any atom
 to 64-bit format without losing any precision.
<P>
Integer values will also be converted to 64-bit floating-point
 format.
 "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
fn = open("numbers.dat", "wb")
puts(fn, atom_to_float64(157.82)) -- write 8 bytes to a file

</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#atom_to_float32\">atom_to_float32</a>,
<a href=\"lib_mach.htm#float64_to_atom\">float64_to_atom</a>"
 >
</table>

<_routine name="bits_to_int">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 a = bits_to_int(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Convert a sequence of binary 1's and 0's into a positive
 number. The least-significant bit is s[1]. "
 >
<_2clist
  name="Comments:"
  description=
" If you print s the bits will appear in \"reverse\" order, but
 it is convenient to have increasing subscripts access bits of
 increasing significance.
 "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
a = bits_to_int({1,1,1,0,1})
-- a is 23 (binary 10111)

</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#int_to_bits\">int_to_bits</a>,
               <a href=\"refman_2.htm#26\">operations on sequences</a>"
 >
</table>

<_routine name="bytes_to_int">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 a = bytes_to_int(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Convert a 4-element sequence of byte values to an atom.
 The elements of s are in the order expected for a 32-bit
 integer on the 386+, i.e. least-significant byte first."
 >
<_2clist
  name="Comments:"
  description=
"The result could be greater than the integer type allows, so you should
 assign it to an <font color=\"#993333\"><b>atom</b></font>.
<P>
s would normally contain positive values that have been read
 using peek() from 4 consecutive memory locations."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
atom int32

int32 = bytes_to_int({37,1,0,0})
-- int32 is 37 + 256*1 = 293

</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#int_to_bytes\">int_to_bytes</a>,
<a href=\"lib_mach.htm#bits_to_int\">bits_to_int</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#peek4s\">peek4s</a>,
<a href=\"lib_mach.htm#peek4u\">peek4u</a>,
<a href=\"lib_mach.htm#poke\">poke</a>"
 >
</table>

<_routine name="call">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> call(a)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Call a machine language routine that starts at address a. This
 routine must execute a RET instruction #C3 to return control
 to Euphoria. The routine should save and restore any registers
 that it uses."
 >
<_2clist
  name="Comments:"
  description=
"You can allocate a block of memory for the routine and then poke
 in the bytes of machine code. You might allocate other blocks of
 memory for data and parameters that the machine code can operate
 on. The addresses of these blocks could be poked into the
 machine code."
 >
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\callmach.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#free\">free</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#poke\">poke</a>,
<a href=\"lib_mach.htm#poke4\">poke4</a>,
<a href=\"lib_c.htm#c_proc\">c_proc</a>,
<a href=\"lib_c.htm#define_c_proc\">define_c_proc</a>
"
 >
</table>


<_routine name="crash">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include machine.e<BR>
crash(s1, s2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Cause Euphoria to crash with a sprintf type error message as supplied in s1 and s2."
 >
<_2clist
  name="Comments:"
  description=
"This should only be used for exceptional errors as an application cannot recover
from a crash state. General errors, such as item not found, or could not open file
should not cause a crash. Those functions should return general error codes.
<p>
See <a href=\"lib_file.htm#sprintf\">sprintf</a> for formatting codes and examples."
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if start > length(s) then
    crash("third argument to myfunc() is out of bounds (%d)", {start})
end if
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#crash_file\">crash_file</a>,
<a href=\"lib_mach.htm#crash_message\">crash_message</a>,
<a href=\"lib_mach.htm#crash_routine\">crash_routine</a>,
<a href=\"lib_file.htm#sprintf\">sprintf</a>"
 >
</table>




<_routine name="crash_file">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 crash_file(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Specify a file name, s, for holding error diagnostics if
 Euphoria must stop your program due to a compile-time or
 run-time error. "
 >
<_2clist
  name="Comments:"
  description=
"Normally Euphoria prints a diagnostic message such as
 \"syntax error\" or \"divide by zero\" on the screen, as well as
 dumping debugging information into
 <font color=\"#993333\"><b>ex.err</b></font> in the current directory. 
 By calling crash_file()
 you can control the directory and file name where the debugging information
 will be written.
<P>
s may be empty, i.e. \"\". In this case no diagnostics or debugging 
information will be written to either a file or the screen. 
s might also be \"NUL\" or \"/dev/null\", in which case diagnostics will 
be written to the screen, but the ex.err information will be discarded.
 
<P>
You can call crash_file() as many times as you like from
 different parts of your program. The file specified by the
 last call will be the one used."
>

<_2clist
  name="Example:"
  description=""
 >
<_eucode>
crash_file("\\tmp\\mybug")

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_os.htm#abort\">abort</a>,
               <a href=\"lib_mach.htm#crash\">crash</a>,
               <a href=\"lib_mach.htm#crash_message\">crash_message</a>,
               <a href=\"lib_mach.htm#crash_routine\">crash_routine</a>,
               <a href=\"refman_3.htm\">debugging and profiling</a>"
 >
</table>

<_routine name="crash_message">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 crash_message(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Specify a string, s, to be printed on the screen in the event
 that Euphoria must stop your program due to a run-time error. "
 >
<_2clist
  name="Comments:"
  description=
" Normally Euphoria prints a diagnostic message such as
 \"subscript out of bounds\", or \"divide by zero\" on the screen, 
 as well as dumping debugging information into
 <font color=\"#993333\"><b>ex.err</b></font>. Euphoria's error
 messages will not be meaningful for your users unless they
 happen to be Euphoria programmers. By calling crash_message()
 you can control the message that will appear on the screen.
 Debugging information will still be stored in
 <font color=\"#993333\"><b>ex.err</b></font>. You won't
 lose any information by doing this.
<P>
s may contain '\n', new-line characters, so your message can
 span several lines on the screen. Euphoria will switch to the
 top of a clear <font color=\"#CC3366\">text-mode</font> screen
 before printing your message.
<P>
You can call crash_message() as many times as you like from
 different parts of your program. The message specified by the
 last call will be the one displayed."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
crash_message("An unexpected error has occurred!\n" &
              "Please contact john_doe@whoops.com\n" &
              "Do not delete the file \"ex.err\".\n")

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_os.htm#abort\">abort</a>,
               <a href=\"lib_mach.htm#crash\">crash</a>,
               <a href=\"lib_mach.htm#crash_file\">crash_file</a>,
               <a href=\"lib_mach.htm#crash_routine\">crash_routine</a>,
               <a href=\"refman_3.htm\">debugging and profiling</a>"
 >
</table>


<_routine name="crash_routine">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 crash_routine(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Pass the routine id of a function that you want Euphoria to call
   in the event that a run-time error is detected and your program must
   be shut down. Your function should
   take one argument of type object. The object that is passed to your function
   is currently always 0. In future releases of Euphoria, a more meaningful
   value may be passed. You can call crash_routine many times with 
   many different routine id's. When a crash occurs, Euphoria will 
   call your crash routines, the most recently specified first, 
   working back to the first one specified. Normally each routine 
   should return 0. If any routine returns a non-zero value, 
   the chain of calls will terminate immediately."
 >
<_2clist
  name="Comments:"
  description=
" By specifying a crash routine, you give your program a chance to
  handle fatal run-time errors, such as subscript out of bounds,
  in a more graceful way. You might save some critical data to disk.
  You might inform the user about what has happened, and what he can
  do about it. You might also save some key debugging information.
  In fact, when your crash routine is called, ex.err will have already
  been written. Your crash routine could save ex.err somewhere, 
  or even open it and extract information from it, such as the
  error message.
  
  <p>
  crash_routine can be used with the Interpreter or the Translator.
  Translated code does not check for as many run-time errors, and
  does not provide a full ex.err dump, but machine-level exceptions
  are caught, and a crash routine will give you an excellent opportunity
  to save some variable values to disk for debugging.
  
  <p>
  The developer of a library might want to specify a crash routine
  for his library. It could tidy things up by unlocking and closing files,
  releasing resources etc. The developer of the main program could have
  his own crash routine. Both routines would be called by Euphoria,
  unless the first one called (the last one specified) returned non-zero.
  
  <p>
  A crash routine can't resume execution at the point of the crash,
  but there is no limitation on what else it can do. It doesn't have to return.
  It could even reinitialize global variables and effectively restart the 
  program.
  
  <p>
  If another error occurs while a crash routine is running, a new
  error dump will occur, but the file name this time will be ex_crash.err,
  rather than ex.err. At this point no more calls to crash routines will
  be allowed. You will have to look at both ex.err and ex_crash.err to fully 
  understand what took place."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
function crash(object x)
-- in case of fire ...
    
    -- (on Linux) send an e-mail containing ex.err
    system("mail -s \"crash!\" myname@xxx.com < ex.err > /dev/null", 2)
    
    return 0
end function

crash_routine(routine_id("crash"))

</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_os.htm#abort\">abort</a>,
               <a href=\"lib_mach.htm#crash\">crash</a>,
               <a href=\"lib_mach.htm#crash_file\">crash_file</a>,
               <a href=\"lib_mach.htm#crash_message\">crash_message</a>,
               <a href=\"refman_3.htm\">debugging and profiling</a>"
 >
</table>


<_routine name="dos_interrupt">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 s2 = dos_interrupt(i, s1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Call DOS software interrupt number i. s1 is a 10-element
 sequence of 16-bit register values to be used as input to the
 interrupt routine. s2 is a similar 10-element sequence containing
 output register values after the call returns. 
 <font color=\"#5500FF\"><b>machine.e</b></font> has the following
 declaration which shows the order of
 the register values in the input and output sequences."
 >
<_eucode>
    global constant REG_DI = 1,
                    REG_SI = 2,
                    REG_BP = 3,
                    REG_BX = 4,
                    REG_DX = 5,
                    REG_CX = 6,
                    REG_AX = 7,
                    REG_FLAGS = 8,
                    REG_ES = 9,
                    REG_DS = 10
</_eucode>

<_2clist
  name="Comments:"
  description=
" The register values returned in s2 are always positive values
 between 0 and #FFFF (65535).
<P>
The flags value in s1[REG_FLAGS] is ignored on input. On output
 the least significant bit of s2[REG_FLAGS] has the carry flag,
 which usually indicates failure if it is set to 1.
<P>
Certain interrupts require that you supply addresses of blocks of
 memory. These addresses must be conventional, low-memory
 addresses. You can allocate/deallocate low-memory using
 allocate_low() and free_low().
<P>
With DOS software interrupts you can perform a wide variety
 of specialized operations, anything from formatting your
 floppy drive to rebooting your computer. For documentation
 on these interrupts consult a technical manual such as
 Peter Norton's <i>\"PC Programmer's Bible\"</i>, or download Ralf
 Brown's <i>Interrupt List</i> from the Web:
<P>
<a href=\"http://www.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html\">
http://www.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html</a>"
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
sequence registers

registers = repeat(0, 10)  -- no registers need to be set

-- call DOS interrupt 5: Print Screen
registers = dos_interrupt(#5, registers)

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\dos32\dosint.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>"
 >
</table>



<_routine name="float32_to_atom">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 a1 = float32_to_atom(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Convert a sequence of 4 bytes to an atom. These 4 bytes must
 contain an IEEE floating-point number in 32-bit format. "
 >
<_2clist
  name="Comments:"
  description=
" Any 32-bit IEEE floating-point number can be converted to an
 atom.
 "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
f = repeat(0, 4)
fn = open("numbers.dat", "rb") -- read binary
f[1] = getc(fn)
f[2] = getc(fn)
f[3] = getc(fn)
f[4] = getc(fn)
a = float32_to_atom(f)

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#float64_to_atom\">float64_to_atom</a>,
<a href=\"lib_mach.htm#atom_to_float32\">atom_to_float32</a>"
 >
</table>


<_routine name="float64_to_atom">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 a1 = float64_to_atom(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Convert a sequence of 8 bytes to an atom. These 8 bytes must
 contain an IEEE floating-point number in 64-bit format. "
 >
<_2clist
  name="Comments:"
  description=
" Any 64-bit IEEE floating-point number can be converted to an
 atom.
 "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
f = repeat(0, 8)
fn = open("numbers.dat", "rb")  -- read binary
for i = 1 to 8 do
    f[i] = getc(fn)
end for
a = float64_to_atom(f)

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#float32_to_atom\">float32_to_atom</a>,
<a href=\"lib_mach.htm#atom_to_float64\">atom_to_float64</a>"
 >
</table>

<_routine name="free">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include machine.e<BR>
free(a)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Free up a previously allocated block of memory by specifying the
address of the start of the block, i.e. the address that was returned
by allocate()."
>
<_2clist
  name="Comments:"
  description=
"Use free() to recycle blocks of memory during execution. This will
reduce the chance of running out of memory or getting into excessive
virtual memory swapping to disk. Do not reference a block of memory
that has been freed. When your program terminates, all allocated memory
will be returned to the system.
<P>
Do not use free() to deallocate memory that was allocated using
allocate_low(). Use free_low() for this purpose."
>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\dos32\dosint.ex</b></font>"
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>"
 >
</table>

<_routine name="free_low">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 free_low(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Free up a previously allocated block of conventional memory by
 specifying the address of the start of the block, i.e. the
 address that was returned by allocate_low(). "
 >
<_2clist
  name="Comments:"
  description=
" Use free_low() to recycle blocks of conventional memory during
 execution. This will reduce the chance of running out of
 conventional memory. Do not reference a block of memory that has
 been freed. When your program terminates, all allocated memory
 will be returned to the system.
<P>
Do not use free_low() to deallocate memory that was allocated using
 <a href=\"lib_mach.htm#allocate\">allocate()</a>. Use free() for this purpose."
 >
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\dos32\dosint.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#dos_interrupt\">dos_interrupt</a>,
<a href=\"lib_mach.htm#free\">free</a>"
 >
</table>


<_routine name="get_vector">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 s = get_vector(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the current protected mode far address of the handler
 for interrupt number i. s will be a 2-element sequence:
 <b>{16-bit segment, 32-bit offset}</b>."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
s = get_vector(#1C)
-- s will be set to the far address of the clock tick
-- interrupt handler, for example: {59, 808}

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\dos32\hardint.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#set_vector\">set_vector</a>,
<a href=\"lib_mach.htm#lock_memory\">lock_memory</a>"
 >
</table>



<_routine name="lock_memory">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 lock_memory(a, i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Prevent the block of virtual memory starting at address a,
 of length i, from ever being swapped out to disk."
 >
<_2clist
  name="Comments:"
  description=
"<p>
 lock_memory() should only be used in the highly-specialized situation
 where you have set up your own DOS hardware interrupt handler using
 machine code. When a hardware interrupt occurs, it is not possible 
 for the operating system to retrieve any code or data that has 
 been swapped out, so you need to protect any blocks of machine code or data
 that will be needed in servicing the interrupt."
 >
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\dos32\hardint.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#get_vector\">get_vector</a>,
<a href=\"lib_mach.htm#set_vector\">set_vector</a>"
 >
</table>

<_routine name="machine_func">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> x1 = machine_func(a, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"see <a href=\"lib_mach.htm#machine_proc\">machine_proc()</a> below"
 >
</table>


<_routine name="machine_proc">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> machine_proc(a, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Perform a machine-specific operation such as graphics and sound
 effects. This routine should normally be called indirectly via
 one of the library routines in a Euphoria include file. A direct
 call might cause a machine exception if done incorrectly. "
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#machine_func\">machine_func</a>"
 >
</table>


<_routine name="mem_copy">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> mem_copy(a1, a2, i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Copy a block of i bytes of memory from address a2 to address a1. "
 >
<_2clist
  name="Comments:"
  description=
" The bytes of memory will be copied correctly even if the block
 of memory at a2 overlaps with the block of memory at a1.
<P>
mem_copy(a1, a2, i) is equivalent to: <b>poke(a1, peek({a2, i}))</b>
 but is much faster."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
dest = allocate(50)
src = allocate(100)
poke(src, {1,2,3,4,5,6,7,8,9})
mem_copy(dest, src, 9)

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#mem_set\">mem_set</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#poke\">poke</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>"
 >
</table>


<_routine name="mem_set">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> mem_set(a1, i1, i2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Set i2 bytes of memory, starting at address a1, to the value of i1."
 >
<_2clist
  name="Comments:"
  description=
"The low order 8 bits of i1 are actually stored in each byte.
<P>
mem_set(a1, i1, i2) is equivalent to: <b>poke(a1, repeat(i1, i2))</b>
 but is much faster."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
destination = allocate(1000)
mem_set(destination, ' ', 1000)
-- 1000 consecutive bytes in memory will be set to 32 
-- (the ASCII code for ' ')

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#mem_copy\">mem_copy</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#poke\">poke</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>"
 >
</table>

<_routine name="peek">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = peek(a)<BR>
 or ...<BR>
  s = peek({a, i})
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return a single byte value in the range 0 to 255 from machine
 address a, or return a sequence containing i consecutive byte
 values starting at address a in memory."
 >
<_2clist
  name="Comments:"
  description=
"Since addresses are 32-bit numbers, they can be larger than the largest
 value of type integer (31-bits). Variables that hold an address should
 therefore be declared as <font color=\"#993333\"><b>atoms</b></font>.
<P>
It is faster to read several bytes at once using the second
 form of peek() than it is to read one byte at a time in a loop.
<P>
Remember that peek takes just one argument, which in the
 second form is actually a 2-element sequence."
 >
<_2clist
  name="Example:"
  description=" The following are equivalent:"
 >
<_eucode>

-- method 1
s = {peek(100), peek(101), peek(102), peek(103)}

-- method 2
s = peek({100, 4})

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#poke\">poke</a>,
<a href=\"lib_mach.htm#peeks\">peeks</a>,
<a href=\"lib_mach.htm#peek2s\">peek2s</a>,
<a href=\"lib_mach.htm#peek2u\">peek2u</a>,
<a href=\"lib_mach.htm#peek4s\">peek4s</a>,
<a href=\"lib_mach.htm#peek4u\">peek4u</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#free\">free</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>,
<a href=\"lib_mach.htm#call\">call</a>"
 >
</table>

<_routine name="peeks">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = peeks(a)<BR>
 or ...<BR>
  s = peeks({a, i})
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return a single signed byte value in the range -128 to 127 from machine
 address a, or return a sequence containing i consecutive signed byte
 values starting at address a in memory."
 >
<_2clist
  name="Comments:"
  description=
"Since addresses are 32-bit numbers, they can be larger than the largest
 value of type integer (31-bits). Variables that hold an address should
 therefore be declared as <font color=\"#993333\"><b>atoms</b></font>.
<P>
It is faster to read several bytes at once using the second
 form of peeks() than it is to read one byte at a time in a loop.
<P>
Remember that peek takes just one argument, which in the
 second form is actually a 2-element sequence."
 >
<_2clist
  name="Example:"
  description=" The following are equivalent:"
 >
<_eucode>

-- method 1
s = {peeks(100), peeks(101), peeks(102), peeks(103)}

-- method 2
s = peeks({100, 4})

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#poke\">poke</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#peek2s\">peek2s</a>,
<a href=\"lib_mach.htm#peek2u\">peek2u</a>,
<a href=\"lib_mach.htm#peek4s\">peek4s</a>,
<a href=\"lib_mach.htm#peek4u\">peek4u</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#free\">free</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>,
<a href=\"lib_mach.htm#call\">call</a>"
 >
</table>

<_routine name="peek2s">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = peek2s(a)<BR>
 or ...<BR>
  s = peek2s({a, i})
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return a signed two-byte value in the range -32768 to 32767 from machine
 address a, or return a sequence containing i consecutive byte
 values starting at address a in memory."
 >
<_2clist
  name="Comments:"
  description=
"Since addresses are 32-bit numbers, they can be larger than the largest
 value of type integer (31-bits). Variables that hold an address should
 therefore be declared as <font color=\"#993333\"><b>atoms</b></font>.
<P>
It is faster to read several bytes at once using the second
 form of peek2s() than it is to read one byte at a time in a loop.
<P>
Remember that peek takes just one argument, which in the
 second form is actually a 2-element sequence."
 >
<_2clist
  name="Example:"
  description=" The following are equivalent:"
 >
<_eucode>

-- method 1
s = {peek2s(100), peek2s(102), peek2s(104), peek2s(106)}

-- method 2
s = peek2s({100, 4})

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#poke2\">poke</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#peeks\">peeks</a>,
<a href=\"lib_mach.htm#peek2u\">peek2u</a>,
<a href=\"lib_mach.htm#peek4s\">peek4s</a>,
<a href=\"lib_mach.htm#peek4u\">peek4u</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#free\">free</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>,
<a href=\"lib_mach.htm#call\">call</a>"
 >
</table>

<_routine name="peek2u">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = peek2u(a)<BR>
 or ...<BR>
  s = peek2u({a, i})
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return a two-byte value in the range 0 to 65535 from machine
 address a, or return a sequence containing i consecutive byte
 values starting at address a in memory."
 >
<_2clist
  name="Comments:"
  description=
"Since addresses are 32-bit numbers, they can be larger than the largest
 value of type integer (31-bits). Variables that hold an address should
 therefore be declared as <font color=\"#993333\"><b>atoms</b></font>.
<P>
It is faster to read several bytes at once using the second
 form of peek2u() than it is to read one byte at a time in a loop.
<P>
Remember that peek takes just one argument, which in the
 second form is actually a 2-element sequence."
 >
<_2clist
  name="Example:"
  description=" The following are equivalent:"
 >
<_eucode>

-- method 1
s = {peek2u(100), peek2u(102), peek2u(104), peek2u(106)}

-- method 2
s = peek2u({100, 4})

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#poke2\">poke</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#peeks\">peeks</a>,
<a href=\"lib_mach.htm#peek2s\">peek2s</a>,
<a href=\"lib_mach.htm#peek4s\">peek4s</a>,
<a href=\"lib_mach.htm#peek4u\">peek4u</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#free\">free</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>,
<a href=\"lib_mach.htm#call\">call</a>"
 >
</table>

<_routine name="peek4s">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> a2 = peek4s(a1)<BR>
 or ...<BR>
  s = peek4s({a1, i})
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return a 4-byte (32-bit) signed value in the range -2147483648 to
 +2147483647 from machine address a1, or return a sequence
 containing i consecutive 4-byte signed values starting at
 address a1 in memory."
 >
<_2clist
  name="Comments:"
  description=
"The 32-bit values returned by peek4s() may be too large for the Euphoria
 integer type (31-bits), so you should use
 <font color=\"#993333\"><b>atom</b></font> variables.
<P>
Since machine addresses are 32-bit numbers, they can also be too large for
 Euphoria's integer type. Variables that hold an address should therefore
 be declared as <font color=\"#993333\"><b>atoms</b></font>.
<P>
It is faster to read several 4-byte values at once using the
 second form of peek4s() than it is to read one 4-byte value at
 a time in a loop.
<P>
Remember that peek4s() takes just one argument, which in the
 second form is actually a 2-element sequence."
 >
<_2clist
  name="Example:"
  description=" The following are equivalent:"
 >
<_eucode>

-- method 1
s = {peek4s(100), peek4s(104), peek4s(108), peek4s(112)}

-- method 2
s = peek4s({100, 4})

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#peek4u\">peek4u</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#peeks\">peeks</a>,
<a href=\"lib_mach.htm#peek2s\">peek2s</a>,
<a href=\"lib_mach.htm#peek2s\">peek2u</a>,
<a href=\"lib_mach.htm#poke4\">poke4</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#free\">free</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>,
<a href=\"lib_mach.htm#call\">call</a>"
 >
</table>


<_routine name="peek4u">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> a2 = peek4u(a1)<BR>
 or ...<BR>
  s = peek4u({a1, i})
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return a 4-byte (32-bit) unsigned value in the range 0 to
 4294967295 from machine address a1, or return a sequence
 containing i consecutive 4-byte unsigned values starting at
 address a1 in memory."
 >
<_2clist
  name="Comments:"
  description=
"The 32-bit values returned by peek4u() may be too large for the Euphoria
 integer type (31-bits), so you should use
 <font color=\"#993333\"><b>atom</b></font> variables.
<P>
Since machine addresses are 32-bit numbers, they can also be too large for
 Euphoria's integer type. Variables that hold an address should therefore
 be declared as <font color=\"#993333\"><b>atoms</b></font>.
<P>
It is faster to read several 4-byte values at once using the
 second form of peek4u() than it is to read one 4-byte value at
 a time in a loop.
<P>
Remember that peek4u() takes just one argument, which in the
 second form is actually a 2-element sequence."
 >
<_2clist
  name="Example:"
  description=" The following are equivalent:"
 >
<_eucode>

-- method 1
s = {peek4u(100), peek4u(104), peek4u(108), peek4u(112)}

-- method 2
s = peek4u({100, 4})

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#peek4s\">peek4s</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#poke4\">poke4</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#free\">free</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>,
<a href=\"lib_mach.htm#call\">call</a>"
 >
</table>

<_routine name="peek_string">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> s = peek_string(a)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return a sequence of text from a null terminated string starting at
 machine address a."
 >
<_2clist
  name="Comments:"
  description=""
 >
<_2clist
  name="Example:"
  description=" The following reads the null-terminated string starting at 100 
  into the sequence s:"
 >
<_eucode>

s = peek_string(100)

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#poke\">poke</a>,
<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#free\">free</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>"
 >
</table>

<_routine name="poke">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> poke(a, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"If x is an atom, write a single byte value to memory address a.<P>
If x is a sequence, write a sequence of byte values to
 consecutive memory locations starting at location a."
 >
<_2clist
  name="Comments:"
  description=
"The lower 8-bits of each byte value, i.e. <b>remainder(x, 256)</b>,
 is actually stored in memory.
<P>
It is faster to write several bytes at once by poking a sequence
 of values, than it is to write one byte at a time in a loop.
<P>
Writing to the screen memory with poke() can be much faster than using
 <a href=\"lib_file.htm#puts\">puts()</a> or
 <a href=\"lib_file.htm#printf\">printf()</a>, but the programming is more
 difficult. In most cases the speed is not needed. For example, the Euphoria
 editor, <font color=\"#993333\"><b>ed</b></font>, never uses poke()."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
a = allocate(100)   -- allocate 100 bytes in memory

-- poke one byte at a time:
poke(a, 97)
poke(a+1, 98)
poke(a+2, 99)

-- poke 3 bytes at once:
poke(a, {97, 98, 99})

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\callmach.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#peek\">peek</a>,
<a href=\"lib_mach.htm#poke4\">poke4</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#free\">free</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>,
<a href=\"lib_mach.htm#call\">call</a>,
<a class=\"blue\" href=\"library.htm#safe\"><b>safe.e</b></a>"
 >
</table>

<_routine name="poke2">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> poke2(a, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"If x is an atom, write a word (two-byte) value to memory address a.<P>
If x is a sequence, write a sequence of word values to
 consecutive memory locations starting at location a."
 >
<_2clist
  name="Comments:"
  description=
"The lower 16-bits of each byte value, i.e. <b>remainder(x, 65535)</b>,
 is actually stored in memory.
<P>
It is faster to write several words at once by poking a sequence
 of values, than it is to write one word at a time in a loop."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
a = allocate(100)   -- allocate 100 bytes in memory

-- poke one word at a time:
poke(a, 10097)
poke(a+2, 10098)
poke(a+4, 10099)

-- poke 3 words at once:
poke(a, {10097, 10098, 10099})

 </_eucode>

 <_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#peek2u\">peek2u</a>,
<a href=\"lib_mach.htm#peek2u\">peek2s</a>,
<a href=\"lib_mach.htm#poke\">poke</a>,
<a href=\"lib_mach.htm#poke4\">poke4</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#free\">free</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#free_low\">free_low</a>,
<a href=\"lib_mach.htm#call\">call</a>,
<a class=\"blue\" href=\"library.htm#safe\"><b>safe.e</b></a>"
 >
</table>

<_routine name="poke4">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> poke4(a, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"If x is an atom, write a 4-byte (32-bit) value to memory
 address a.<P>
If x is a sequence, write a sequence of 4-byte values to
 consecutive memory locations starting at location a."
 >
<_2clist
  name="Comments:"
  description=
"The value or values to be stored must not exceed 32-bits in size.
<P>
It is faster to write several 4-byte values at once by poking
 a sequence of values, than it is to write one 4-byte value at a
 time in a loop.
<P>
The 4-byte values to be stored can be negative or positive.
 You can read them back with either peek4s() or peek4u()."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
a = allocate(100)   -- allocate 100 bytes in memory

-- poke one 4-byte value at a time:
poke4(a, 9712345)
poke4(a+4, #FF00FF00)
poke4(a+8, -12345)

-- poke 3 4-byte values at once:
poke4(a, {9712345, #FF00FF00, -12345})

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#peek4u\">peek4u</a>,
<a href=\"lib_mach.htm#peek4s\">peek4s</a>,
<a href=\"lib_mach.htm#poke\">poke</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>,
<a href=\"lib_mach.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_mach.htm#call\">call</a>"
 >
</table>

<_routine name="register_block">
<table border=0 cellspacing=2 cellpadding=2>

<_2clist
 name="Syntax:"
 description="<font face=\"Arial, Helvetica\"> include machine.e (or safe.e)<BR>
 register_block(a, i)</font>"
>
<_2clist
 name="Description:"
 description="Add a block of memory to the list of safe blocks maintained
 by <font color=\"#5500FF\"><b>safe.e</b></font> (the debug version of
 <font color=\"#5500FF\"><b>machine.e</b></font>). The block starts at
 address a. The length of the block is i bytes."
>
<_2clist
 name="Comments:"
 description="This routine is only meant to be used for <b>debugging
 purposes</b>. <font color=\"#5500FF\"><b>safe.e</b></font> tracks the
 blocks of memory that your program is allowed to
 <a href=\"lib_mach.htm#peek\">peek()</a>,
 <a href=\"lib_mach.htm#poke\">poke()</a>,
 <a href=\"lib_mach.htm#mem_copy\">mem_copy()</a> etc. These are normally
 just the blocks that you have allocated using Euphoria's
 <a href=\"lib_mach.htm#allocate\">allocate()</a> or
 <a href=\"lib_mach.htm#allocate_low\">allocate_low()</a> routines, and which 
 you have not yet freed using Euphoria's
 <a href=\"lib_mach.htm#free\">free()</a> or
 <a href=\"lib_mach.htm#free_low\">free_low()</a>. In some cases, you may
 acquire additional, external, blocks of memory, perhaps as a result
 of calling a C routine. If you are debugging your program using
 <font color=\"#5500FF\"><b>safe.e</b></font>, you must register
 these external blocks of memory or
 <font color=\"#5500FF\"><b>safe.e</b></font> will prevent you from
 accessing them. When you are finished using an external block you can
 unregister it using unregister_block().
 <p>
 When you include <font color=\"#5500FF\"><b>machine.e</b></font>, you'll
 get different versions of register_block() and unregister_block()
 that do nothing. This makes it easy to switch back and forth between
 debug and non-debug runs of your program."
>
<_2clist
  name="Example 1:"
  description=""
>
<_eucode>
atom addr

addr = c_func(x, {})
register_block(addr, 5)
poke(addr, "ABCDE")
unregister_block(addr)
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#unregister_block\">unregister_block</a>,
 <a class=\"blue\" href=\"library.htm#safe\"><b>safe.e</b></a>"
 >
</table>


<_routine name="set_vector">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 set_vector(i, s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Set s as the new address for handling interrupt number i.
 s must be a protected mode <b>far address</b> in the form:
 {16-bit segment, 32-bit offset}. "
 >
<_2clist
  name="Comments:"
  description=
"Before calling set_vector() you must store a machine-code
 interrupt handling routine at location s in memory.
<P>
The 16-bit segment can be the code segment used by Euphoria.
 To get the value of this segment see
 <font color=\"#5500FF\"><b>demo\dos32\hardint.ex</b></font>.
 The offset can be the 32-bit value returned by allocate().
 Euphoria runs in <b>protected mode</b> with the code segment
 and data segment pointing to the same physical memory,
 but with different access modes.
<P>
Interrupts occurring in either <b>real mode</b> or <b>protected mode</b>
 will be passed to your handler. Your interrupt handler
 should immediately load the correct data segment before it
 tries to reference memory.
<P>
Your handler might return from the interrupt using the
 iretd instruction, or jump to the original interrupt handler.
 It should save and restore any registers that it modifies.
<P>
You should lock the memory used by your handler to ensure
 that it will never be swapped out. See lock_memory().
<P>
It is highly recommended that you study
 <font color=\"#5500FF\"><b>demo\dos32\hardint.ex</b></font>
 before trying to set up your own interrupt handler.
<P>
You should have a good knowledge of machine-level programming
 before attempting to write your own handler.
<P>
You can call set_vector() with the far address returned by
 get_vector(), when you want to restore the original handler."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
set_vector(#1C, {code_segment, my_handler_address})

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\dos32\hardint.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#get_vector\">get_vector</a>,
<a href=\"lib_mach.htm#lock_memory\">lock_memory</a>,
<a href=\"lib_mach.htm#allocate\">allocate</a>"
 >
</table>

<_routine name="unregister_block">
<table border=0 cellspacing=2 cellpadding=2>

<_2clist
 name="Syntax:"
 description="<font face=\"Arial, Helvetica\"> include machine.e (or safe.e)<BR>
 unregister_block(a)</font>"
>
<_2clist
 name="Description:"
 description="Remove a block of memory from the list of safe blocks maintained
 by <font color=\"#5500FF\"><b>safe.e</b></font> (the debug version of
 <font color=\"#5500FF\"><b>machine.e</b></font>). The block starts at
 address a."
>
<_2clist
  name="Comments:"
  description="This routine is only meant to be used for <b>debugging
  purposes</b>. Use it to unregister blocks of memory that you have
  previously registered using register_block(). By unregistering a block,
  you remove it from the list of safe blocks maintained by
  <font color=\"#5500FF\"><b>safe.e</b></font>. This prevents your program
  from performing any further reads or writes of memory within the block."
>  
<_2clist
 name=""
 description="See register_block() for further comments and an example."
>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mach.htm#register_block\">register_block</a>,
 <a class=\"blue\" href=\"library.htm#safe\"><b>safe.e</b></a>"
>
</table>

</body>
</html>

