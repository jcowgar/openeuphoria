<_init_comment>
<html>
<head><title>Euphoria Reference Manual Part II - Section 3.7 - Mouse Support</title>
<_css>
</head>
<body>

<font color="#FF0099" size=+1>
<br>

<_dul>3.7 - Mouse Support (DOS32 and Linux)</_dul>

</font>
<p>

<_routine name="get_mouse">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32, Linux</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include mouse.e<BR>
 x1 = get_mouse()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the last mouse event in the form: <b>{event, x, y}</b> or
 return -1 if there has not been a mouse event since the last
 time get_mouse() was called.
<P>
Constants have been defined in
 <font color=\"#5500FF\"><b>mouse.e</b></font> for the possible mouse
 events:"
 >
<eucode>
    global constant MOVE = 1,
               LEFT_DOWN = 2,
                 LEFT_UP = 4,
              RIGHT_DOWN = 8,
                RIGHT_UP = 16,
             MIDDLE_DOWN = 32,
               MIDDLE_UP = 64
</eucode>

 <_2clist
  name=""
  description=
"x and y are the coordinates of the mouse pointer at the time that
 the event occurred. get_mouse() returns immediately with either
 a -1 or a mouse event. It does not wait for an event to occur.
 You must check it frequently enough to avoid missing an event.
 When the next event occurs, the current event will be lost, if
 you haven't read it. In practice it is not hard to catch almost
 all events. Losing a MOVE event is generally not too serious,
 as the next MOVE will tell you where the mouse pointer is.
<P>
Sometimes multiple events will be reported. For example, if the
 mouse is moving when the left button is clicked, get_mouse()
 will report an event value of LEFT_DOWN+MOVE, i.e. 2+1 or 3.
 For this reason you should test for a particular event using
 and_bits(). See examples below.
 "
 >
<_2clist
  name="Comments:"
  description=
"In <font color=\"#CC3366\">pixel-graphics modes</font> that are 320 pixels
 wide, you need to divide the x value by 2 to get the correct position on
 the screen. (A strange feature of DOS.)
<P>
In DOS32 <font color=\"#CC3366\">text modes</font> you need to scale the x and y
 coordinates to get line and column positions. In Linux, 
 no scaling is
 required - x and y correspond to the line and column on the screen, 
 with (1,1) at the top left. 
<P>
In DOS32, you need a DOS mouse driver to use this routine. In Linux, 
GPM Server must be running.
<p>
In Linux, mouse movement events are not reported in an xterm window, 
only in the text console. 
<P>
In Linux, LEFT_UP, RIGHT_UP and MIDDLE_UP are not distinguishable 
from one another.
<P>
You can use get_mouse() in <font color=\"#CC3366\">most text and
 pixel-graphics modes</font>.
<P>
The first call that you make to get_mouse() will turn on a
 mouse pointer, or a highlighted character.
<P>
DOS generally does not support the use of a mouse in SVGA
 graphics modes (beyond 640x480 pixels). This restriction
 has been removed in Windows 95 (DOS 7.0). <b>Graeme Burke</b>,
 <b>Peter Blue</b> and others have contributed <b>mouse routines</b> that
 get around the problems with using a mouse in SVGA. See the
 Euphoria <a href=\"http://www.RapidEuphoria.com/exestuff.htm\">Archive
 Web page</a>.
<P>
The x,y coordinate returned could be that of the very tip of the
 mouse pointer or might refer to the pixel pointed-to by
 the mouse pointer. Test this if you are trying to read the
 pixel color using <a href=\"lib_grap.htm#get_pixel\">get_pixel()</a>. You
 may have to read x-1,y-1 instead."
 >
<_2clist
  name="Example 1:"
  description=" a return value of:"
 >

<eucode>
{2, 100, 50}
</eucode>

<_2clist
  name=""
  description="would indicate that the left button was pressed down when the
 mouse pointer was at location x=100, y=50 on the screen."
 >

<_2clist
  name="Example 2:"
  description=" To test for LEFT_DOWN, write something like the following:"
 >

<eucode>
object event

while 1 do
    event = get_mouse()
    if sequence(event) then
        if and_bits(event[1], LEFT_DOWN) then
            -- left button was pressed
            exit
        end if
    end if
end while

 </eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mous.htm#mouse_events\">mouse_events</a>,
<a href=\"lib_mous.htm#mouse_pointer\">mouse_pointer</a>,
<a href=\"lib_bitw.htm#and_bits\">and_bits</a>"
 >
</table>

<_routine name="mouse_events">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32, Linux</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include mouse.e<BR>
 mouse_events(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Use this procedure to select the mouse events that you want
 get_mouse() to report. By default, get_mouse() will report all
 events. mouse_events() can be called at various stages of the
 execution of your program, as the need to detect events changes.
 Under Linux, mouse_events() currently has no effect."
 >
<_2clist
  name="Comments:"
  description=
"It is good practice to ignore events that you are not interested
 in, particularly the very frequent MOVE event, in order to reduce
 the chance that you will miss a significant event.
<P>
The first call that you make to mouse_events() will turn on a
 mouse pointer, or a highlighted character."
 >
<_2clist
  name="Example:"
  description=""
 >
<eucode>
mouse_events(LEFT_DOWN + LEFT_UP + RIGHT_DOWN)
-- will restrict get_mouse() to reporting the left button
-- being pressed down or released, and the right button
-- being pressed down. All other events will be ignored.

 </eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_mous.htm#get_mouse\">get_mouse</a>,
<a href=\"lib_mous.htm#mouse_pointer\">mouse_pointer</a>"
 >
</table>


<_routine name="mouse_pointer">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32, Linux</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include mouse.e<BR>
 mouse_pointer(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"If i is 0 hide the mouse pointer, otherwise turn on the mouse
 pointer. Multiple calls to hide the pointer will require
 multiple calls to turn it back on. The first call to either
 get_mouse() or mouse_events(), will also turn the pointer
 on (once). Under Linux, mouse_pointer() currently has no effect" 
 >
<_2clist
  name="Comments:"
  description=
"It may be necessary to hide the mouse pointer temporarily when
 you update the screen.
<P>
After a call to <a href=\"lib_grap.htm#text_rows\">text_rows()</a> you may
 have to call mouse_pointer(1) to see the mouse pointer again."
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_mous.htm#get_mouse\">get_mouse</a>,
<a href=\"lib_mous.htm#mouse_events\">mouse_events</a>"
 >
</table>

</body>
</html>

