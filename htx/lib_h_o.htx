<_init_comment>
<html>
<head><title>Euphoria Reference Manual Part II - Section 3</title>
<_css>
</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">
<br>


<_routine name="instance">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>WIN32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include misc.e<BR>
 i = instance()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return a handle to the current program."
 >
<_2clist
  name="Comments:"
  description=
"This handle value can be passed to various Windows routines
 to get information about the current program that is running,
 i.e. your program. Each time a user starts up your program,
 a different instance will be created.
<p>
In C, this is the first parameter to WinMain().
<P>
On <font color=\"#CC3366\"><b>DOS32 and Linux/FreeBSD</b></font>, instance() always returns 0."
 >
<_2clist
  name="See Also:"
  description="
 <a class=\"blue\" href=\"platform.htm#win32plat\"><b>platform.doc</b>
 </a>"
 >
</table>


<_routine name="int_to_bits">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 s = int_to_bits(a, i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the low-order i bits of a, as a sequence of 1's and 0's.
 The least significant bits come first. For negative numbers
 the two's complement bit pattern is returned."
 >
<_2clist
  name="Comments:"
  description=
"You can use <a href=\"refman_2.htm#21\">subscripting</a>,
 <a href=\"refman_2.htm#22\">slicing</a>,
 <a href=\"refman_2.htm#24\">and/or/xor/not</a> of entire
 sequences etc. to manipulate sequences of bits. Shifting
 of bits and rotating of bits are easy to perform."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
s = int_to_bits(177, 8)
-- s is {1,0,0,0,1,1,0,1} -- "reverse" order

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_a_b.htm#bits_to_int\">bits_to_int</a>,
<a href=\"lib_a_b.htm#and_bits\">and_bits</a>,
<a href=\"lib_h_o.htm#or_bits\">or_bits</a>,
<a href=\"lib_u_z.htm#xor_bits\">xor_bits</a>,
<a href=\"lib_h_o.htm#not_bits\">not_bits</a>,
<a href=\"refman_2.htm#26\">operations on sequences</a>"
 >
</table>


<_routine name="int_to_bytes">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 s = int_to_bytes(a)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Convert an integer into a sequence of 4 bytes. These bytes are in
 the order expected on the 386+, i.e. least-significant byte
 first. "
 >
<_2clist
  name="Comments:"
  description=
" You might use this routine prior to poking the 4 bytes into
 memory for use by a machine language program.
<P>
The integer can be negative. Negative byte-values will be
 returned, but after poking them into memory you will have
 the correct (two's complement) representation for the 386+.
<P>
This function will correctly convert integer values up to 32-bits. For
 larger values, only the low-order 32-bits are converted. Euphoria's
 integer type only allows values up to 31-bits, so declare your variables as
 <font color=\"#993333\"><b>atom</b></font> if you need a larger range."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
s = int_to_bytes(999)
-- s is {231, 3, 0, 0}

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
s = int_to_bytes(-999)
-- s is {-231, -4, -1, -1}

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_a_b.htm#bytes_to_int\">bytes_to_int</a>,
<a href=\"lib_h_o.htm#int_to_bits\">int_to_bits</a>,
<a href=\"lib_a_b.htm#bits_to_int\">bits_to_int</a>,
<a href=\"lib_p_r.htm#peek\">peek</a>,
<a href=\"lib_p_r.htm#poke\">poke</a>,
<a href=\"lib_p_r.htm#poke4\">poke4</a>"
 >
</table>


<_routine name="integer">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = integer(x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Return 1 if x is an integer in the range -1073741824 to
 +1073741823. Otherwise return 0. "
 >
<_2clist
  name="Comments:"
  description=
" This serves to define the integer type. You can also call it
 like an ordinary function to determine if an object is an
 integer.
 "
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
integer z
z = -1

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
if integer(y/x) then
    puts(SCREEN, "y is an exact multiple of x")
end if

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_a_b.htm#atom\">atom</a>,
<a href=\"lib_s_t.htm#sequence\">sequence</a>,
<a href=\"lib_e_g.htm#floor\">floor</a>"
 >
</table>

<_routine name="left">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include sequence.e<BR>
s2 = left(s1, i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the first i items of s1. If i is greater than the length of s1, then the entire
s1 will be returned."
 >
<_2clist
  name="Comments:"
  description=
"A new sequence is created.

s1 can be any type of sequence, including nested sequences."
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
s2 = left("John Doe", 4)
-- s2 is John

s2 = left("John Doe", 50)
-- s2 is John Doe

s2 = left({1, 5.4, "John", 30}, 3)
-- s2 is {1, 5.4, "John"}
 </_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#right\">right</a>,
<a href=\"lib_h_o.htm#mid\">mid</a>,
<a href=\"lib_s_t.htm#slice\">slice</a>"
 >
</table>





<_routine name="length">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = length(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Return the length of s. s must be a sequence. An error will
 occur if s is an atom. "
 >
<_2clist
  name="Comments:"
  description=
" The length of each sequence is stored internally by the
 interpreter for quick access. (In other languages this
 operation requires a search through memory for an end marker.)
 "
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
length({{1,2}, {3,4}, {5,6}})   -- 3

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
length("")    -- 0

 </_eucode>
<_2clist
  name="Example 3:"
  description=""
 >
<_eucode>
length({})    -- 0

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_s_t.htm#sequence\">sequence</a>"
 >
</table>


<_routine name="lock_file">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 i1 = lock_file(fn, i2, s)
</font>"
 >
 <_2clist
  name="Description:"
  description="When multiple processes can simultaneously access a
file, some kind of locking mechanism may be needed to avoid mangling
the contents of the file, or causing erroneous data to be read from the file.
<P>lock_file() attempts to place a lock on an open file, fn, to stop 
other processes from using the file while your program is reading it 
or writing it. Under Linux/FreeBSD, there are two types of locks that 
you can request using the i2 parameter. (Under DOS32 and WIN32 the i2 parameter
is ignored, but should be an integer.)
Ask for a <b><i>shared</b></i> lock when you intend to read a file, and you want to 
temporarily block other processes from writing it. Ask for an 
<b><i>exclusive</i></b> lock 
when you intend to write to a file and you want to temporarily block other 
processes from reading or writing it. It's ok for many processes to 
simultaneously have shared locks on the same file, but only one process 
can have an exclusive lock, and that can happen only when no other 
process has any kind of lock on the file. file.e contains the following
declaration:"
>
<_eucode>
global constant LOCK_SHARED = 1, 
		LOCK_EXCLUSIVE = 2
</_eucode>

<_2clist
 name=""
 description="On DOS32 and WIN32 you can lock a specified 
 portion of a file using the s parameter. s is a sequence of the 
 form: {first_byte, last_byte}.
 It indicates the first byte and last byte in the file,
 that the lock applies to. Specify the empty sequence {}, 
 if you want to lock the whole file. In the current release for Linux/FreeBSD,
 locks always apply to the whole file, and you should specify {}
 for this parameter.
<p>
If it is successful in obtaining the desired lock, lock_file() will 
return 1. If unsuccessful, it will return 0. lock_file() does not wait
for other processes to relinquish their locks. You may have to call 
it repeatedly, before the lock request is granted."
 >

<_2clist
  name="Comments:"
  description="On Linux/FreeBSD, these locks are called advisory locks, which
    means they aren't enforced by the operating system. It is up to the
    processes that use a particular file to cooperate with each other.
    A process can access a file without first obtaining a lock on it.
    On WIN32 and DOS32, locks are enforced by the operating system."
 >
<_2clist
  name=""
  description="On DOS32, lock_file() is more useful when
   file sharing is enabled. It will typically return 0 (unsuccessful) 
   under plain MS-DOS, outside of Windows."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
include misc.e
include file.e
integer v
atom t
v = open("visitor_log", "a")  -- open for append
t = time()
while not lock_file(v, LOCK_EXCLUSIVE, {}) do
    if time() > t + 60 then
        puts(1, "One minute already ... I can't wait forever!\n")
        abort(1)
    end if
    sleep(5) -- let other processes run
end while
puts(v, "Yet another visitor\n")
unlock_file(v, {})
close(v)
 </_eucode>

 <_2clist
  name="See Also:"
  description="<a href=\"lib_u_z.htm#unlock_file\">unlock_file</a>,
<a href=\"lib_e_g.htm#flush\">flush</a>,
<a href=\"lib_s_t.htm#sleep\">sleep</a>"
 >
</table>

<_routine name="lock_memory">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 lock_memory(a, i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Prevent the block of virtual memory starting at address a,
 of length i, from ever being swapped out to disk."
 >
<_2clist
  name="Comments:"
  description=
"<p>
 lock_memory() should only be used in the highly-specialized situation
 where you have set up your own DOS hardware interrupt handler using
 machine code. When a hardware interrupt occurs, it is not possible 
 for the operating system to retrieve any code or data that has 
 been swapped out, so you need to protect any blocks of machine code or data
 that will be needed in servicing the interrupt."
 >
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\dos32\hardint.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#get_vector\">get_vector</a>,
<a href=\"lib_s_t.htm#set_vector\">set_vector</a>"
 >
</table>


<_routine name="log">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> x2 = log(x1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the natural logarithm of x1."
 >
<_2clist
  name="Comments:"
  description=
"This function may be applied to an atom or to all elements
 of a sequence. Note that log is only defined for positive
 numbers. Your program will abort with a message if you
 try to take the log of a negative number or zero.
 <p>
 To compute the inverse, you can use power(e, x) 
 where e is 2.7182818284590452..."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
a = log(100)
-- a is 4.60517

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_s_t.htm#sin\">sin</a>,
<a href=\"lib_c_d.htm#cos\">cos</a>,
<a href=\"lib_s_t.htm#tan\">tan</a>,
<a href=\"lib_p_r.htm#power\">power</a>,
<a href=\"lib_s_t.htm#sqrt\">sqrt</a>"
 >
</table>


<_routine name="lower">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include wildcard.e<BR>
 x2 = lower(x1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Convert an atom or sequence to lower case."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
s = lower("Euphoria")
-- s is "euphoria"

a = lower('B')
-- a is 'b'

s = lower({"Euphoria", "Programming"})
-- s is {"euphoria", "programming"}

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_u_z.htm#upper\">upper</a>"
 >
</table>


<_routine name="machine_func">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> x1 = machine_func(a, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"see <a href=\"lib_h_o.htm#machine_proc\">machine_proc()</a> below"
 >
</table>


<_routine name="machine_proc">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> machine_proc(a, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Perform a machine-specific operation such as graphics and sound
 effects. This routine should normally be called indirectly via
 one of the library routines in a Euphoria include file. A direct
 call might cause a machine exception if done incorrectly. "
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_h_o.htm#machine_func\">machine_func</a>"
 >
</table>


<_routine name="match">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = match(s1, s2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Try to match s1 against some slice of s2. If successful, return
 the element number of s2 where the (first) matching slice begins,
 else return 0. "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
location = match("pho", "Euphoria")
-- location is set to 3

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#find\">find</a>,
  <a href=\"lib_e_g.htm#find\">find_from</a>,
<a href=\"lib_c_d.htm#compare\">compare</a>,
<a href=\"lib_h_o.htm#match_from\">match_from</a>,
<a href=\"lib_u_z.htm#wildcard_match\">wildcard_match</a>"
 >
</table>

<_routine name="match_from">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i1 = match_from(s1, s2, i2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Try to match s1 against some slice of s2, starting from index i2. 
 If successful, return the element number of s2 where the (first) 
 matching slice begins, else return 0. i2 may have any value from
 1 to the length of s plus 1. (Just like the first index of a slice
 of s.)"
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
location = match_from("pho", "phoEuphoria", 4)
-- location is set to 6

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#find\">find</a>,
  <a href=\"lib_e_g.htm#find_from\">find_from</a>,
  <a href=\"lib_h_o.htm#match\">match</a>,
<a href=\"lib_c_d.htm#compare\">compare</a>,
<a href=\"lib_u_z.htm#wildcard_match\">wildcard_match</a>"
 >
</table>

<_routine name="max">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include math.e<BR>
a = max(x)</font>"
 >
 <_2clist
  name="Description:"
  description=
"Computes the maximum value among all the argument's elements."
 >

 <_2clist
  name="Comments:"
  description=
"This function may be applied to an atom or to all elements of a sequence"
 >

 <_2clist
  name="Example:"
  description=""
 >
<_eucode>
a = max({10,15.4,3})
-- a is 15.4
</_eucode>

 <_2clist
  name="See Also:"
  description="<a href=\"lib_a_b.htm#average\">average</a>,
<a href=\"lib_h_o.htm#min\">min</a>,
<a href=\"lib_s_t.htm#sum\">sum</a>"
 >
</table>


<_routine name="mem_copy">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> mem_copy(a1, a2, i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Copy a block of i bytes of memory from address a2 to address a1. "
 >
<_2clist
  name="Comments:"
  description=
" The bytes of memory will be copied correctly even if the block
 of memory at a2 overlaps with the block of memory at a1.
<P>
mem_copy(a1, a2, i) is equivalent to: <b>poke(a1, peek({a2, i}))</b>
 but is much faster."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
dest = allocate(50)
src = allocate(100)
poke(src, {1,2,3,4,5,6,7,8,9})
mem_copy(dest, src, 9)

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_h_o.htm#mem_set\">mem_set</a>,
<a href=\"lib_p_r.htm#peek\">peek</a>,
<a href=\"lib_p_r.htm#poke\">poke</a>,
<a href=\"lib_a_b.htm#allocate\">allocate</a>,
<a href=\"lib_a_b.htm#allocate_low\">allocate_low</a>"
 >
</table>


<_routine name="mem_set">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> mem_set(a1, i1, i2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Set i2 bytes of memory, starting at address a1, to the value of i1."
 >
<_2clist
  name="Comments:"
  description=
"The low order 8 bits of i1 are actually stored in each byte.
<P>
mem_set(a1, i1, i2) is equivalent to: <b>poke(a1, repeat(i1, i2))</b>
 but is much faster."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
destination = allocate(1000)
mem_set(destination, ' ', 1000)
-- 1000 consecutive bytes in memory will be set to 32 
-- (the ASCII code for ' ')

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_h_o.htm#mem_copy\">mem_copy</a>,
<a href=\"lib_p_r.htm#peek\">peek</a>,
<a href=\"lib_p_r.htm#poke\">poke</a>,
<a href=\"lib_a_b.htm#allocate\">allocate</a>,
<a href=\"lib_a_b.htm#allocate_low\">allocate_low</a>"
 >
</table>


<_routine name="message_box">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>WIN32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include msgbox.e<BR>
 i = message_box(s1, s2, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Display a window with title s2, containing the message string s1.
 x determines the combination of buttons that will be available
 for the user to press, plus some other characteristics. x can be
 an atom or a sequence. A return value of 0 indicates a failure to set up
 the window."
 >
<_2clist
  name="Comments:"
  description=
"See <font color=\"#5500FF\"><b>msgbox.e</b></font> for a complete list
 of possible values for x and i."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
response = message_box("Do you wish to proceed?",
                       "My Application",
                       MB_YESNOCANCEL)
if response = IDCANCEL or response = IDNO then
    abort(1)
end if

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\win32\email.exw</b></font>"
 >

</table>


<_routine name="mid">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include sequence.e<BR>
s2 = mid(s1, i1, i2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return i2 items starting at i1. If i1 + i2 is greater than the length of s1, then everything
in s1 starting at i1 will be returned."
 >
<_2clist
  name="Comments:"
  description=
"A new sequence is created.

s1 can be any type of sequence, including nested sequences."
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
s2 = mid("John Middle Doe", 6, 6)
-- s2 is Middle

s2 = left("John Middle Doe", 6, 50)
-- s2 is Middle Doe

s2 = left({1, 5.4, "John", 30}, 2, 2)
-- s2 is {5.4, "John"}
 </_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#right\">right</a>,
<a href=\"lib_h_o.htm#left\">left</a>,
<a href=\"lib_s_t.htm#slice\">slice</a>"
 >
</table>


<_routine name="min">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include math.e<BR>
a = min(x)</font>"
 >
 <_2clist
  name="Description:"
  description=
"Computes the minimum value among all the argument's elements."
 >

 <_2clist
  name="Comments:"
  description=
"This function may be applied to an atom or to all elements of a sequence"
 >

 <_2clist
  name="Example:"
  description=""
 >
<_eucode>
a = min({10,15.4,3})
-- a is 3
</_eucode>

 <_2clist
  name="See Also:"
  description="<a href=\"lib_a_b.htm#average\">average</a>,
<a href=\"lib_h_o.htm#max\">max</a>,
<a href=\"lib_s_t.htm#sum\">sum</a>"
 >
</table>


<_routine name="mouse_events">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32, Linux</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include mouse.e<BR>
 mouse_events(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Use this procedure to select the mouse events that you want
 get_mouse() to report. By default, get_mouse() will report all
 events. mouse_events() can be called at various stages of the
 execution of your program, as the need to detect events changes.
 Under Linux, mouse_events() currently has no effect."
 >
<_2clist
  name="Comments:"
  description=
"It is good practice to ignore events that you are not interested
 in, particularly the very frequent MOVE event, in order to reduce
 the chance that you will miss a significant event.
<P>
The first call that you make to mouse_events() will turn on a
 mouse pointer, or a highlighted character."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
mouse_events(LEFT_DOWN + LEFT_UP + RIGHT_DOWN)
-- will restrict get_mouse() to reporting the left button
-- being pressed down or released, and the right button
-- being pressed down. All other events will be ignored.

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#get_mouse\">get_mouse</a>,
<a href=\"lib_h_o.htm#mouse_pointer\">mouse_pointer</a>"
 >
</table>


<_routine name="mouse_pointer">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32, Linux</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include mouse.e<BR>
 mouse_pointer(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"If i is 0 hide the mouse pointer, otherwise turn on the mouse
 pointer. Multiple calls to hide the pointer will require
 multiple calls to turn it back on. The first call to either
 get_mouse() or mouse_events(), will also turn the pointer
 on (once). Under Linux, mouse_pointer() currently has no effect" 
 >
<_2clist
  name="Comments:"
  description=
"It may be necessary to hide the mouse pointer temporarily when
 you update the screen.
<P>
After a call to <a href=\"lib_s_t.htm#text_rows\">text_rows()</a> you may
 have to call mouse_pointer(1) to see the mouse pointer again."
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#get_mouse\">get_mouse</a>,
<a href=\"lib_h_o.htm#mouse_events\">mouse_events</a>"
 >
</table>


<_routine name="not_bits">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> x2 = not_bits(x1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Perform the logical NOT operation on each bit in x1.
 A bit in x2 will be 1 when the corresponding bit in x1
 is 0, and will be 0 when the corresponding bit in x1 is 1."
 >
<_2clist
  name="Comments:"
  description=
"The argument to this function may be an atom or a sequence.
 The rules for <a href=\"refman_2.htm#26\">operations on sequences</a> apply.
<P>
The argument must be representable as a 32-bit number,
 either signed or unsigned.
<P>
If you intend to manipulate full 32-bit values, you should
 declare your variables as <font color=\"#993333\"><b>atom</b></font>,
 rather than integer. Euphoria's integer type is limited to 31-bits.
<P>
Results are treated as signed numbers. They will be
 negative when the highest-order bit is 1."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
a = not_bits(#000000F7)
-- a is -248 (i.e. FFFFFF08 interpreted as a negative number)

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_a_b.htm#and_bits\">and_bits</a>,
<a href=\"lib_h_o.htm#or_bits\">or_bits</a>,
<a href=\"lib_u_z.htm#xor_bits\">xor_bits</a>,
<a href=\"lib_h_o.htm#int_to_bits\">int_to_bits</a>"
 >
</table>


<_routine name="object">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = object(x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Test if x is of type object. This will always be true, so
 object() will always return 1."
 >
<_2clist
  name="Comments:"
  description=
"All <a href=\"refman_2.htm#43\">predefined</a> and
 <a href=\"refman_2.htm#type\">user-defined types</a> can also be used as
 functions to test if a value belongs to the type. object()
 is included just for completeness. It always returns 1."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
? object({1,2,3})  -- always prints 1

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_h_o.htm#integer\">integer</a>,
<a href=\"lib_a_b.htm#atom\">atom</a>,
<a href=\"lib_s_t.htm#sequence\">sequence</a>"
 >
</table>


<_routine name="open">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> fn = open(st1, st2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Open a file or device, to get the file number. -1 is returned if
 the open fails. st1 is the path name of the file or device. st2 is
 the mode in which the file is to be opened. Possible modes are:<P>
\"r\" - open text file for reading<BR>
 \"rb\" - open binary file for reading<BR>
 \"w\" - create text file for writing<BR>
 \"wb\" - create binary file for writing<BR>
 \"u\" - open text file for update (reading and writing)<BR>
 \"ub\" - open binary file for update<BR>
 \"a\" - open text file for appending<BR>
 \"ab\" - open binary file for appending<BR>
<P>
Files opened for read or update must already exist. Files opened
 for write or append will be created if necessary. A file opened
 for write will be set to 0 bytes. Output to a file opened for
 append will start at the end of file.
<P>
On DOS or Windows, output to <b>text files</b> will have 
carriage-return characters
 automatically added before linefeed characters. On input, these
 carriage-return characters are removed. A control-Z character
 (ASCII 26) will signal an immediate end of file. Note: on some versions
 of DOS, a control-Z typed by the user might cause standard input 
 to permanently appear to be at the end-of-file, until the DOS window is closed.
<P>
I/O to <b>binary files</b> is not modified in any way. Any byte values
 from 0 to 255 can be read or written. On Linux and FreeBSD, all files
 are binary files, so \"r\" mode and \"rb\" mode are equivalent,
 as are \"w\" and \"wb\", \"u\" and \"ub\", and \"a\" and \"ab\".
<P>
Some typical devices that you can open on DOS or Windows are:
<P>
 \"CON\" - the console (screen)<BR>
 \"AUX\" - the serial auxiliary port<BR>
 \"COM1\" - serial port 1<BR>
 \"COM2\" - serial port 2<BR>
 \"PRN\" - the printer on the parallel port<BR>
 \"NUL\" - a non-existent device that accepts and discards output<BR>
<p>
Currently, files up to 2 Gb in size can be handled. Beyond that, 
some file operations may not work correctly. This limit will likely 
be increased in the future.
 "
 >
<_2clist
  name="Comments:"
  description=
"<font color=\"#CC3366\"><b>DOS32:</b></font>
 When running under Windows 95 or later, you can open any existing file
 that has a long file or directory name in its path (i.e. greater
 than the standard DOS 8.3 format) using any open mode - read,
 write etc. However, if you try to create a <b><i>new</i></b> file (open with
 \"w\" or \"a\" and the file does not already exist) then the name
 will be truncated if necessary to an 8.3 style name. We hope to
 support creation of new long-filename files in a future release.
 <p>
 <font color=\"#CC3366\"><b>WIN32, Linux and FreeBSD:</b></font>
 Long filenames are fully supported for reading and writing and creating.
 <p>
 <font color=\"#CC3366\"><b>DOS32:</b></font>
 Be careful not to use the special device names in a file name, even
 if you add an extension. e.g. CON.TXT, CON.DAT, CON.JPG etc. all refer to 
 the CON device, not a file."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
integer file_num, file_num95
sequence first_line
constant ERROR = 2

file_num = open("myfile", "r")
if file_num = -1 then
    puts(ERROR, "couldn't open myfile\n")
else
    first_line = gets(file_num)
end if

file_num = open("PRN", "w") -- open printer for output

-- on Windows 95:
file_num95 = open("bigdirectoryname\\verylongfilename.abcdefg",
                  "r")
if file_num95 != -1 then
    puts(1, "it worked!\n")
end if

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_c_d.htm#close\">close</a>,
               <a href=\"lib_h_o.htm#lock_file\">lock_file</a>"
 >
</table>


<_routine name="open_dll">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>WIN32, Linux, FreeBSD</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include dll.e<BR>
 a = open_dll(st)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Open a Windows dynamic link library (<b>.</b>dll) file, or a Linux or FreeBSD
shared library (<b>.</b>so) file. A 32-bit address will
 be returned, or 0 if the <b>.</b>dll can't be found. st can be a relative
 or an absolute file name. Windows will use the normal search
 path for locating <b>.</b>dll files."
 >
<_2clist
  name="Comments:"
  description=
"The value returned by open_dll() can be passed to define_c_proc(),
 define_c_func(), or define_c_var().
<P>
You can open the same <b>.</b>dll or <b>.</b>so file multiple times.
 No extra memory is used and you'll get the same number returned
 each time.
<p>
 Euphoria will close the .dll for you automatically at the end of
 execution."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
atom user32
user32 = open_dll("user32.dll")
if user32 = 0 then
    puts(1, "Couldn't open user32.dll!\n")
end if

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_c_d.htm#define_c_func\">define_c_func</a>,
<a href=\"lib_c_d.htm#define_c_proc\">define_c_proc</a>,
<a href=\"lib_c_d.htm#define_c_var\">define_c_var</a>,
<a href=\"lib_c_d.htm#c_func\">c_func</a>,
<a href=\"lib_c_d.htm#c_proc\">c_proc</a>,
<a class=\"blue\" href=\"platform.htm#call_cfunc\"><b>platform.doc</b>
</a>"
 >
</table>


<_routine name="or_bits">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> x3 = or_bits(x1, x2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Perform the logical OR operation on corresponding bits in
 x1 and x2. A bit in x3 will be 1 when a corresponding
 bit in either x1 or x2 is 1."
 >
<_2clist
  name="Comments:"
  description=
"The arguments to this function may be atoms or sequences. The
 rules for <a href=\"refman_2.htm#26\">operations on sequences</a> apply.
<P>
The arguments must be representable as 32-bit numbers,
 either signed or unsigned.
<P>
If you intend to manipulate full 32-bit values, you should declare your
 variables as <font color=\"#993333\"><b>atom</b></font>, rather than
 integer. Euphoria's integer type is limited to 31-bits.
<P>
Results are treated as signed numbers. They will be
 negative when the highest-order bit is 1."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
a = or_bits(#0F0F0000, #12345678)
-- a is #1F3F5678

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
a = or_bits(#FF, {#123456, #876543, #2211})
-- a is {#1234FF, #8765FF, #22FF}

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_a_b.htm#and_bits\">and_bits</a>,
<a href=\"lib_u_z.htm#xor_bits\">xor_bits</a>,
<a href=\"lib_h_o.htm#not_bits\">not_bits</a>,
<a href=\"lib_h_o.htm#int_to_bits\">int_to_bits</a>"
 >
</table>

<_continueAll
  libDoc="lib_h_o.htm"
>

</body>
</html>

