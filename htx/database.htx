<_init_comment>
<html>
<head><title>Euphoria Database System</title>
<_css>
</head>
<body>
<_width>
<_center><font face="Arial, Helvetica" color="#FF0099" size=+2>
<br>
	                  Euphoria Database System (EDS)
</font></_center>
<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul> Introduction </_dul> 
</font>

 <p>
 Many people have expressed an interest in accessing databases using 
 Euphoria programs. Those people have either wanted to access a
 name-brand database management system from Euphoria, or they've 
 wanted a simple, easy-to-use, Euphoria-oriented database for storing data. 
 EDS is the latter. <font color="#006633"><b>It provides a simple,
 extremely flexible, database system 
 for use by Euphoria programs.</b></font>
 
<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>Structure of an EDS database</_dul>
</font> 
 <p>
 In EDS, a <font color="#993333"><b>database</b></font> is a single file
 with <_bq>.edb</_bq> file type.
 An EDS database contains 0 or more
 <font color="#993333"><b>tables</b></font>. Each table has a
 <font color="#993333"><b>name</b></font>, and 
 contains 0 or more <font color="#993333"><b>records</b></font>.
 Each record consists of a <font color="#993333"><b>key</b></font> part, 
 and a <font color="#993333"><b>data</b></font> part. The key can be
 <font color="#CC0099"><b>any</b></font> Euphoria object - 
 an atom, a sequence, a deeply-nested sequence, whatever. Similarly the 
 data can be <font color="#CC0099"><b>any</b></font> Euphoria object.
 There are <font color="#CC0099"><b>no</b></font> constraints on the 
 size or structure of the key or data. Within a given table, the keys 
 are all unique. That is, no two records in the same table can have 
 the same key part.
 
 <p>
 The records of a table are stored in ascending order of key value.
 An efficient binary search is used when you refer to a record
 by key. You can also access a record directly, with no search, if you 
 know its current <font color="#993333"><b>record number</b></font> within
 the table. Record numbers are 
 integers from 1 to the length (current number of records) of the table. 
 By incrementing the record number, you can efficiently step through all 
 the records, in order of key. Note however that a record's number can 
 change whenever a new record is inserted, or an existing record is deleted.
 
 <p>
 The keys and data parts are stored in a compact form, but
 <font color="#CC0099"><b>no</b></font> accuracy is 
 lost when saving or restoring floating-point numbers or
 <font color="#CC0099"><b>any</b></font> other Euphoria data.
 
 <p>
 <font color="#5500FF"><b>database.e</b></font> will work as is,
 on <font color="#CC3366"><b>Windows</b></font>,
 <font color="#CC3366"><b>DOS</b></font>,
 <font color="#CC3366"><b>Linux</b></font>
 or <font color="#CC3366"><b>FreeBSD</b></font>. 
 <font color="#006633"><b>EDS database files can be copied and shared
 between programs running on Linux/FreeBSD and DOS/Windows.</b></font>
 Be sure to make an exact byte for byte copy 
 using "binary" mode copying, rather than "text" or "ASCII" mode which
 could change the line terminators.
 
<_eucode> 
 Example:
    database: "mydata.edb"
          first table: "passwords"
               record #1:  key: "jones"   data: "euphor123"
               record #2:  key: "smith"   data: "billgates"
        
          second table: "parts"
               record #1:  key: 134525    data: {"hammer", 15.95, 500}
               record #2:  key: 134526    data: {"saw", 25.95, 100}
               record #3:  key: 134530    data: {"screw driver", 5.50, 1500}
        
</_eucode>
 It's up to you to interpret the meaning of the key and data.
 <font color="#006633"><b>In keeping with the spirit of Euphoria, you have
 total flexibility.</b></font> 
 Unlike most other database systems, an EDS record is
 <font color="#CC0099"><_ba><i>not</i></_ba></font> required to 
 have either a fixed number of fields, or fields with a preset maximum length.
 
 <p>
 In many cases there will not be any natural key value for your records.
 In those cases you should simply create a meaningless, but unique, 
 integer to be the key. Remember that you can always access the data 
 by record number. It's easy to loop through the records looking for 
 a particular field value.

<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>How to access the data</_dul>
</font> 

 <p>
 To reduce the number of parameters that you have to pass,
 there is a notion of the <font color="#993333"><b>current database</b></font>,
 and <font color="#993333"><b>current table</b></font>.
 Most routines use these <_bq>current</_bq> values automatically.
 You normally start by opening (or creating) a database file, then
 selecting the table that you want to work with.
 
 <p>
 You can map a key to a record number using
 <a href="database.htm#find_key"><b>db_find_key()</b></a>. It uses
 an efficient binary search. Most of the other record-level routines 
 expect the record number as an argument. You can very quickly access 
 any record, given it's number. You can access all the records by 
 starting at record number 1 and looping through to the record number 
 returned by <a href="database.htm#table_size"><b>db_table_size()</b></a>.
 
<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>How does storage get recycled?</_dul>
</font> 

<p>
 When you delete something, such as a record, the space for that item
 gets put on a free list, for future use. Adjacent free areas are 
 combined into larger free areas. When more space is needed, and no 
 suitable space is found on the free list, the file will grow in size.
 Currently there is no automatic way that a file will shrink in size, 
 but you can use <a href="database.htm#compress"><b>db_compress()</b></a> to
 completely rewrite a database, removing the unused spaces.

<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>Security / Multi-user Access</_dul>
</font> 

<p>
 This release provides a simple way to lock an entire database to prevent
 unsafe access by other processes.

<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>Scalability</_dul>
</font> 

<p>
 Internal pointers are 4 bytes. In theory that limits the size of a 
 database file to 4 Gb. In practice, the limit is 2 Gb because of
 limitations in various C file functions used by Euphoria.
 Given enough user demand, EDS databases could be expanded well beyond
 2 Gb in the future.
 
<p> 
 The current algorithm allocates 4 bytes of memory per record in the 
 current table. So you'll need at least 4Mb RAM per million records
 on disk.
<p> 
 The binary search for keys should work reasonably well for large tables. 
<p> 
 Inserts and deletes take slightly longer as a table gets larger. 
<p> 
 At the low end of the scale, it's possible to create extremely small
 databases without incurring much disk space overhead.

<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>Disclaimer</_dul>
</font> 

 <p>
 Do not store valuable data without a backup. 
 RDS will not be responsible for any damage or data loss.

<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>Warning</_dul>
</font> 

 <p>
 .edb files are binary files, not text files. 
 You *must* use BINARY mode when transferring a .edb file
 via FTP from one machine to another. You must also avoid
 loading a .edb file into an editor and saving it. If you 
 open a .edb file directly using Euphoria's open(), 
 which is not recommended, you must use binary mode, not text mode. 
 Failure to follow these rules could result in 10 (line-feed) 
 and 13 (carriage-return) bytes being changed, leading to subtle 
 and not-so-subtle forms of corruption in your database.
 
<p>
<hr>

<p>&nbsp;

</_width>
</body>
</html>
