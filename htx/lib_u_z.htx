<_init_comment>
<html>
<head><title>Euphoria Reference Manual Part II - Section 3</title>
<_css>
</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">
<br>

<_routine name="unlock_file">
<table border=0 cellspacing=2 cellpadding=2>

<_2clist
 name="Syntax:"
 description="<font face=\"Arial, Helvetica\"> include file.e<BR>
 unlock_file(fn, s)</font>"
>
<_2clist
 name="Description:"
 description="Unlock an open file fn, or a portion of file fn. 
 You must have previously locked the file using lock_file(). 
 On DOS32 and WIN32 you can unlock a range of bytes within a file by
 specifying the s parameter as {first_byte, last_byte}.
 The same range of bytes must have been locked by a previous call 
 to lock_file(). On Linux/FreeBSD
 you can currently only lock or unlock an entire file. The s
 parameter should be {} when you want to unlock an entire file. 
 On Linux/FreeBSD, s must always be {}." 
>
<_2clist
  name="Comments:"
  description="
  You should unlock a file as soon as possible so other processes 
  can use it."
>  
<_2clist
 name=""
 description="Any files that you have 
  locked, will automatically be unlocked when your program terminates."
>
<_2clist
 name=""
 description="See lock_file() for further comments and an example."
>
<_2clist
  name="See Also:"
  description="<a href=\"lib_h_o.htm#lock_file\">lock_file</a>"
>
</table>

<_routine name="unregister_block">
<table border=0 cellspacing=2 cellpadding=2>

<_2clist
 name="Syntax:"
 description="<font face=\"Arial, Helvetica\"> include machine.e (or safe.e)<BR>
 unregister_block(a)</font>"
>
<_2clist
 name="Description:"
 description="Remove a block of memory from the list of safe blocks maintained
 by <font color=\"#5500FF\"><b>safe.e</b></font> (the debug version of
 <font color=\"#5500FF\"><b>machine.e</b></font>). The block starts at
 address a."
>
<_2clist
  name="Comments:"
  description="This routine is only meant to be used for <b>debugging
  purposes</b>. Use it to unregister blocks of memory that you have
  previously registered using register_block(). By unregistering a block,
  you remove it from the list of safe blocks maintained by
  <font color=\"#5500FF\"><b>safe.e</b></font>. This prevents your program
  from performing any further reads or writes of memory within the block."
>  
<_2clist
 name=""
 description="See register_block() for further comments and an example."
>
<_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#register_block\">register_block</a>,
 <a class=\"blue\" href=\"library.htm#safe\"><b>safe.e</b></a>"
>
</table>
  
<_routine name="upper">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include wildcard.e<BR>
 x2 = upper(x1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Convert an atom or sequence to upper case. "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
s = upper("Euphoria")
-- s is "EUPHORIA"

a = upper('g')
-- a is 'G'

s = upper({"Euphoria", "Programming"})
-- s is {"EUPHORIA", "PROGRAMMING"}

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_h_o.htm#lower\">lower</a>"
 >
</table>


<_routine name="use_vesa">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 use_vesa(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"use_vesa(1) will force Euphoria to use the VESA graphics
 standard. This may cause Euphoria programs to work better
 in SVGA graphics modes with certain video cards.
 use_vesa(0) will restore Euphoria's original method of
 using the video card."
 >
<_2clist
  name="Comments:"
  description=
"Most people can ignore this. However if you experience
 difficulty in SVGA graphics modes you should try calling
 use_vesa(1) at the start of your program before any calls
 to graphics_mode().
<P>
Arguments to use_vesa() other than 0 or 1 should not be used."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
use_vesa(1)
fail = graphics_mode(261)

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#graphics_mode\">graphics_mode</a>"
 >
</table>


<_routine name="value">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include get.e<BR>
 s = value(st)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Read the string representation of a Euphoria object, and computes
 the value of that object. A 4-element sequence,
 <b>{error_status, value, total characters read, number of leading whitespace}</b> is
  actually returned, where error_status can be one of:"
 >
<_eucode>
    GET_SUCCESS -- a valid object representation was found
    GET_EOF     -- end of string reached too soon
    GET_FAIL    -- syntax is wrong
</_eucode>

<_2clist
  name="Comments:"
  description=
"This works the same as <b>get()</b>, but it reads from a string
 that you supply, rather than from a file or device.
 <p>
 After reading one valid representation of a Euphoria object, value() will
 stop reading and ignore any additional characters in the string. For
 example, \"36\" and \"36P\" will both give you {GET_SUCCESS, 36, 2, 0}.". After reading an
 invalid representation, the value field is undefined (usually 0), and the third field is the
 1 based index of the character the reading of which caused an error.
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
s = value("  12345"} -- notice the two leading spaces
-- s is {GET_SUCCESS, 12345, 7, 2}

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
s = value("{0, 1, -99.9}")
-- s is {GET_SUCCESS, {0, 1, -99.9}, 13, 0}

 </_eucode>
<_2clist
  name="Example 3:"
  description=""
 >
<_eucode>
s = value("+++")
-- s is {GET_FAIL, 0, 2, 0} -- error condition triggered on reading the 2nd character

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#get\">get</a>,
<a href=\"lib_s_t.htm#sprintf\">sprintf</a>,
<a href=\"lib_p_r.htm#print\">print</a>"
 >
</table>


<_routine name="video_config">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include graphics.e<BR>
 s = video_config()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return a sequence of values describing the current video
 configuration:<br>
 {color monitor?, graphics mode, text rows, text columns,
 xpixels, ypixels, number of colors, number of pages}<P>
The following constants are defined in
 <font color=\"#5500FF\"><b>graphics.e</b></font>:"
 >
<_eucode>
    global constant VC_COLOR   = 1,
                    VC_MODE    = 2,
                    VC_LINES   = 3,
                    VC_COLUMNS = 4,
                    VC_XPIXELS = 5,
                    VC_YPIXELS = 6,
                    VC_NCOLORS = 7,
                    VC_PAGES   = 8
</_eucode> 

<_2clist
  name="Comments:"
  description=
"This routine makes it easy for you to parameterize a program
 so it will work in many different graphics modes.
<P>
On the PC there are two types of graphics mode. The first type,
 <font color=\"#CC3366\">text mode</font>, lets you print text only.
 The second type, <font color=\"#CC3366\">pixel-graphics mode</font>,
 lets you plot pixels, or points, in various colors, as well as text.
 You can tell that you are in a <font color=\"#CC3366\">text mode</font>,
 because the VC_XPIXELS and VC_YPIXELS fields will be 0. Library routines
 such as <a href=\"lib_p_r.htm#polygon\">polygon()</a>,
 <a href=\"lib_c_d.htm#draw_line\">draw_line()</a>, and
 <a href=\"lib_e_g.htm#ellipse\">ellipse()</a>
 only work in a <font color=\"#CC3366\">pixel-graphics mode</font>."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
vc = video_config()  -- in mode 3 with 25-lines of text:
-- vc is {1, 3, 25, 80, 0, 0, 32, 8}

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#graphics_mode\">graphics_mode</a>"
 >
</table>


<_routine name="wait_key">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include get.e<BR>
 i = wait_key()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the next key pressed by the user. Don't return until
 a key is pressed."
 >
<_2clist
  name="Comments:"
  description=
"You could achieve the same result using <b>get_key()</b> as follows:"
>
<_eucode>
    while 1 do
        k = get_key()
        if k != -1 then
            exit
        end if
    end while
</_eucode>
<_2clist
  name=""
  description=
"However, on multi-tasking systems like
 <font color=\"#CC3366\"><b>Windows</b></font>
 or <font color=\"#CC3366\"><b>Linux/FreeBSD</b></font>, this \"busy waiting\"
 would tend to slow the system down.
 wait_key() lets the operating system do other useful work
 while your program is waiting for the user to press a key.
<P>
You could also use <b>getc(0)</b>, assuming file number 0 was input
 from the keyboard, except that you wouldn't pick up the special
 codes for function keys, arrow keys etc."
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#get_key\">get_key</a>,
<a href=\"lib_e_g.htm#getc\">getc</a>"
 >
</table>


<_routine name="walk_dir">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 i1 = walk_dir(st, i2, i3)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"This routine will \"walk\" through a directory with path name
 given by st. i2 is the <font color=\"#993333\"><b>routine id</b></font>
 of a routine that you supply.
 walk_dir() will call your routine once for each file and
 subdirectory in st. If i3 is non-zero (TRUE), then the
 subdirectories in st will be walked through recursively.<P>
The routine that you supply should accept the path name and 
 <a href=\"lib_c_d.htm#dir_entry\">dir() entry</a> for each file and
 subdirectory. It should return 0 to keep going, or
 non-zero to stop walk_dir()."
 >
<_2clist
  name="Comments:"
  description=
"This mechanism allows you to write a simple function that handles
 one file at a time, while walk_dir() handles the
 process of walking through all the files and subdirectories.
<P>
By default, the files and subdirectories will be visited in
 alphabetical order. To use a different order, set the global
 integer <b>my_dir</b> to the <font color=\"#993333\"><b>routine id</b></font>
 of your own <i>modified</i> dir()
 function that sorts the directory entries differently. See the default
 dir() function in <font color=\"#5500FF\"><b>file.e</b></font>.
 <p>
 The path that you supply to walk_dir() must not contain wildcards (* or ?).
 Only a single directory (and its subdirectories) can be searched at one
 time."
 >

<_2clist
  name="Example:"
  description=""
 >
<_eucode>
function look_at(sequence path_name, sequence entry)
-- this function accepts two sequences as arguments
    printf(1, "%s\\%s: %d\n",
           {path_name, entry[D_NAME], entry[D_SIZE]})
    return 0 -- keep going
end function

exit_code = walk_dir("C:\\MYFILES", routine_id("look_at"), TRUE)

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>euphoria\bin\search.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_c_d.htm#dir\">dir</a>,
<a href=\"lib_c_d.htm#current_dir\">current_dir</a>"
 >
</table>


<_routine name="where">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 a1 = where(fn)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  This function returns the current byte position in the file fn.
 This position is updated by reads, writes and seeks on the file.
 It is the place in the file where the next byte will be read
 from, or written to. "
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_s_t.htm#seek\">seek</a>,
<a href=\"lib_h_o.htm#open\">open</a>"
 >
</table>


<_routine name="wildcard_file">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include wildcard.e<BR>
 i = wildcard_file(st1, st2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return 1 (true) if the filename st2 matches the wild card pattern
 st1. Return 0 (false) otherwise. This is similar to DOS wildcard
 matching, but better in some cases. * matches any 0 or more
 characters, ? matches any single character. On Linux and FreeBSD
 the character comparisons are case sensitive. On DOS and Windows
 they are not."
 >
<_2clist
  name="Comments:"
  description=
"You might use this function to check the output of the dir()
 routine for file names that match a pattern supplied by the
 user of your program.
<P>
In DOS \"*ABC.*\" will match <b><i>all</i></b> files.
 wildcard_file(\"*ABC.*\", s) will only match when the file name part
 has \"ABC\" at the end (as you would expect)."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
i = wildcard_file("AB*CD.?", "aB123cD.e")
-- i is set to 1 on DOS or Windows, 0 on Linux or FreeBSD

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
i = wildcard_file("AB*CD.?", "abcd.ex")
-- i is set to 0 on all systems, 
-- because the file type has 2 letters not 1

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>bin\search.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_u_z.htm#wildcard_match\">wildcard_match</a>,
<a href=\"lib_c_d.htm#dir\">dir</a>"
 >
</table>


<_routine name="wildcard_match">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include wildcard.e<BR>
 i = wildcard_match(st1, st2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"This function performs a general matching of a string against a
 pattern containing * and ? wildcards. It returns 1 (true) if
 string st2 matches pattern st1. It returns 0 (false) otherwise.
 * matches any 0 or more characters. ? matches any
 single character. Character comparisons are case sensitive."
 >
<_2clist
  name="Comments:"
  description=
"If you want case insensitive comparisons, pass both st1 and st2
 through upper(), or both through lower() before calling
 wildcard_match().
<P>
If you want to detect a pattern anywhere within a string,
 add * to each end of the pattern:"
 >
<_eucode>
i = wildcard_match('*' & pattern & '*', string)
</_eucode>

<_2clist
  name=""
  description=
"There is currently no way to treat * or ? literally in a pattern."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
i = wildcard_match("A?B*", "AQBXXYY")
-- i is 1 (TRUE)

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
i = wildcard_match("*xyz*", "AAAbbbxyz")
-- i is 1 (TRUE)

 </_eucode>
<_2clist
  name="Example 3:"
  description=""
 >
<_eucode>
i = wildcard_match("A*B*C", "a111b222c")
-- i is 0 (FALSE) because upper/lower case doesn't match

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>bin\search.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_u_z.htm#wildcard_file\">wildcard_file</a>,
<a href=\"lib_h_o.htm#match\">match</a>,
<a href=\"lib_u_z.htm#upper\">upper</a>,
<a href=\"lib_h_o.htm#lower\">lower</a>,
<a href=\"lib_c_d.htm#compare\">compare</a>"
 >
</table>


<_routine name="wrap">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include graphics.e<BR>
 wrap(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Allow text to wrap at the right margin (i = 1) or get truncated
 (i = 0)."
 >
<_2clist
  name="Comments:"
  description=
"By default text will wrap.
<P>
Use wrap() in <font color=\"#CC3366\">text modes</font> or
 <font color=\"#CC3366\">pixel-graphics modes</font> when you
 are displaying long lines of text."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
puts(1, repeat('x', 100) & "\n\n")
-- now have a line of 80 'x' followed a line of 20 more 'x'
wrap(0)
puts(1, repeat('x', 100) & "\n\n")
-- creates just one line of 80 'x'

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#puts\">puts</a>,
<a href=\"lib_p_r.htm#position\">position</a>"
 >
</table>


<_routine name="xor_bits">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> x3 = xor_bits(x1, x2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Perform the logical XOR (exclusive OR) operation on
 corresponding bits in x1 and x2. A bit in x3 will be 1
 when one of the two corresponding bits in x1 or x2 is 1,
 and the other is 0."
 >
<_2clist
  name="Comments:"
  description=
"The arguments to this function may be atoms or sequences. The
 rules for <a href=\"refman_2.htm#26\">operations on sequences</a> apply.
<P>
The arguments must be representable as 32-bit numbers,
 either signed or unsigned.
<P>
If you intend to manipulate full 32-bit values, you should
 declare your variables as
 <font color=\"#993333\"><b>atom</b></font>, rather than integer. Euphoria's
 integer type is limited to 31-bits.
<P>
Results are treated as signed numbers. They will be
 negative when the highest-order bit is 1."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
a = xor_bits(#0110, #1010)
-- a is #1100

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_a_b.htm#and_bits\">and_bits</a>,
<a href=\"lib_h_o.htm#or_bits\">or_bits</a>,
<a href=\"lib_h_o.htm#not_bits\">not_bits</a>,
<a href=\"lib_h_o.htm#int_to_bits\">int_to_bits</a>,
<a href=\"lib_h_o.htm#int_to_bytes\">int_to_bytes</a>"
 >

</table>

</body>
</html>

