<_init_comment>
<html>
<head><title>Euphoria Reference Manual Part II - Section 3.6 - File and Device I/O</title>
<_css>
</head>
<body>

<font color="#FF0099" size=+1>
<br>

<_dul>3.6 - File and Device I/O</_dul>

</font>
<p>
<_sul><font color="#006633"><b>Constants:</b></font></_sul>


<a name=constants></a>
<table border=0 cellspacing=2 cellpadding=2>

<_3clist
  href="lib_file.htm#PATHSEP"
  name="PATHSEP"
  description="Current platforms path separator character"
>

<_3clist
  href="lib_file.htm#NL"
  name="NL"
  description="Current platforms newline character(s)"
>
</table>

<p>
<_sul><font color="#006633"><b>Function Reference:</b></font></_sul>


<_routine name="?">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> ? x
</font>"
 >
 <_2clist
  name="Description:"
  description=
"This is just a shorthand way of saying: <b>pretty_print(1, x, {})</b> -
 i.e. printing the value of an expression to the standard output,
 with braces and indentation to show the structure."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
? {1, 2} + {3, 4}  -- will display {4, 6}

</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#pretty_print\">pretty_print</a>,
  <a href=\"lib_file.htm#print\">print</a>"
 >
</table>



<_routine name="allow_break">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 allow_break(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"When i is 1 (true) control-c and control-Break can terminate
 your program when it tries to read input from the keyboard. When
 i is 0 (false) your program will not be terminated by control-c
 or control-Break."
 >
<_2clist
  name="Comments:"
  description=
"DOS will display ^C on the screen, even when your program cannot
 be terminated.
<P>
Initially your program can be terminated at any point where
 it tries to read from the keyboard. It could also be terminated
 by other input/output operations depending on options the user
 has set in his <b>config.sys</b> file. (Consult an MS-DOS manual for the BREAK
 command.) For some types of program this sudden termination could leave
 things in a messy state and might result in loss of data.
 allow_break(0) lets you avoid this situation.
<P>
You can find out if the user has pressed control-c or
 control-Break by calling check_break()."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
allow_break(0)  -- don't let the user kill me!

</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#check_break\">check_break</a>"
 >
</table>

<_routine name="chdir">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 i = chdir(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Set the current directory to the path given by sequence s. s must name
 an existing directory on the system. If successful, chdir() returns 1. 
 If unsuccessful, chdir() returns 0."
 >
<_2clist
  name="Comments:"
  description=
"By setting the current directory, you can refer to files in that
 directory using just the file name.
<P>
The function current_dir() will return the name of the current directory.
<P>
On DOS32 and WIN32 the current directory is a global property shared
by all the processes running under one shell. On Linux/FreeBSD, a subprocess
can change the current directory for itself, but this won't
affect the current directory of its parent process."

 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if chdir("c:\\euphoria") then
    f = open("readme.doc", "r")
else
    puts(1, "Error: No euphoria directory?\n")
end if
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#current_dir\">current_dir</a>"
 >
</table>


<_routine name="check_break">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 i = check_break()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the number of times that control-c or control-Break have
 been pressed since the last call to check_break(), or since the
 beginning of the program if this is the first call."
 >
<_2clist
  name="Comments:"
  description=
"This is useful after you have called allow_break(0) which
 prevents control-c or control-Break from terminating your
 program. You can use check_break() to find out if the user
 has pressed one of these keys. You might then perform some action
 such as a graceful shutdown of your program.
<P>
Neither control-c nor control-Break will be returned as input
 characters when you read the keyboard. You can only detect
 them by calling check_break()."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
k = get_key()
if check_break() then
    temp = graphics_mode(-1)
    puts(1, "Shutting down...")
    save_all_user_data()
    abort(1)
end if

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#allow_break\">allow_break</a>,
<a href=\"lib_file.htm#get_key\">get_key</a>"
 >
</table>

<_routine name="close">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> close(fn)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Close a file or device and flush out any still-buffered
 characters. "
 >
<_2clist
  name="Comments:"
  description=
" Any still-open files will be closed automatically when your
 program terminates.
 "
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#open\">open</a>,
               <a href=\"lib_file.htm#flush\">flush</a>"
 >
</table>



<_routine name="current_dir">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 s = current_dir()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Return the name of the current working directory. "
 >

<_2clist
  name="Comments:"
  description=
"There will be no slash or backslash on the end of the
current directory, except under DOS/Windows, at the top-level of
 a drive, e.g. C:\ "
 >

<_2clist
  name="Example:"
  description=""
 >

<_eucode>
sequence s
s = current_dir()
-- s would have "C:\EUPHORIA\DOC" if you were in that directory

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#dir\">dir</a>,
<a href=\"lib_file.htm#chdir\">chdir</a>,
<a href=\"lib_os.htm#getenv\">getenv</a>"
 >
</table>



<_routine name="dirname">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include file.e<BR>
s2 = dirname(s1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the directory name of a fully qualified filename."
 >
<_2clist
  name="Comments:"
  description=
"The host operating system path separator is used."
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
fname = dirname("/opt/euphoria/docs/readme.txt")
-- fname is "/opt/euphoria/docs"
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#pathinfo\">pathinfo</a>,
<a href=\"lib_file.htm#filename\">filename</a>,
<a href=\"lib_file.htm#fileext\">fileext</a>"
 >
</table>


<_routine name="dir">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 x = dir(st)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return directory information for the file or directory named by
 st. If there is no file or directory with this name then -1 is
 returned. st can also contain * and ? wildcards to select multiple
 files.
<P>
<a name=dir_entry></a>
This information is similar to what you would get from the DOS
 DIR command. A sequence is returned where each element is a
 sequence that describes one file or subdirectory.
<P>
If st names a <b>directory</b> you may have entries for \".\" and \"..\",
 just as with the DOS DIR command. If st names a <b>file</b> then x will
 have just one entry,
 i.e. <a href=\"lib_seq.htm#length\">length(x)</a> will
 be 1. If st contains wildcards you may have multiple entries.
<P>
Each entry contains the name, attributes and file size as well as
 the year, month, day, hour, minute and second of the last modification.
 You can refer to the elements of an entry with the following constants
 defined in <font color=\"#5500FF\"><b>file.e</b></font>:"
 >
<_eucode>
    global constant D_NAME = 1,
              D_ATTRIBUTES = 2,
                    D_SIZE = 3,

                    D_YEAR = 4,
                   D_MONTH = 5,
                     D_DAY = 6,

                    D_HOUR = 7,
                  D_MINUTE = 8,
                  D_SECOND = 9
</_eucode>

<_2clist
 name=""
 description=
"The attributes element is a string sequence containing
 characters chosen from:"
 >
<_eucode>
    'd' -- directory
    'r' -- read only file
    'h' -- hidden file
    's' -- system file
    'v' -- volume-id entry
    'a' -- archive file
</_eucode>

<_2clist
 name=""
 description=
"A normal file without special attributes would just have an empty
 string, \"\", in this field.
 "
 >
<_2clist
  name="Comments:"
  description=
" The top level directory, e.g. c:\ does not have \".\" or \"..\"
 entries.
<P>
This function is often used just to test if a file or
 directory exists.
<P>
Under <font color=\"#CC3366\"><b>WIN32</b></font>, st can have a long file
 or directory name anywhere in the path.
<P>
Under <font color=\"#CC3366\"><b>Linux/FreeBSD</b></font>, the only attribute
 currently available is 'd'.
<P>
<font color=\"#CC3366\"><b>DOS32:</b></font> The file name returned
 in D_NAME will be a standard DOS 8.3 name. (See
 <a href=\"http://www.rapideuphoria.com/cgi-bin/asearch.exu?dos=on&keywords=dir\">Archive
 Web page</a> for a better solution).
<P>
<font color=\"#CC3366\"><b>WIN32:</b></font> The file name returned
 in D_NAME will be a long file name."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
d = dir(current_dir())

-- d might have:
  {
    {".",    "d",     0  1994, 1, 18,  9, 30, 02},
    {"..",   "d",     0  1994, 1, 18,  9, 20, 14},
    {"fred", "ra", 2350, 1994, 1, 22, 17, 22, 40},
    {"sub",  "d" ,    0, 1993, 9, 20,  8, 50, 12}
  }

d[3][D_NAME] would be "fred"

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>bin\search.ex</b></font>
  </font>"
 >

<_2clist
  name="See Also:"
  description="<a href=\"lib_pat.htm#wildcard_file\">wildcard_file</a>,
<a href=\"lib_file.htm#current_dir\">current_dir</a>,
<a href=\"lib_file.htm#open\">open</a>"
 >
</table>


<_routine name="filename">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include file.e<BR>
s2 = filename(s1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the file name portion of a fully qualified filename."
 >
<_2clist
  name="Comments:"
  description=
"The host operating system path separator is used."
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
fname = filename("/opt/euphoria/docs/readme.txt")
-- fname is "readme.txt"
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#pathinfo\">pathinfo</a>,
<a href=\"lib_file.htm#dirname\">dirname</a>,
<a href=\"lib_file.htm#fileext\">fileext</a>"
 >
</table>

<_routine name="fileext">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include file.e<BR>
s2 = fileext(s1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the file extension of a fully qualified filename."
 >
<_2clist
  name="Comments:"
  description=
"The host operating system path separator is used."
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
fname = filename("/opt/euphoria/docs/readme.txt")
-- fname is "txt"
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#pathinfo\">pathinfo</a>,
<a href=\"lib_file.htm#dirname\">dirname</a>,
<a href=\"lib_file.htm#filename\">filename</a>"
 >
</table>

<_routine name="flush">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>flush(fn)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"When you write data to a file, Euphoria normally stores the data
in a memory buffer until a large enough chunk of data has accumulated. 
This large chunk can then be written to disk very efficiently. 
Sometimes you may want to force, or flush, all data out immediately, 
even if the memory buffer is not full. To do this you must call flush(fn),
where fn is the file number of a file open for writing or appending."
 >
<_2clist
  name="Comments:"
  description=
"When a file is closed, (see close()), all buffered data is flushed out. 
 When a program terminates, all open files are flushed and closed 
 automatically. <P>Use flush() when another process may need to
 see all of the data written so far, but you aren't ready
  to close the file yet."
 >

<_2clist
  name="Example:"
  description=""
 >
<_eucode>
f = open("logfile", "w")
puts(f, "Record#1\n")
puts(1, "Press Enter when ready\n")

flush(f)  -- This forces "Record #1" into "logfile" on disk.
          -- Without this, "logfile" will appear to have 
          -- 0 characters when we stop for keyboard input.

s = gets(0) -- wait for keyboard input

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#close\">close</a>,
               <a href=\"lib_file.htm#lock_file\">lock_file</a>"
 >
</table>

<_routine name="get">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include get.e<BR>
 s = get(fn)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Input, from file fn, a human-readable string of characters
 representing a Euphoria object. Convert the string into the
 numeric value of that object. s will be a 2-element sequence:
 <b>{error status, value}</b>. Error status codes are:"
 >
<_eucode>
    GET_SUCCESS -- object was read successfully
    GET_EOF     -- end of file before object was read completely
    GET_FAIL    -- object is not syntactically correct
    GET_NOTHING -- nothing was read, even a partial object string, before end of input
</_eucode>
 
 <_2clist
  name=""
  description=
"get() can read arbitrarily complicated Euphoria objects. You
 could have a long sequence of values in braces and separated by
 commas and comments, e.g. {23, {49, 57}, 0.5, -1, 99, 'A', \"john\"}.
 <font color=\"#CC0099\"><b>A single call to get() will read in this
 entire sequence and return its value as a result, as well as complementary information.</b></font>
<P>
get() returns a 2 element sequence, like value() does:
<ul>
<li> a status code (success/error/end of file/no value at all),
<li> the value just read (meaningful only when the status code is GET_SUCCESS),
</ul>
Each call to get() picks up where the previous call left off. For
 instance, a series of 5 calls to get() would be needed to read
 in:
<P>
"99 5.2 {1,2,3} \"Hello\" -1"
<P>
On the sixth and any subsequent call to get() you would see a
 GET_EOF status. If you had something like:
<P>
{1, 2, xxx}
<P>
in the input stream you would see a GET_FAIL error status
 because xxx is not a Euphoria object. And seeing
 <P>
   -- something\nBut no value
<P>
and the input stream stops right there, you'll  receive a status
 code of GET_NOTHING, because nothing but whitespace or comments was read.
<P>
Multiple \"top-level\" objects in the input stream must be
 separated from each other with one or more \"whitespace\"
 characters (blank, tab, \r or \n). At the very least, a top
 level number must be followed by a white space from the following object.
 Whitespace is not necessary <b><i>within</i></b> a top-level object. Comments, terminated by either '\n' or '\r',
 are allowed anywhere inside sequences, and ignored if at the top level.
 A call to get() will read one entire top-level object, plus possibly one additional
 (whitespace) character, after a top level number, even though the next object may have an identifiable starting pont.."
 >
<_2clist
  name="Comments:"
  description=
"The combination of print() and get() can be used to save a
 Euphoria object to disk and later read it back. This technique
 could be used to implement a database as one or more large
 Euphoria sequences stored in disk files. The sequences could be
 read into memory, updated and then written back to disk after
 each series of transactions is complete. Remember to write out
 a whitespace character (using puts()) after each call to print(),
 at least when a top level number was just printed.
<P>
The value returned is not meaningful unless you have a
 GET_SUCCESS status.
 "
 >
<_2clist
  name="Example:"
  description="Suppose your program asks the user to enter a number from the
  keyboard."
 >
<_eucode>
-- If he types 77.5, get(0) would return:

{GET_SUCCESS, 77.5}

-- whereas gets(0) would return:

"77.5\n"

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\mydata.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#print\">print</a>,
<a href=\"lib_file.htm#value\">value</a>,
<a href=\"lib_file.htm#gets\">gets</a>,
<a href=\"lib_file.htm#getc\">getc</a>,
<a href=\"lib_file.htm#prompt_number\">prompt_number</a>,
<a href=\"lib_file.htm#prompt_string\">prompt_string</a>"
 >
</table>



<_routine name="get_bytes">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include get.e<BR>
 s = get_bytes(fn, i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Read the next i bytes from file number fn. Return the bytes
 as a sequence. The sequence will be of length i, except
 when there are fewer than i bytes remaining to be read in the
 file. "
 >
<_2clist
  name="Comments:"
  description=
"When i > 0 and <a href=\"lib_seq.htm#length\">length(s)</a> < i you know
 you've reached the end of file. Eventually, an
 <a href=\"refman_2.htm#empty_seq\">empty sequence</a> will be returned
 for s.
 <P>
 This function is normally used with files opened in binary mode, \"rb\".
 This avoids the confusing situation in text mode where DOS will convert CR LF pairs to LF."
 >

<_2clist
  name="Example:"
  description=""
 >
<_eucode>
include get.e

integer fn
fn = open("temp", "rb")  -- an existing file

sequence whole_file
whole_file = {}

sequence chunk

while 1 do
    chunk = get_bytes(fn, 100) -- read 100 bytes at a time
    whole_file &= chunk        -- chunk might be empty, that's ok
    if length(chunk) < 100 then
        exit
    end if
end while

close(fn)
? length(whole_file)  -- should match DIR size of "temp"

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#getc\">getc</a>,
<a href=\"lib_file.htm#gets\">gets</a>"
 >
</table>


<_routine name="get_key">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = get_key()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the key that was pressed by the user, without waiting.
 Return -1 if no key was pressed. Special
 codes are returned for the function keys, arrow keys etc. "
 >
<_2clist
  name="Comments:"
  description=
"The operating system can hold a small number of key-hits in its 
 keyboard buffer. get_key() will return the next one from the buffer, 
 or -1 if the buffer is empty.
<P>
Run the <font color=\"#5500FF\"><b>key.bat</b></font> program to see what
 key code is generated for each key on your keyboard."
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#wait_key\">wait_key</a>,
<a href=\"lib_file.htm#getc\">getc</a>"
 >
</table>

<_routine name="getc">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = getc(fn)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Get the next character (byte) from file or device fn. The character will
 have a value from 0 to 255. -1 is returned at end of file."
 >
<_2clist
  name="Comments:"
  description=
"File input using getc() is buffered, i.e. getc() does not actually
 go out to the disk for each character. Instead, a large block of
 characters will be read in at one time and returned to you one
 by one from a memory buffer.
 <p>
 When getc() reads from the keyboard, it will not see any characters until
 the user presses Enter.
 Note that the user can type
 control-Z, which the operating system treats as \"end of file\".
 -1 will be returned."
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#gets\">gets</a>,
<a href=\"lib_file.htm#get_key\">get_key</a>,
<a href=\"lib_file.htm#wait_key\">wait_key</a>,
<a href=\"lib_file.htm#open\">open</a>"
 >
</table>

<_routine name="gets">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> x = gets(fn)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Get the next sequence (one line, including '\n') of characters
 from file or device fn. The characters will have values from 0
 to 255. The atom -1 is returned on end of file."
 >
<_2clist
  name="Comments:"
  description=
"Because either a sequence or an atom (-1) might be returned, you
 should probably assign the result to a variable declared as
 object.
<P>
After reading a line of text from the keyboard, you should
 normally output a \n character, e.g. puts(1, '\n'), before
 printing something. Only on the last line of the screen does the
 operating system automatically scroll the screen and advance to
 the next line.
<P>
The last line in a file might not end with a new-line '\n'
 character.
<P>
On DOS/Windows when your program reads from the keyboard, the user can type
 control-Z, which the operating system treats as \"end of file\".
 -1 will be returned.
<p>
The official line-terminator on DOS/Windows is \r\n, though \n
by itself will also work OK with gets(). In either case 
a single \n will appear at the end of the returned line. 
On Linux and FreeBSD the official line-terminator is simply '\n'.

<P>
In SVGA modes, DOS might set the wrong cursor position, after a call to
 gets(0) to read the keyboard. You should set it yourself using
 <a href=\"lib_grap.htm#position\">position()</a>."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
sequence buffer
object line
integer fn

-- read a text file into a sequence
fn = open("myfile.txt", "r")
if fn = -1 then
    puts(1, "Couldn't open myfile.txt\n")
    abort(1)
end if

buffer = {}
while 1 do
    line = gets(fn)
    if atom(line) then
        exit   -- -1 is returned at end of file
    end if
    buffer = append(buffer, line)
end while

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
object line

puts(1, "What is your name?\n")
line = gets(0)  -- read standard input (keyboard)
line = line[1..length(line)-1] -- get rid of \n character at end
puts(1, '\n')   -- necessary
puts(1, line & " is a nice name.\n")

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#getc\">getc</a>,
<a href=\"lib_file.htm#puts\">puts</a>,
<a href=\"lib_file.htm#open\">open</a>"
 >
</table>


<_routine name="lock_file">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 i1 = lock_file(fn, i2, s)
</font>"
 >
 <_2clist
  name="Description:"
  description="When multiple processes can simultaneously access a
file, some kind of locking mechanism may be needed to avoid mangling
the contents of the file, or causing erroneous data to be read from the file.
<P>lock_file() attempts to place a lock on an open file, fn, to stop 
other processes from using the file while your program is reading it 
or writing it. Under Linux/FreeBSD, there are two types of locks that 
you can request using the i2 parameter. (Under DOS32 and WIN32 the i2 parameter
is ignored, but should be an integer.)
Ask for a <b><i>shared</b></i> lock when you intend to read a file, and you want to 
temporarily block other processes from writing it. Ask for an 
<b><i>exclusive</i></b> lock 
when you intend to write to a file and you want to temporarily block other 
processes from reading or writing it. It's ok for many processes to 
simultaneously have shared locks on the same file, but only one process 
can have an exclusive lock, and that can happen only when no other 
process has any kind of lock on the file. file.e contains the following
declaration:"
>
<_eucode>
global constant LOCK_SHARED = 1, 
		LOCK_EXCLUSIVE = 2
</_eucode>

<_2clist
 name=""
 description="On DOS32 and WIN32 you can lock a specified 
 portion of a file using the s parameter. s is a sequence of the 
 form: {first_byte, last_byte}.
 It indicates the first byte and last byte in the file,
 that the lock applies to. Specify the empty sequence {}, 
 if you want to lock the whole file. In the current release for Linux/FreeBSD,
 locks always apply to the whole file, and you should specify {}
 for this parameter.
<p>
If it is successful in obtaining the desired lock, lock_file() will 
return 1. If unsuccessful, it will return 0. lock_file() does not wait
for other processes to relinquish their locks. You may have to call 
it repeatedly, before the lock request is granted."
 >

<_2clist
  name="Comments:"
  description="On Linux/FreeBSD, these locks are called advisory locks, which
    means they aren't enforced by the operating system. It is up to the
    processes that use a particular file to cooperate with each other.
    A process can access a file without first obtaining a lock on it.
    On WIN32 and DOS32, locks are enforced by the operating system."
 >
<_2clist
  name=""
  description="On DOS32, lock_file() is more useful when
   file sharing is enabled. It will typically return 0 (unsuccessful) 
   under plain MS-DOS, outside of Windows."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
include misc.e
include file.e
integer v
atom t
v = open("visitor_log", "a")  -- open for append
t = time()
while not lock_file(v, LOCK_EXCLUSIVE, {}) do
    if time() > t + 60 then
        puts(1, "One minute already ... I can't wait forever!\n")
        abort(1)
    end if
    sleep(5) -- let other processes run
end while
puts(v, "Yet another visitor\n")
unlock_file(v, {})
close(v)
 </_eucode>

 <_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#unlock_file\">unlock_file</a>,
<a href=\"lib_file.htm#flush\">flush</a>,
<a href=\"lib_os.htm#sleep\">sleep</a>"
 >
</table>

<_routine name="open">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> fn = open(st1, st2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Open a file or device, to get the file number. -1 is returned if
 the open fails. st1 is the path name of the file or device. st2 is
 the mode in which the file is to be opened. Possible modes are:<P>
\"r\" - open text file for reading<BR>
 \"rb\" - open binary file for reading<BR>
 \"w\" - create text file for writing<BR>
 \"wb\" - create binary file for writing<BR>
 \"u\" - open text file for update (reading and writing)<BR>
 \"ub\" - open binary file for update<BR>
 \"a\" - open text file for appending<BR>
 \"ab\" - open binary file for appending<BR>
<P>
Files opened for read or update must already exist. Files opened
 for write or append will be created if necessary. A file opened
 for write will be set to 0 bytes. Output to a file opened for
 append will start at the end of file.
<P>
On DOS or Windows, output to <b>text files</b> will have 
carriage-return characters
 automatically added before linefeed characters. On input, these
 carriage-return characters are removed. A control-Z character
 (ASCII 26) will signal an immediate end of file. Note: on some versions
 of DOS, a control-Z typed by the user might cause standard input 
 to permanently appear to be at the end-of-file, until the DOS window is closed.
<P>
I/O to <b>binary files</b> is not modified in any way. Any byte values
 from 0 to 255 can be read or written. On Linux and FreeBSD, all files
 are binary files, so \"r\" mode and \"rb\" mode are equivalent,
 as are \"w\" and \"wb\", \"u\" and \"ub\", and \"a\" and \"ab\".
<P>
Some typical devices that you can open on DOS or Windows are:
<P>
 \"CON\" - the console (screen)<BR>
 \"AUX\" - the serial auxiliary port<BR>
 \"COM1\" - serial port 1<BR>
 \"COM2\" - serial port 2<BR>
 \"PRN\" - the printer on the parallel port<BR>
 \"NUL\" - a non-existent device that accepts and discards output<BR>
<p>
Currently, files up to 2 Gb in size can be handled. Beyond that, 
some file operations may not work correctly. This limit will likely 
be increased in the future.
 "
 >
<_2clist
  name="Comments:"
  description=
"<font color=\"#CC3366\"><b>DOS32:</b></font>
 When running under Windows 95 or later, you can open any existing file
 that has a long file or directory name in its path (i.e. greater
 than the standard DOS 8.3 format) using any open mode - read,
 write etc. However, if you try to create a <b><i>new</i></b> file (open with
 \"w\" or \"a\" and the file does not already exist) then the name
 will be truncated if necessary to an 8.3 style name. We hope to
 support creation of new long-filename files in a future release.
 <p>
 <font color=\"#CC3366\"><b>WIN32, Linux and FreeBSD:</b></font>
 Long filenames are fully supported for reading and writing and creating.
 <p>
 <font color=\"#CC3366\"><b>DOS32:</b></font>
 Be careful not to use the special device names in a file name, even
 if you add an extension. e.g. CON.TXT, CON.DAT, CON.JPG etc. all refer to 
 the CON device, not a file."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
integer file_num, file_num95
sequence first_line
constant ERROR = 2

file_num = open("myfile", "r")
if file_num = -1 then
    puts(ERROR, "couldn't open myfile\n")
else
    first_line = gets(file_num)
end if

file_num = open("PRN", "w") -- open printer for output

-- on Windows 95:
file_num95 = open("bigdirectoryname\\verylongfilename.abcdefg",
                  "r")
if file_num95 != -1 then
    puts(1, "it worked!\n")
end if

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#close\">close</a>,
               <a href=\"lib_file.htm#lock_file\">lock_file</a>"
 >
</table>

<_routine name="PATHSEP">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include file.e<BR>
PATHSEP
</font>"
 >
 <_2clist
  name="Description:"
  description=
"The platform's path separator character."
 >
<_2clist
  name="Comments:"
  description=
"When on DOS32 or WIN32, '\\'. When on LINUX or FREEBSD, '/'"
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
x = PATHSEP
-- x is '/' or '\\' depending on platform
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#pathinfo\">pathinfo</a>"
 >

</table>




<_routine name="pathinfo">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include file.e<BR>
s2 = pathinfo(s1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Parse the fully qualified pathname (s1) and return a sequence containing directory name,
file name + file extension, file name and file extension."
 >
<_2clist
  name="Comments:"
  description=
"The host operating system path separator is used."
>

<_2clist
  name="Example 1:"
  description="DOS32/WIN32"
 >
<_eucode>
info = pathinfo("C:\\euphoria\\docs\\readme.txt")
-- info is {"C:\\euphoria\\docs", "readme.txt", "readme", "txt"}
</_eucode>

<_2clist
  name="Example 2:"
  description="Linux/FreeBSD"
 >
<_eucode>
info = pathinfo("/opt/euphoria/docs/readme.txt")
-- info is {"/opt/euphoria/docs", "readme.txt", "readme", "txt"}
</_eucode>

<_2clist
  name="Example 3:"
  description="No extension"
 >
<_eucode>
info = pathinfo("/opt/euphoria/docs/readme")
-- info is {"/opt/euphoria/docs", "readme", "readme", ""}
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#dirname\">dirname</a>,
<a href=\"lib_file.htm#filename\">filename</a>,
<a href=\"lib_file.htm#fileext\">fileext</a>"
>

</table>



<_routine name="position">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> position(i1, i2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Set the cursor to line i1, column i2, where the top left corner
 of the screen is line 1, column 1. The next character displayed
 on the screen will be printed at this location. position() will
 report an error if the location is off the screen."
 >
<_2clist
  name="Comments:"
  description=
"position() works in both <font color=\"#CC3366\">text and pixel-graphics
 modes</font>.
<p>
The coordinate system for displaying text is different from the one for
 displaying pixels. Pixels are displayed such that the top-left is (x=0,y=0)
 and the first coordinate controls the horizontal, left-right location.
 In <font color=\"#CC3366\">pixel-graphics modes</font>
 you can display both text and pixels. position() only sets the
 line and column for the text that you display, not the pixels
 that you plot. There is no corresponding routine for setting
 the next pixel position."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
position(2,1)
-- the cursor moves to the beginning of the second line from
-- the top

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_grap.htm#get_position\">get_position</a>,
<a href=\"lib_file.htm#puts\">puts</a>,
<a href=\"lib_file.htm#print\">print</a>,
<a href=\"lib_file.htm#printf\">printf</a>"
 >
</table>


<_routine name="pretty_print">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include misc.e<br>
  pretty_print(fn, x, s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Print, to file or device fn, an object x, using braces { , , , },
 indentation, and multiple lines to show the structure. 
 
 <p>Several options
 may be supplied in s to control the presentation.
 Pass {} to select the defaults, or set options as below:<br>
   [1] display ASCII characters:<br>
       * 0: never<br>
       * 1: alongside any integers in the printable ASCII range 32..127 (default)<br>
       * 2: like 1, plus display as \"string\" when all integers of a sequence
            are in the printable ASCII range<br>
       * 3: like 2, but show *only* quoted characters, not numbers,
            for any integers in the printable ASCII range, as well as 
            the whitespace characters: \t \r \n<br>
   [2] amount to indent for each level of sequence nesting - default: 2<br>
   [3] column we are starting at - default: 1<br>
   [4] approximate column to wrap at - default: 78<br>
   [5] format to use for integers - default: \"%d\"<br>
   [6] format to use for floating-point numbers - default: \"%.10g\"<br>
   [7] minimum value for printable ASCII - default 32<br>
   [8] maximum value for printable ASCII - default 127<br>
   [9] maximum number of lines to output
 <p>
 If the length of s is less than 8, unspecified options at 
 the end of the sequence will keep the default values.    
 e.g. {0, 5} will choose \"never display ASCII\", 
 plus 5-character indentation, with defaults for everything else."
 >
<_2clist
  name="Comments:"
  description=
"The display will start at the current cursor position. Normally you will
want to call pretty_print() when the cursor is in column 1 (after printing
a \n character). If you want to start in a different column, you should
call position() and specify a value for option [3]. This will ensure 
that the first and last braces in a sequence line up vertically.
<p> When specifying the format to use for integers and floating-point numbers,
you can add some decoration, e.g. \"(%d)\" or \"$ %.2f\""
>

<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
pretty_print(1, "ABC", {})    

{65'A',66'B',67'C'}
 </_eucode>

<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
pretty_print(1, {{1,2,3}, {4,5,6}}, {})  
          
{
  {1,2,3},
  {4,5,6}
}
 </_eucode>

<_2clist
  name="Example 3:"
  description=""
 >
<_eucode>
pretty_print(1, {"Euphoria", "Programming", "Language"}, {2})  

{
  "Euphoria",
  "Programming",
  "Language"
}
 
 </_eucode>

<_2clist
  name="Example 4:"
  description=""
 >
<_eucode>
puts(1, "word_list = ") -- moves cursor to column 13
pretty_print(1, 
             {{"Euphoria", 8, 5.3}, 
              {"Programming", 11, -2.9}, 
              {"Language", 8, 9.8}}, 
             {2, 4, 13, 78, "%03d", "%.3f"}) -- first 6 of 8 options

word_list = {
                {
                    "Euphoria",
                    008,
                    5.300
                },
                {
                    "Programming",
                    011,
                    -2.900
                },
                {
                    "Language",
                    008,
                    9.800
                }
            }

</_eucode>


<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#?\">?</a>,
<a href=\"lib_file.htm#print\">print</a>,
<a href=\"lib_file.htm#puts\">puts</a>,
<a href=\"lib_file.htm#printf\">printf</a>"
 >
</table>


<_routine name="print">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> print(fn, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Print, to file or device fn, an object x with braces { , , , }
 to show the structure."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
print(1, "ABC")  -- output is:  {65, 66, 67}
puts(1, "ABC")   -- output is:  ABC

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
print(1, repeat({10,20}, 3))
-- output is: {{10,20},{10,20},{10,20}}

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#?\">?</a>,
<a href=\"lib_file.htm#pretty_print\">pretty_print</a>,
<a href=\"lib_file.htm#puts\">puts</a>,
<a href=\"lib_file.htm#printf\">printf</a>,
<a href=\"lib_file.htm#get\">get</a>"
 >
</table>



<_routine name="printf">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> printf(fn, st, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Print x, to file or device fn, using format string st. 
 If x is a sequence, then format specifiers from st are matched with 
 corresponding elements of x. If x is an atom, then normally st will 
 contain just one format specifier and it will be applied to x,
 however if st contains multiple format specifiers, each one will 
 be applied to the same value x. 
 Thus printf() always takes exactly 3 arguments. Only the length of
 the last argument, containing the values to be printed, will
 vary. The basic format specifiers are:<P>
 %d - print an atom as a decimal integer<BR>
 %x - print an atom as a hexadecimal integer. Negative numbers
      are printed in two's complement, so -1 will print as FFFFFFFF<BR>
 %o - print an atom as an octal integer<BR>
 %s - print a sequence as a string of characters, or print an atom as
 a single character<BR>
 %e - print an atom as a floating-point number with exponential
 notation<BR>
 %f - print an atom as a floating-point number with a decimal
 point but no exponent<BR>
 %g - print an atom as a floating-point number using 
  whichever format seems appropriate, given the magnitude of the number<BR>
 %% - print the '%' character itself<BR>
<P>
Field widths can be added to the basic formats, e.g. %5d, %8.2f,
 %10.4s. The number before the decimal point is the minimum field
 width to be used. The number after the decimal point is the
 precision to be used.
<P>
If the field width is negative, e.g. %-5d then the value will be
 left-justified within the field. Normally it will be right-justified.
 If the field width starts with a leading 0, e.g. %08d
 then leading zeros will be supplied to fill up the field. If the
 field width starts with a '+' e.g. %+7d then a plus sign will be
 printed for positive values."
 >
<_2clist
  name="Comments:"
  description=
"Watch out for the following common mistake:"
>
<_eucode>
    name="John Smith"
    printf(1, "%s", name)     -- error!
</_eucode>

<_2clist
  name=""
  description=
"This will print only the first character, J, of name, as each element
 of name is taken to be a separate value to be formatted. You must
 say this instead:"
 >
<_eucode>
    name="John Smith"
    printf(1, "%s", {name})   -- correct
</_eucode>

<_2clist
  name=""
  description=
"Now, the third argument of printf() is a one-element sequence
 containing the item to be formatted."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
rate = 7.875
printf(myfile, "The interest rate is: %8.2f\n", rate)

      The interest rate is:     7.88

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
name="John Smith"
score=97
printf(1, "%15s, %5d\n", {name, score})

      John Smith,    97

 </_eucode>

<_2clist
  name="Example 3:"
  description=""
 >
<_eucode>
printf(1, "%-10.4s $ %s", {"ABCDEFGHIJKLMNOP", "XXX"})

      ABCD       $ XXX

 </_eucode>

<_2clist
  name="Example 4:"
  description=""
 >
<_eucode>
printf(1, "%d  %e  %f  %g", 7.75) -- same value in different formats

      7  7.750000e+000  7.750000  7.75

 </_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#sprintf\">sprintf</a>,
<a href=\"lib_file.htm#puts\">puts</a>,
<a href=\"lib_file.htm#open\">open</a>"
 >
</table>

<_routine name="prompt_number">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include get.e<BR>
 a = prompt_number(st, s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Prompt the user to enter a number. st is a string of text that will be
 displayed on the screen. s is a sequence of two values {lower, upper}
 which determine the range of values that the user may enter. If the user
 enters a number that is less than lower or greater than upper, he will
 be prompted again. s can be <a href=\"refman_2.htm#empty_seq\">empty</a>,
 {}, if there are no restrictions."
 >

<_2clist
  name="Comments:"
  description="If this routine is too simple for your needs, feel free to
     copy it and make your own more specialized version."
>

<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
age = prompt_number("What is your age? ", {0, 150})

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
t = prompt_number("Enter a temperature in Celcius:\n", {})

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#get\">get</a>,
<a href=\"lib_file.htm#prompt_string\">prompt_string</a>"
 >
</table>


<_routine name="prompt_string">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include get.e<BR>
 s = prompt_string(st)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Prompt the user to enter a string of text. st is a string that
 will be displayed on the screen. The string that the user types
 will be returned as a sequence, minus any new-line character. "
 >
<_2clist
  name="Comments:"
  description=
" If the user happens to type control-Z (indicates end-of-file), 
  \"\" will be returned.
 "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
name = prompt_string("What is your name? ")

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#gets\">gets</a>,
<a href=\"lib_file.htm#prompt_number\">prompt_number</a>"
 >
</table>


<_routine name="puts">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> puts(fn, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Output, to file or device fn, a single byte (atom) or sequence
 of bytes. The low order 8-bits of each value is actually sent
 out. If fn is the screen you will see text characters displayed."
 >
<_2clist
  name="Comments:"
  description=
"When you output a sequence of bytes it must not have any (sub)sequences
 within it. It must be a
 <font color=\"#993333\"><b>sequence of atoms</b></font> only.
 (Typically a string of ASCII codes).
 <p>
 Avoid outputting 0's to the screen or to standard output. 
 Your output might get truncated.
 <p>
 Remember that if the output file was opened in text mode, DOS and Windows
 will change \n (10) to \r\n (13 10). 
 Open the file in binary mode if this is not what you want."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
puts(SCREEN, "Enter your first name: ")

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
puts(output, 'A')  -- the single byte 65 will be sent to output

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#printf\">printf</a>,
<a href=\"lib_file.htm#gets\">gets</a>,
<a href=\"lib_file.htm#open\">open</a>"
 >
</table>

<_routine name="read_file">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include file.e<BR>
s2 = read_file(s1)<BR>
or<BR>
s2 = read_file(i1)<BR>
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Read the contents of either file named s1 or an open file handle i1. Returns the
contents as 1 sequence."
 >

<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
data = read_file("myfile.txt")
-- data contains the entire contents of 'myfile.txt'
</_eucode>

<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
fh = open("myfile.txt", "r")
data = read_file(fh)
close(fh)

-- data contains the entire contents of 'myfile.txt'
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#write_file\">write_file</a>,
<a href=\"lib_file.htm#read_lines\">read_lines</a>,
<a href=\"lib_file.htm#open\">open</a>"
 >
</table>


<_routine name="read_lines">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include file.e<BR>
s2 = read_lines(s1)<BR>
or<BR>
s2 = read_lines(i1)<BR>
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Read the contents of either file named s1 or an open file handle i1 as a sequence
of lines."
 >

<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
data = read_lines("myfile.txt")
-- data contains the entire contents of 'myfile.txt', 1 sequence per line:
-- {"Line 1", "Line 2", "Line 3"}
</_eucode>

<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
fh = open("myfile.txt", "r")
data = read_lines(fh)
close(fh)

-- data contains the entire contents of 'myfile.txt', 1 sequence per line:
-- {"Line 1", "Line 2", "Line 3"}
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#write_lines\">write_lines</a>,
<a href=\"lib_file.htm#read_file\">read_file</a>,
<a href=\"lib_file.htm#open\">open</a>"
 >
</table>


<_routine name="seek">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 i1 = seek(fn, a1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Seek (move) to any byte position in the file fn or to the end of
 file if a1 is -1. For each open file there is a current byte
 position that is updated as a result of I/O operations on the
 file. The initial file position is 0 for files opened for read,
 write or update. The initial position is the end of file for
 files opened for append. The value returned by seek() is 0 if the
 seek was successful, and non-zero if it was unsuccessful. It is
 possible to seek past the end of a file. If you seek past the end
 of the file, and write some data, undefined bytes will be inserted 
 into the gap between the original end of file and your new data."
 >

<_2clist
  name="Comments:"
  description=
"After seeking and reading (writing) a series of bytes, you may need to 
 call seek() explicitly before you switch to writing (reading) bytes, 
 even though the file position should already be what you want.
 <P>
 This function is normally used with files opened in binary mode.
 In text mode, DOS converts CR LF to LF on input, and LF to CR LF
 on output, which can cause great confusion when you are 
 trying to count bytes."
>

<_2clist
  name="Example:"
  description=""
 >
<_eucode>
include file.e

integer fn
fn = open("mydata", "rb")
-- read and display first line of file 3 times:
for i = 1 to 3 do
    puts(1, gets(fn))
    if seek(fn, 0) then
        puts(1, "rewind failed!\n")
    end if
end for

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#where\">where</a>,
<a href=\"lib_file.htm#open\">open</a>"
 >
</table>

<_routine name="sprint">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include misc.e<BR>
 s = sprint(x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"The representation of x as a string of characters is returned.
 This is exactly the same as <b>print(fn, x)</b>, except that the output
 is returned as a sequence of characters, rather than being
 sent to a file or device. x can be any Euphoria object."
 >
<_2clist
  name="Comments:"
  description=
"The atoms contained within x will be displayed to a maximum of
 10 significant digits, just as with print()."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
s = sprint(12345)
-- s is "12345"

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
s = sprint({10,20,30}+5)
-- s is "{15,25,35}"

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#print\">print</a>,
<a href=\"lib_file.htm#sprintf\">sprintf</a>,
<a href=\"lib_file.htm#value\">value</a>,
<a href=\"lib_file.htm#get\">get</a>"
 >
</table>


<_routine name="sprintf">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> s = sprintf(st, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"This is exactly the same as <b>printf()</b>, except that the output
 is returned as a sequence of characters, rather than being
 sent to a file or device. st is a format string, x is the
 value or sequence of values to be formatted. <b>printf(fn, st, x)</b>
 is equivalent to <b>puts(fn, sprintf(st, x))</b>."
 >
<_2clist
  name="Comments:"
  description=
"Some typical uses of sprintf() are:
<P>
 1. Converting numbers to strings.<BR>
 2. Creating strings to pass to system().<BR>
 3. Creating formatted error messages that can be passed to
    a common error message handler."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
s = sprintf("%08d", 12345)
-- s is "00012345"

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#printf\">printf</a>,
<a href=\"lib_file.htm#value\">value</a>,
<a href=\"lib_file.htm#sprint\">sprint</a>,
<a href=\"lib_file.htm#get\">get</a>,
<a href=\"lib_os.htm#system\">system</a>"
 >
</table>

<_routine name="unlock_file">
<table border=0 cellspacing=2 cellpadding=2>

<_2clist
 name="Syntax:"
 description="<font face=\"Arial, Helvetica\"> include file.e<BR>
 unlock_file(fn, s)</font>"
>
<_2clist
 name="Description:"
 description="Unlock an open file fn, or a portion of file fn. 
 You must have previously locked the file using lock_file(). 
 On DOS32 and WIN32 you can unlock a range of bytes within a file by
 specifying the s parameter as {first_byte, last_byte}.
 The same range of bytes must have been locked by a previous call 
 to lock_file(). On Linux/FreeBSD
 you can currently only lock or unlock an entire file. The s
 parameter should be {} when you want to unlock an entire file. 
 On Linux/FreeBSD, s must always be {}." 
>
<_2clist
  name="Comments:"
  description="
  You should unlock a file as soon as possible so other processes 
  can use it."
>  
<_2clist
 name=""
 description="Any files that you have 
  locked, will automatically be unlocked when your program terminates."
>
<_2clist
 name=""
 description="See lock_file() for further comments and an example."
>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#lock_file\">lock_file</a>"
>
</table>


<_routine name="value">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include get.e<BR>
 s = value(st)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Read the string representation of a Euphoria object, and computes
 the value of that object. A 2 element sequence,
 <b>{error_status, value}</b> is
  actually returned, where error_status can be one of:"
 >
<_eucode>
    GET_SUCCESS -- a valid object representation was found
    GET_EOF     -- end of string reached too soon
    GET_FAIL    -- syntax is wrong
    GET_NOTHING -- end of string reached without any value being even partially read
</_eucode>

<_2clist
  name="Comments:"
  description=
"This works the same as <b>get()</b>, but it reads from a string
 that you supply, rather than from a file or device.
 <p>
 After reading one valid representation of a Euphoria object, value() will
 stop reading and ignore any additional characters in the string. For
 example, \"36\" and \"36P\" will both give you {GET_SUCCESS, 36}.". After reading an
 invalid representation, the value field is undefined (usually 0).
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
s = value("12345"}
-- s is {GET_SUCCESS, 12345}

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
s = value("{0, 1, -99.9}")
-- s is {GET_SUCCESS, {0, 1, -99.9}}

 </_eucode>
<_2clist
  name="Example 3:"
  description=""
 >
<_eucode>
s = value("+++")
-- s is {GET_FAIL, 0} -- '+' is correct, but "++" is not

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#get\">get</a>,
<a href=\"lib_file.htm#sprintf\">sprintf</a>,
<a href=\"lib_file.htm#print\">print</a>"
<a href=\"lib_u_z.htm#value_from\">value_from</a>"
 >
</table>

<_routine name="value_from">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include get.e<BR>
 s = value_from(st, i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Read the string representation of a Euphoria object, and computes
 the value of that object. The string which is read is the tail of st which starts at index i.
 A 4-element sequence,
 <b>{error_status, value, total characters read, number of leading whitespace}</b> is
  actually returned, where error_status can be one of:"
 >
<_eucode>
    GET_SUCCESS -- a valid object representation was found
    GET_EOF     -- end of string reached too soon
    GET_FAIL    -- syntax is wrong
    GET_NOTHING -- end of string reached without any value being even partially read
</_eucode>

<_2clist
  name="Comments:"
  description=
"This works the same as <b>value()</b>, but
<ul>
<li> reading starts where you instruct the routine to, instead of starting from the beginning of the 
string. You can always pass value() a slice to achieve a similar effect.
<li> it returns extra information value() doesn't.
</ul>
 <p>
 After reading one valid representation of a Euphoria object, value_from() will
 stop reading and ignore any additional characters in the string. For
 example, \"36\" and \"36P\" will both give you {GET_SUCCESS, 36, 2, 0}.". After reading an
 invalid representation, the value field is undefined (usually 0), and the third field is the
 1 based index of the character the reading of which caused an error.
 <p>
 If the representation was valid, you can use the third returned element to pick up where you 
 left, like get() does in a file. There is no corresponding get_from(), at least because 
 calling where() before and after get() will tell you how many characters were read.
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
s = value_from("  12345"} -- notice the two leading spaces
-- s is {GET_SUCCESS, 12345, 7, 2}

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
s = value_from("{0, 1, -99.9}")
-- s is {GET_SUCCESS, {0, 1, -99.9}, 13, 0}

 </_eucode>
<_2clist
  name="Example 3:"
  description=""
 >
<_eucode>
s = value_from("+++")
-- s is {GET_FAIL, 0, 2, 0} -- error condition triggered on reading the 2nd character

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#get\">get</a>,
<a href=\"lib_file.htm#sprintf\">sprintf</a>,
<a href=\"lib_file.htm#print\">print</a>"
<a href=\"lib_file.htm#value\">value</a>"
 >
</table>

<_routine name="wait_key">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include get.e<BR>
 i = wait_key()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the next key pressed by the user. Don't return until
 a key is pressed."
 >
<_2clist
  name="Comments:"
  description=
"You could achieve the same result using <b>get_key()</b> as follows:"
>
<_eucode>
    while 1 do
        k = get_key()
        if k != -1 then
            exit
        end if
    end while
</_eucode>
<_2clist
  name=""
  description=
"However, on multi-tasking systems like
 <font color=\"#CC3366\"><b>Windows</b></font>
 or <font color=\"#CC3366\"><b>Linux/FreeBSD</b></font>, this \"busy waiting\"
 would tend to slow the system down.
 wait_key() lets the operating system do other useful work
 while your program is waiting for the user to press a key.
<P>
You could also use <b>getc(0)</b>, assuming file number 0 was input
 from the keyboard, except that you wouldn't pick up the special
 codes for function keys, arrow keys etc."
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#get_key\">get_key</a>,
<a href=\"lib_file.htm#getc\">getc</a>"
 >
</table>


<_routine name="walk_dir">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 i1 = walk_dir(st, i2, i3)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"This routine will \"walk\" through a directory with path name
 given by st. i2 is the <font color=\"#993333\"><b>routine id</b></font>
 of a routine that you supply.
 walk_dir() will call your routine once for each file and
 subdirectory in st. If i3 is non-zero (TRUE), then the
 subdirectories in st will be walked through recursively.<P>
The routine that you supply should accept the path name and 
 <a href=\"lib_c_d.htm#dir_entry\">dir() entry</a> for each file and
 subdirectory. It should return 0 to keep going, or
 non-zero to stop walk_dir(). walk_dir() returns 0 when it runs successfully
 to completion. It returns -1 if it can't open the path name st. Otherwise,
 it returns whatever non-zero value your routine returned when it chose
 to stop walk_dir prematurely."
 >
<_2clist
  name="Comments:"
  description=
"This mechanism allows you to write a simple function that handles
 one file at a time, while walk_dir() handles the
 process of walking through all the files and subdirectories.
<P>
By default, the files and subdirectories will be visited in
 alphabetical order. To use a different order, set the global
 integer <b>my_dir</b> to the <font color=\"#993333\"><b>routine id</b></font>
 of your own <i>modified</i> dir()
 function that sorts the directory entries differently. See the default
 dir() function in <font color=\"#5500FF\"><b>file.e</b></font>.
 <p>
 The path that you supply to walk_dir() must not contain wildcards (* or ?).
 Only a single directory (and its subdirectories) can be searched at one
 time."
 >

<_2clist
  name="Example:"
  description=""
 >
<_eucode>
function look_at(sequence path_name, sequence entry)
-- this function accepts two sequences as arguments
    printf(1, "%s\\%s: %d\n",
           {path_name, entry[D_NAME], entry[D_SIZE]})
    return 0 -- keep going
end function

exit_code = walk_dir("C:\\MYFILES", routine_id("look_at"), TRUE)

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>euphoria\bin\search.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#dir\">dir</a>,
<a href=\"lib_file.htm#current_dir\">current_dir</a>"
 >
</table>


<_routine name="where">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>
 a1 = where(fn)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  This function returns the current byte position in the file fn.
 This position is updated by reads, writes and seeks on the file.
 It is the place in the file where the next byte will be read
 from, or written to. "
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#seek\">seek</a>,
<a href=\"lib_file.htm#open\">open</a>"
 >
</table>

<_routine name="write_file">
<table border=0 cellspacing=2 cellpadding=2>
 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include file.e<BR>
i = write_file(x, s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Write s to file named x or file handle x. Returns 1 on success, 0 on failure."
 >
<_2clist
  name="Comments:"
  description=
"If x is an atom, it is assumed to be an open file handle. If x is a sequence, it is assumed
to be a filename.<P>
When x is a file handle, the file is not closed after writing is finished. When x is a
file name, it is opened, written to and then closed."
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if write_file("data.txt", "This is important data\nGoodybe") = 0 then
    puts(1, "Failed to write data\n")
end if
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#read_file\">read_file</a>,
<a href=\"lib_file.htm#read_lines\">read_lines</a>,
<a href=\"lib_file.htm#write_lines\">write_lines</a>"
 >
</table>


<_routine name="write_lines">
<table border=0 cellspacing=2 cellpadding=2>
 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include file.e<BR>
i = write_lines(x, s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Write lines contained in s to file named x or file handle x. Returns 1 on success, 0 on failure."
 >
<_2clist
  name="Comments:"
  description=
"If x is an atom, it is assumed to be an open file handle. If x is a sequence, it is assumed
to be a filename.<P>
When x is a file handle, the file is not closed after writing is finished. When x is a
file name, it is opened, written to and then closed."
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if write_lines("data.txt", {"This is important data", "Goodybe"}, NL) = 0 then
    puts(1, "Failed to write data\n")
end if
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_file.htm#read_file\">read_file</a>,
<a href=\"lib_file.htm#read_lines\">read_lines</a>,
<a href=\"lib_file.htm#write_file\">write_file</a>,
<a href=\"lib_file.htm#NL\">NL</a>"
 >
</table>


</body>
</html>

