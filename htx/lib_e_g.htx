<_init_comment>
<html>
<head><title>Euphoria Reference Manual Part II - Section 3</title>
<_css>
</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">
<br>


<_routine name="ellipse">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include graphics.e<BR>
 ellipse(i1, i2, s1, s2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Draw an ellipse with color i1 on a
 <font color=\"#CC3366\">pixel-graphics</font> screen. The
 ellipse will neatly fit inside the rectangle defined by diagonal
 points s1 {x1, y1} and s2 {x2, y2}. If the rectangle is a square
 then the ellipse will be a circle. Fill the ellipse when i2 is 1.
 Don't fill when i2 is 0. "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
ellipse(MAGENTA, 0, {10, 10}, {20, 20})

-- This would make a magenta colored circle just fitting
-- inside the square: 
--        {10, 10}, {10, 20}, {20, 20}, {20, 10}.

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\dos32\sb.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#polygon\">polygon</a>,
<a href=\"lib_c_d.htm#draw_line\">draw_line</a>"
 >
</table>


<_routine name="equal">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = equal(x1, x2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Compare two Euphoria objects to see if they are the same.
 Return 1 (true) if they are the same. Return 0 (false) if
 they are different. "
 >
<_2clist
  name="Comments:"
  description=
" This is equivalent to the expression: <b>compare(x1, x2) = 0</b>
 <p>This routine, like most other built-in routines, is very fast. 
 It does not have any subroutine call overhead."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
if equal(PI, 3.14) then
    puts(1, "give me a better value for PI!\n")
end if

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
if equal(name, "George") or equal(name, "GEORGE") then
    puts(1, "name is George\n")
end if

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_c_d.htm#compare\">compare</a>,
               <a href=\"refman_2.htm#23\">equals operator (=)</a>"
 >
</table>

<_routine name="filename">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include file.e<BR>
s2 = filename(s1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the file name portion of a fully qualified filename."
 >
<_2clist
  name="Comments:"
  description=
"The host operating system path separator is used."
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
fname = filename("/opt/euphoria/docs/readme.txt")
-- fname is "readme.txt"
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#pathinfo\">pathinfo</a>,
<a href=\"lib_c_d.htm#dirname\">dirname</a>,
<a href=\"lib_e_g.htm#fileext\">fileext</a>"
 >
</table>

<_routine name="fileext">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include file.e<BR>
s2 = fileext(s1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the file extension of a fully qualified filename."
 >
<_2clist
  name="Comments:"
  description=
"The host operating system path separator is used."
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
fname = filename("/opt/euphoria/docs/readme.txt")
-- fname is "txt"
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#pathinfo\">pathinfo</a>,
<a href=\"lib_c_d.htm#dirname\">dirname</a>,
<a href=\"lib_e_g.htm#filename\">filename</a>"
 >
</table>


<_routine name="find">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = find(x, s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Find x as an element of s. If successful, return the index
 of the first element of s that matches. If unsuccessful
 return 0. "
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
location = find(11, {5, 8, 11, 2, 3})
-- location is set to 3

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
names = {"fred", "rob", "george", "mary", ""}
location = find("mary", names)
-- location is set to 4

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#find_from\">find_from</a>,
  <a href=\"lib_h_o.htm#match\">match</a>,
  <a href=\"lib_h_o.htm#match_from\">match_from</a>,
<a href=\"lib_c_d.htm#compare\">compare</a>"
 >
</table>

<_routine name="find_from">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i1 = find_from(x, s, i2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Find x as an element of s. Start the search at index i2. If successful, 
 return the index of the first element of s that matches. If unsuccessful
 return 0. i2 may have any value from 1 to the length of s plus 1. 
 (Analogous to the first index of a slice of s)."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
location = find_from(11, {11, 8, 11, 2, 3}, 2)
-- location is set to 3

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
names = {"mary", "rob", "george", "mary", ""}
location = find_from("mary", names, 3)
-- location is set to 4

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#find\">find</a>,
  <a href=\"lib_h_o.htm#match\">match</a>,
  <a href=\"lib_h_o.htm#match_from\">match_from</a>,
<a href=\"lib_c_d.htm#compare\">compare</a>"
 >
</table>


<_routine name="findany">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include sequence.e<BR>
i = findany(s1, s2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Find any element from s2 in s1 and return it's position or 0 if not found."
 >
<_2clist
  name="Comments:"
  description=
"This function may be applied to a string sequence or a complex sequence"
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
location = findany("John Doe", "aeiou")
-- location is 2
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#findany_from\">findany_from</a>"
 >
</table>


<_routine name="findany_from">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include sequence.e<BR>
i1 = findany_from(s1, s2, i2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Find any element from s2 in s1 starting at position i2 and return it's position or 0 if not found."
 >
<_2clist
  name="Comments:"
  description=
"This function may be applied to a string sequence or a complex sequence"
>
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
location = findany_from("John Smith", "aeiou", 3)
-- location is 8
</_eucode>

<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#findany\">findany</a>"
 >
</table>




<_routine name="float32_to_atom">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 a1 = float32_to_atom(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Convert a sequence of 4 bytes to an atom. These 4 bytes must
 contain an IEEE floating-point number in 32-bit format. "
 >
<_2clist
  name="Comments:"
  description=
" Any 32-bit IEEE floating-point number can be converted to an
 atom.
 "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
f = repeat(0, 4)
fn = open("numbers.dat", "rb") -- read binary
f[1] = getc(fn)
f[2] = getc(fn)
f[3] = getc(fn)
f[4] = getc(fn)
a = float32_to_atom(f)

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#float64_to_atom\">float64_to_atom</a>,
<a href=\"lib_a_b.htm#atom_to_float32\">atom_to_float32</a>"
 >
</table>


<_routine name="float64_to_atom">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 a1 = float64_to_atom(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Convert a sequence of 8 bytes to an atom. These 8 bytes must
 contain an IEEE floating-point number in 64-bit format. "
 >
<_2clist
  name="Comments:"
  description=
" Any 64-bit IEEE floating-point number can be converted to an
 atom.
 "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
f = repeat(0, 8)
fn = open("numbers.dat", "rb")  -- read binary
for i = 1 to 8 do
    f[i] = getc(fn)
end for
a = float64_to_atom(f)

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#float32_to_atom\">float32_to_atom</a>,
<a href=\"lib_a_b.htm#atom_to_float64\">atom_to_float64</a>"
 >
</table>


<_routine name="floor">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> x2 = floor(x1)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Return the greatest integer less than or equal to x1. (Round
 down to an integer.) "
 >
<_2clist
  name="Comments:"
  description=
" This function may be applied to an atom or to all elements
 of a sequence.
 "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
y = floor({0.5, -1.6, 9.99, 100})
-- y is {0, -2, 9, 100}

 </_eucode>

<_2clist
  name="See Also:"
  description="
<a href=\"lib_c_d.htm#ceil\">ceil</a>
<a href=\"lib_p_r.htm#remainder\">remainder</a>
<a href=\"lib_p_r.htm#round\">round</a>,
<a href=\"lib_p_r.htm#round_prec\">round_prec</a>"
 >

</table>


<_routine name="flush">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include file.e<BR>flush(fn)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"When you write data to a file, Euphoria normally stores the data
in a memory buffer until a large enough chunk of data has accumulated. 
This large chunk can then be written to disk very efficiently. 
Sometimes you may want to force, or flush, all data out immediately, 
even if the memory buffer is not full. To do this you must call flush(fn),
where fn is the file number of a file open for writing or appending."
 >
<_2clist
  name="Comments:"
  description=
"When a file is closed, (see close()), all buffered data is flushed out. 
 When a program terminates, all open files are flushed and closed 
 automatically. <P>Use flush() when another process may need to
 see all of the data written so far, but you aren't ready
  to close the file yet."
 >

<_2clist
  name="Example:"
  description=""
 >
<_eucode>
f = open("logfile", "w")
puts(f, "Record#1\n")
puts(1, "Press Enter when ready\n")

flush(f)  -- This forces "Record #1" into "logfile" on disk.
          -- Without this, "logfile" will appear to have 
          -- 0 characters when we stop for keyboard input.

s = gets(0) -- wait for keyboard input

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_c_d.htm#close\">close</a>,
               <a href=\"lib_h_o.htm#lock_file\">lock_file</a>"
 >
</table>


<_routine name="free">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 free(a)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Free up a previously allocated block of memory by specifying the
 address of the start of the block, i.e. the address that was
 returned by allocate(). "
 >
<_2clist
  name="Comments:"
  description=
" Use free() to recycle blocks of memory during execution. This
 will reduce the chance of running out of memory or getting into
 excessive virtual memory swapping to disk. Do not reference
 a block of memory that has been freed. When your program
 terminates, all allocated memory will be returned to the system.
<P>
Do not use free() to deallocate memory that was allocated using
 <a href=\"lib_a_b.htm#allocate_low\">allocate_low()</a>.
 Use free_low() for this purpose."
 >
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\callmach.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_a_b.htm#allocate\">allocate</a>,
<a href=\"lib_e_g.htm#free_low\">free_low</a>"
 >
</table>


<_routine name="free_console">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>WIN32, Linux, FreeBSD</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include dll.e<BR>
 free_console()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Free (delete) any console window associated with your program."
 >
<_2clist
  name="Comments:"
  description=
"Euphoria will create a console <font color=\"CC3366\">text</font> window
 for your program the first time that your program prints something to the
 screen, reads something from the keyboard, or in some way needs a
 console (similar to a DOS-prompt window). On WIN32 this window will
 automatically disappear when your program terminates, but you
 can call free_console() to make it disappear sooner. On Linux or FreeBSD, 
 the text mode console is always there, but an xterm window will disappear
 after Euphoria issues a \"Press Enter\" prompt at the end of execution.

<p>
 On Linux or FreeBSD, free_console()
 will set the terminal parameters back to normal, undoing the effect
 that curses has on the screen.
<p>
In a Linux or FreeBSD xterm window, a call to free_console(), without any
further printing to the screen or reading from the keyboard, will eliminate
the \"Press Enter\" prompt that Euphoria normally issues at 
the end of execution.
<P>
After freeing the console window, you can create a new console
 window by printing something to the screen, or simply calling
 clear_screen(), <a href=\"lib_p_r.htm#position\">position()</a> or any
 other routine that needs a console.
<P>
When you use the <font color=\"#993333\"><b>trace</b></font> facility,
 or when your program has an
 error, Euphoria will automatically create a console window
 to display trace information, error messages etc.
<P>
There's a WIN32 API routine, FreeConsole() that does something
 similar to free_console(). You should use free_console(),
 because it lets the interpreter know that there is no longer
 a console."
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_c_d.htm#clear_screen\">clear_screen</a>,
 <a class=\"blue\" href=\"platform.htm#win32plat\"><b>platform.doc</b>
 </a>"
 >
</table>


<_routine name="free_low">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 free_low(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"  Free up a previously allocated block of conventional memory by
 specifying the address of the start of the block, i.e. the
 address that was returned by allocate_low(). "
 >
<_2clist
  name="Comments:"
  description=
" Use free_low() to recycle blocks of conventional memory during
 execution. This will reduce the chance of running out of
 conventional memory. Do not reference a block of memory that has
 been freed. When your program terminates, all allocated memory
 will be returned to the system.
<P>
Do not use free_low() to deallocate memory that was allocated using
 <a href=\"lib_a_b.htm#allocate\">allocate()</a>. Use free() for this purpose."
 >
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\dos32\dosint.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_a_b.htm#allocate_low\">allocate_low</a>,
<a href=\"lib_c_d.htm#dos_interrupt\">dos_interrupt</a>,
<a href=\"lib_e_g.htm#free\">free</a>"
 >
</table>


<_routine name="get">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include get.e<BR>
 s = get(fn)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Input, from file fn, a human-readable string of characters
 representing a Euphoria object. Convert the string into the
 numeric value of that object. s will be a 2-element sequence:
 <b>{error status, value}</b>. Error status codes are:"
 >
<_eucode>
    GET_SUCCESS -- object was read successfully
    GET_EOF     -- end of file before object was read completely
    GET_FAIL    -- object is not syntactically correct
    GET_NOTHING -- nothing was read, even a partial object string, before end of input
</_eucode>
 
 <_2clist
  name=""
  description=
"get() can read arbitrarily complicated Euphoria objects. You
 could have a long sequence of values in braces and separated by
 commas and comments, e.g. {23, {49, 57}, 0.5, -1, 99, 'A', \"john\"}.
 <font color=\"#CC0099\"><b>A single call to get() will read in this
 entire sequence and return its value as a result, as well as complementary information.</b></font>
<P>
get() returns a 2 element sequence, like value() does:
<ul>
<li> a status code (success/error/end of file/no value at all),
<li> the value just read (meaningful only when the status code is GET_SUCCESS),
</ul>
Each call to get() picks up where the previous call left off. For
 instance, a series of 5 calls to get() would be needed to read
 in:
<P>
"99 5.2 {1,2,3} \"Hello\" -1"
<P>
On the sixth and any subsequent call to get() you would see a
 GET_EOF status. If you had something like:
<P>
{1, 2, xxx}
<P>
in the input stream you would see a GET_FAIL error status
 because xxx is not a Euphoria object. And seeing
 <P>
   -- something\nBut no value
<P>
and the input stream stops right there, you'll  receive a status
 code of GET_NOTHING, because nothing but whitespace or comments was read.
<P>
Multiple \"top-level\" objects in the input stream must be
 separated from each other with one or more \"whitespace\"
 characters (blank, tab, \r or \n). At the very least, a top
 level number must be followed by a white space from the following object.
 Whitespace is not necessary <b><i>within</i></b> a top-level object. Comments, terminated by either '\n' or '\r',
 are allowed anywhere inside sequences, and ignored if at the top level.
 A call to get() will read one entire top-level object, plus possibly one additional
 (whitespace) character, after a top level number, even though the next object may have an identifiable starting pont.."
 >
<_2clist
  name="Comments:"
  description=
"The combination of print() and get() can be used to save a
 Euphoria object to disk and later read it back. This technique
 could be used to implement a database as one or more large
 Euphoria sequences stored in disk files. The sequences could be
 read into memory, updated and then written back to disk after
 each series of transactions is complete. Remember to write out
 a whitespace character (using puts()) after each call to print(),
 at least when a top level number was just printed.
<P>
The value returned is not meaningful unless you have a
 GET_SUCCESS status.
 "
 >
<_2clist
  name="Example:"
  description="Suppose your program asks the user to enter a number from the
  keyboard."
 >
<_eucode>
-- If he types 77.5, get(0) would return:

{GET_SUCCESS, 77.5}

-- whereas gets(0) would return:

"77.5\n"

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\mydata.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#print\">print</a>,
<a href=\"lib_u_z.htm#value\">value</a>,
<a href=\"lib_e_g.htm#gets\">gets</a>,
<a href=\"lib_e_g.htm#getc\">getc</a>,
<a href=\"lib_p_r.htm#prompt_number\">prompt_number</a>,
<a href=\"lib_p_r.htm#prompt_string\">prompt_string</a>"
 >
</table>


<_routine name="get_active_page">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include image.e<BR>
 i = get_active_page()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Some graphics modes on most video cards have
 multiple pages of memory. This lets you write screen output to one page
 while displaying a different page. get_active_page() returns
 the current page number that screen output is being sent to."
 >
<_2clist
  name="Comments:"
  description=
" The active and display pages are both 0 by default.
<P>
video_config() will tell you how many pages are available in
 the current graphics mode."
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_s_t.htm#set_active_page\">set_active_page</a>,
<a href=\"lib_e_g.htm#get_display_page\">get_display_page</a>,
<a href=\"lib_u_z.htm#video_config\">video_config</a>"
 >
</table>


<_routine name="get_all_palette">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include image.e<BR>
 s = get_all_palette()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Retrieve color intensities for the entire set of colors in the current
 graphics mode. s is a sequence of the form:<p>
 {{r,g,b}, {r,g,b}, ..., {r,g,b}}
<p>
Each element specifies a color intensity {red, green, blue}
 for the corresponding color number, starting with color
 number 0. The values for red, green and blue will be in the
 range 0 to 63."
 >
<_2clist
  name="Comments:"
  description=
" This function might be used to get the palette values needed
 by save_bitmap(). Remember to multiply these values by 4 before
 calling save_bitmap(), since save_bitmap() expects values in the
 range 0 to 255.
 "
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#palette\">palette</a>,
<a href=\"lib_a_b.htm#all_palette\">all_palette</a>,
<a href=\"lib_p_r.htm#read_bitmap\">read_bitmap</a>,
<a href=\"lib_s_t.htm#save_bitmap\">save_bitmap</a>,
<a href=\"lib_s_t.htm#save_screen\">save_screen</a>"
 >
</table>


<_routine name="get_bytes">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include get.e<BR>
 s = get_bytes(fn, i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Read the next i bytes from file number fn. Return the bytes
 as a sequence. The sequence will be of length i, except
 when there are fewer than i bytes remaining to be read in the
 file. "
 >
<_2clist
  name="Comments:"
  description=
"When i > 0 and <a href=\"lib_h_o.htm#length\">length(s)</a> < i you know
 you've reached the end of file. Eventually, an
 <a href=\"refman_2.htm#empty_seq\">empty sequence</a> will be returned
 for s.
 <P>
 This function is normally used with files opened in binary mode, \"rb\".
 This avoids the confusing situation in text mode where DOS will convert CR LF pairs to LF."
 >

<_2clist
  name="Example:"
  description=""
 >
<_eucode>
include get.e

integer fn
fn = open("temp", "rb")  -- an existing file

sequence whole_file
whole_file = {}

sequence chunk

while 1 do
    chunk = get_bytes(fn, 100) -- read 100 bytes at a time
    whole_file &= chunk        -- chunk might be empty, that's ok
    if length(chunk) < 100 then
        exit
    end if
end while

close(fn)
? length(whole_file)  -- should match DIR size of "temp"

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#getc\">getc</a>,
<a href=\"lib_e_g.htm#gets\">gets</a>"
 >
</table>


<_routine name="get_display_page">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include image.e<BR>
 i = get_display_page()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Some graphics modes on most video cards
 have multiple pages of memory. This lets you write screen output to one page
 while displaying another. get_display_page() returns the current
 page number that is being displayed on the monitor."
 >
<_2clist
  name="Comments:"
  description=
"The active and display pages are both 0 by default.
<P>
video_config() will tell you how many pages are available in
 the current graphics mode."
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_s_t.htm#set_display_page\">set_display_page</a>,
<a href=\"lib_e_g.htm#get_active_page\">get_active_page</a>,
<a href=\"lib_u_z.htm#video_config\">video_config</a>"
 >
</table>


<_routine name="get_key">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = get_key()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the key that was pressed by the user, without waiting.
 Return -1 if no key was pressed. Special
 codes are returned for the function keys, arrow keys etc. "
 >
<_2clist
  name="Comments:"
  description=
"The operating system can hold a small number of key-hits in its 
 keyboard buffer. get_key() will return the next one from the buffer, 
 or -1 if the buffer is empty.
<P>
Run the <font color=\"#5500FF\"><b>key.bat</b></font> program to see what
 key code is generated for each key on your keyboard."
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_u_z.htm#wait_key\">wait_key</a>,
<a href=\"lib_e_g.htm#getc\">getc</a>"
 >
</table>


<_routine name="get_mouse">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32, Linux</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include mouse.e<BR>
 x1 = get_mouse()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the last mouse event in the form: <b>{event, x, y}</b> or
 return -1 if there has not been a mouse event since the last
 time get_mouse() was called.
<P>
Constants have been defined in
 <font color=\"#5500FF\"><b>mouse.e</b></font> for the possible mouse
 events:"
 >
<_eucode>
    global constant MOVE = 1,
               LEFT_DOWN = 2,
                 LEFT_UP = 4,
              RIGHT_DOWN = 8,
                RIGHT_UP = 16,
             MIDDLE_DOWN = 32,
               MIDDLE_UP = 64
</_eucode>

 <_2clist
  name=""
  description=
"x and y are the coordinates of the mouse pointer at the time that
 the event occurred. get_mouse() returns immediately with either
 a -1 or a mouse event. It does not wait for an event to occur.
 You must check it frequently enough to avoid missing an event.
 When the next event occurs, the current event will be lost, if
 you haven't read it. In practice it is not hard to catch almost
 all events. Losing a MOVE event is generally not too serious,
 as the next MOVE will tell you where the mouse pointer is.
<P>
Sometimes multiple events will be reported. For example, if the
 mouse is moving when the left button is clicked, get_mouse()
 will report an event value of LEFT_DOWN+MOVE, i.e. 2+1 or 3.
 For this reason you should test for a particular event using
 and_bits(). See examples below.
 "
 >
<_2clist
  name="Comments:"
  description=
"In <font color=\"#CC3366\">pixel-graphics modes</font> that are 320 pixels
 wide, you need to divide the x value by 2 to get the correct position on
 the screen. (A strange feature of DOS.)
<P>
In DOS32 <font color=\"#CC3366\">text modes</font> you need to scale the x and y
 coordinates to get line and column positions. In Linux, 
 no scaling is
 required - x and y correspond to the line and column on the screen, 
 with (1,1) at the top left. 
<P>
In DOS32, you need a DOS mouse driver to use this routine. In Linux, 
GPM Server must be running.
<p>
In Linux, mouse movement events are not reported in an xterm window, 
only in the text console. 
<P>
In Linux, LEFT_UP, RIGHT_UP and MIDDLE_UP are not distinguishable 
from one another.
<P>
You can use get_mouse() in <font color=\"#CC3366\">most text and
 pixel-graphics modes</font>.
<P>
The first call that you make to get_mouse() will turn on a
 mouse pointer, or a highlighted character.
<P>
DOS generally does not support the use of a mouse in SVGA
 graphics modes (beyond 640x480 pixels). This restriction
 has been removed in Windows 95 (DOS 7.0). <b>Graeme Burke</b>,
 <b>Peter Blue</b> and others have contributed <b>mouse routines</b> that
 get around the problems with using a mouse in SVGA. See the
 Euphoria <a href=\"http://www.RapidEuphoria.com/exestuff.htm\">Archive
 Web page</a>.
<P>
The x,y coordinate returned could be that of the very tip of the
 mouse pointer or might refer to the pixel pointed-to by
 the mouse pointer. Test this if you are trying to read the
 pixel color using <a href=\"lib_e_g.htm#get_pixel\">get_pixel()</a>. You
 may have to read x-1,y-1 instead."
 >
<_2clist
  name="Example 1:"
  description=" a return value of:"
 >

<_eucode>
{2, 100, 50}
</_eucode>

<_2clist
  name=""
  description="would indicate that the left button was pressed down when the
 mouse pointer was at location x=100, y=50 on the screen."
 >

<_2clist
  name="Example 2:"
  description=" To test for LEFT_DOWN, write something like the following:"
 >

<_eucode>
object event

while 1 do
    event = get_mouse()
    if sequence(event) then
        if and_bits(event[1], LEFT_DOWN) then
            -- left button was pressed
            exit
        end if
    end if
end while

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_h_o.htm#mouse_events\">mouse_events</a>,
<a href=\"lib_h_o.htm#mouse_pointer\">mouse_pointer</a>,
<a href=\"lib_a_b.htm#and_bits\">and_bits</a>"
 >
</table>


<_routine name="get_pixel">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> x = get_pixel(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"When s is a 2-element screen coordinate {x, y}, get_pixel()
 returns the color (a small integer) of the pixel on the
 <font color=\"#CC3366\">pixel-graphics</font> screen
 at that point.<P>
When s is a 3-element sequence of the form: {x, y, n}
 get_pixel() returns a sequence of n colors for the
 points starting at {x, y} and moving to the right {x+1, y},
 {x+2, y} etc.
<P>
Points off the screen have unpredictable color values."
 >
<_2clist
  name="Comments:"
  description=
"When n is specified, a very fast algorithm is used to read the
 pixel colors on the screen. It is much faster to call get_pixel()
 once, specifying a large value of n, than it is to call it many
 times, reading one pixel color at a time."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
object x

x = get_pixel({30,40})
-- x is set to the color value of point x=30, y=40

x = get_pixel({30,40,100})
-- x is set to a sequence of 100 integer values, representing
-- the colors starting at {30,40} and going to the right

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#pixel\">pixel</a>,
<a href=\"lib_e_g.htm#graphics_mode\">graphics_mode</a>,
<a href=\"lib_e_g.htm#get_position\">get_position</a>"
 >
</table>


<_routine name="get_position">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include graphics.e<BR>
 s = get_position()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the current line and column position of the cursor as a
 2-element sequence <b>{line, column}</b>. "
 >
<_2clist
  name="Comments:"
  description=
"get_position() works in both <font color=\"#CC3366\">text and
 pixel-graphics modes</font>.
 In <font color=\"#CC3366\">pixel-graphics modes</font> no cursor will be
 displayed, but get_position() will return the line and column where the
 next character will be displayed.
<P>
The coordinate system for displaying text is different from the
 one for displaying pixels. Pixels are displayed such that the
 top-left is (x=0,y=0) and the first coordinate controls the
 horizontal, left-right location. In pixel-graphics modes
 you can display both text and pixels. get_position() returns the
 current line and column for the text that you are displaying,
 not the pixels that you may be plotting. There is no
 corresponding routine for getting the current pixel position.
 "
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#position\">position</a>,
<a href=\"lib_e_g.htm#get_pixel\">get_pixel</a>"
 >
</table>


<_routine name="get_screen_char">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include image.e<BR>
 s = get_screen_char(i1, i2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return a 2-element sequence s, of the form
  <b>{ascii-code, attributes}</b> for
 the character on the screen at line i1, column i2. s consists of
 two atoms. The first is the ASCII code for the character. The second
 is an atom that contains the foreground and background color of the character,
 and possibly other information describing the appearance of the character
 on the screen."
 >
<_2clist
  name="Comments:"
  description="With get_screen_char() and put_screen_char() you can
   save and restore a character on the screen along with its attributes."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
-- read character and attributes at top left corner
s = get_screen_char(1,1) 
-- store character and attributes at line 25, column 10
put_screen_char(25, 10, s)
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_p_r.htm#put_screen_char\">put_screen_char</a>,
<a href=\"lib_s_t.htm#save_text_image\">save_text_image</a>"
 >
</table>


<_routine name="get_vector">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include machine.e<BR>
 s = get_vector(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the current protected mode far address of the handler
 for interrupt number i. s will be a 2-element sequence:
 <b>{16-bit segment, 32-bit offset}</b>."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
s = get_vector(#1C)
-- s will be set to the far address of the clock tick
-- interrupt handler, for example: {59, 808}

 </_eucode>
<_2clist
  name="Example Program:"
  description="<font color=\"#5500FF\"><b>demo\dos32\hardint.ex</b></font>"
 >

 <_2clist
  name="See Also:"
  description="<a href=\"lib_s_t.htm#set_vector\">set_vector</a>,
<a href=\"lib_h_o.htm#lock_memory\">lock_memory</a>"
 >
</table>


<_routine name="getc">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> i = getc(fn)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Get the next character (byte) from file or device fn. The character will
 have a value from 0 to 255. -1 is returned at end of file."
 >
<_2clist
  name="Comments:"
  description=
"File input using getc() is buffered, i.e. getc() does not actually
 go out to the disk for each character. Instead, a large block of
 characters will be read in at one time and returned to you one
 by one from a memory buffer.
 <p>
 When getc() reads from the keyboard, it will not see any characters until
 the user presses Enter.
 Note that the user can type
 control-Z, which the operating system treats as \"end of file\".
 -1 will be returned."
 >
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#gets\">gets</a>,
<a href=\"lib_e_g.htm#get_key\">get_key</a>,
<a href=\"lib_u_z.htm#wait_key\">wait_key</a>,
<a href=\"lib_h_o.htm#open\">open</a>"
 >
</table>


<_routine name="getenv">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> x = getenv(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the value of an environment variable. If the variable
 is undefined, return -1."
 >
<_2clist
  name="Comments:"
  description=
" Because either a sequence or an atom (-1) might be returned, you
 should probably assign the result to a variable declared as
 object.
 <p>
 Both the argument and the return value, may, or may not be, case sensitive.
 You might need to test this on your system.
 "
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
e = getenv("EUDIR")
-- e will be "C:\EUPHORIA" -- or perhaps D:, E: etc.

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_c_d.htm#command_line\">command_line</a>"
 >
</table>


<_routine name="gets">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> x = gets(fn)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Get the next sequence (one line, including '\n') of characters
 from file or device fn. The characters will have values from 0
 to 255. The atom -1 is returned on end of file."
 >
<_2clist
  name="Comments:"
  description=
"Because either a sequence or an atom (-1) might be returned, you
 should probably assign the result to a variable declared as
 object.
<P>
After reading a line of text from the keyboard, you should
 normally output a \n character, e.g. puts(1, '\n'), before
 printing something. Only on the last line of the screen does the
 operating system automatically scroll the screen and advance to
 the next line.
<P>
The last line in a file might not end with a new-line '\n'
 character.
<P>
On DOS/Windows when your program reads from the keyboard, the user can type
 control-Z, which the operating system treats as \"end of file\".
 -1 will be returned.
<p>
The official line-terminator on DOS/Windows is \r\n, though \n
by itself will also work OK with gets(). In either case 
a single \n will appear at the end of the returned line. 
On Linux and FreeBSD the official line-terminator is simply '\n'.

<P>
In SVGA modes, DOS might set the wrong cursor position, after a call to
 gets(0) to read the keyboard. You should set it yourself using
 <a href=\"lib_p_r.htm#position\">position()</a>."
 >
<_2clist
  name="Example 1:"
  description=""
 >
<_eucode>
sequence buffer
object line
integer fn

-- read a text file into a sequence
fn = open("myfile.txt", "r")
if fn = -1 then
    puts(1, "Couldn't open myfile.txt\n")
    abort(1)
end if

buffer = {}
while 1 do
    line = gets(fn)
    if atom(line) then
        exit   -- -1 is returned at end of file
    end if
    buffer = append(buffer, line)
end while

 </_eucode>
<_2clist
  name="Example 2:"
  description=""
 >
<_eucode>
object line

puts(1, "What is your name?\n")
line = gets(0)  -- read standard input (keyboard)
line = line[1..length(line)-1] -- get rid of \n character at end
puts(1, '\n')   -- necessary
puts(1, line & " is a nice name.\n")

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_e_g.htm#getc\">getc</a>,
<a href=\"lib_p_r.htm#puts\">puts</a>,
<a href=\"lib_h_o.htm#open\">open</a>"
 >
</table>


<_routine name="graphics_mode">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Platform:"
  description="<font color=\"#CC3366\"><b>DOS32</b></font>"
 >

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include graphics.e<BR>
 i1 = graphics_mode(i2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Select graphics mode i2. See <font color=\"#5500FF\"><b>graphics.e</b></font>
 for a list of valid graphics modes. If successful, i1 is set to 0,
 otherwise i1 is set to 1."
 >
<_2clist
  name="Comments:"
  description=
"Some modes are referred to as <font color=\"#CC3366\">text modes</font>
 because they only let you display text. Other modes are referred to as
 <font color=\"#CC3366\">pixel-graphics modes</font> because you can
 display pixels, lines, ellipses etc., as well as text.
<P>
As a convenience to your users, it is usually a good idea to
 switch back from a pixel-graphics mode to the standard text
 mode before your program terminates. You can do this with
 graphics_mode(-1). If a pixel-graphics program leaves your screen
 in a mess, you can clear it up with the DOS CLS command, or
 by running <font color=\"#993333\"><b>ex</b></font> or
 <font color=\"#993333\"><b>ed</b></font>.
<P>
Some graphics cards will be unable to enter some SVGA modes,
 under some conditions. You can't always tell from the i1 value,
 whether the graphics mode was set up successfully.
<P>
On the <font color=\"#CC3366\"><b>WIN32</b></font> and 
<font color=\"#CC3366\"><b>Linux/FreeBSD</b></font>
platforms, graphics_mode() will allocate a plain, text mode console if one
does not exist yet. It will then return 0, no matter what value is 
passed as i2."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if graphics_mode(18) then
    puts(SCREEN, "need VGA graphics!\n")
    abort(1)
end if
draw_line(BLUE, {{0,0}, {50,50}})

 </_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"lib_s_t.htm#text_rows\">text_rows</a>,
<a href=\"lib_u_z.htm#video_config\">video_config</a>"
 >
</table>

<_continueAll
  libDoc="lib_e_g.htm"
>

</body>
</html>

