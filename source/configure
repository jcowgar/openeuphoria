#!/bin/sh

CONFIG_FILE=config.gnu

UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown
UNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown

# If under Cygwin or Mingw, we have 2 sets of paths: the normal TRUNKDIR/BUILDDIR/INCDIR defined by
# the Cygwin path (/cygdrive/c/dir/file) or under Mingw the Mingw path (/c/dir/file); as well as the
# CYP- versions (c:/dir/file). The normal variables are used by make itself, which can't handle the
# mixed-mode path and can only deal with pure Cygwin or Mingw ones. (These are also used by the
# various utilities ike cp, gcc, etc, even though they can handle either format). The CYP- versions
# are used whenever we call eui, euc, or an euphoria program, as these can only handle mixed-mode
# paths.

USECYPPATH="false"

# argument sent to the pwd command.  Most platforms no arguments.
PWDARG=
if echo "$UNAME_SYSTEM" | grep CYGWIN > /dev/null; then
	# for now, we build with -mno-cygwin under cygwin, so this is treated
	# identically to MinGW
	# A true exu.exe should probably set UNAME_SYSTEM="CYGWIN"
	UNAME_SYSTEM=WINDOWS
	# However, since we use absolute paths and Cygwin's make can't deal with
	# mixed-mode paths (C:/dir/file) the way MSYS's make can, we turn
	# CYPPATH on
	USECYPPATH="true"
	PWDARG=

elif echo "$UNAME_SYSTEM" | grep MINGW > /dev/null; then
	UNAME_SYSTEM=WINDOWS
	PWDARG=-W
else
	PWDARG=
fi

if [ -e source/global.e ]; then
	PREFIX=source/
else
	PREFIX=./
fi

echo "# File generated from configure" > ${CONFIG_FILE}

# gcc doesn't seem to like -m32 on 32-bit machines when there are 
# no 64-bit machines 
# with an instruction super set of the 32-bit machine.  This means,
# -m32 is fine for ix86 32bit machines but bad for ARM and Motorolla based
# machines.


MFLAG=-m32
EFLAG=E32
if echo "$UNAME_MACHINE" | grep "i[1-7]86" > /dev/null; then
	ARCH=ix86
	MFLAG=-m32
	EFLAG=E32
elif echo "$UNAME_MACHINE" | grep "x86_64" > /dev/null; then
	ARCH=ix86_64
	MFLAG=-m64
	EFLAG=E64
elif echo "$UNAME_MACHINE" | grep ARM > /dev/null; then
	ARCH=ARM
	MFLAG=
	EFLAG=E32
fi

if test $UNAME_SYSTEM = "Linux"; then
	EHOST=ELINUX
	TARGET=LINUX
elif test $UNAME_SYSTEM = "WINDOWS"; then
	EHOST=EWINDOWS
	TARGET=EWINDOWS
elif test $UNAME_SYSTEM = "OpenBSD"; then
	EHOST=OPENBSD
	TARGET=EOPENBSD
	EBSD=1
elif test $UNAME_SYSTEM = "NetBSD"; then
	EHOST=NETBSD
	TARGET=EBSD
	EBSD=1
else
	EBSD=1
	if test $UNAME_SYSTEM = "Darwin"; then
		EHOST=EOSX
		TARGET=EOSX
	else
		EHOST=EBSD
		TARGET=EBSD
	fi
fi

echo EHOST=$EHOST >>  "$PREFIX"${CONFIG_FILE}

# default use source
export EC="eui ec.ex"
export BUILDDIR=build
export XLTTARGETCC=gcc
export CC=gcc

SCP="scp -C"
SSH="ssh -C"
HG="hg"

echo CONFIGURE_PARAMS=$@ >> "$PREFIX"${CONFIG_FILE}
PLAT=""
# parameters
while [ "$1" != "" ]; do
    case $1 in
	--plat*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi
		TARGET=E$VAL

		PLAT=$VAL
		;;

	--watcom )
		export XLTTARGETCC=wat
		;;

	--cc-prefix*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi

		export CC_PREFIX=$VAL
		;;
	--cc*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi

		export CC=$VAL
		;;
	--rc*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi

		export RC=$VAL
		;;
	
	--no-managed-mem )
		export MANAGED_MEM=0
		;;

	--align4 )
		export ALIGN4=1
		;;

	--without-euphoria )
		export EUPHORIA=0
		;;

	--eubin*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi

		export LEN=`echo $VAL/eucd.exe | wc -c`
		if test $LEN -gt 85; then
			if test $UNAME_SYSTEM = "MS-DOS"; then
				echo "Cannot configure with such a long path for DJGPP."
				rm "$PREFIX"${CONFIG_FILE}
				exit
			fi
		fi
		echo "EUBIN=$VAL" >> "$PREFIX"${CONFIG_FILE}
		EUBIN=$VAL
		;;

	--build*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi

		export BUILDDIR=$VAL
		;;

	--debug )
		echo EDEBUG=1 >> "$PREFIX"${CONFIG_FILE}
		;;

	--prefix*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi

		echo "PREFIX=$VAL" >> ${CONFIG_FILE}
		;;

	--use-binary-translator )
		export EC="euc"
		;;

	--use-source-translator )
		export EC="eui ec.ex"
		;;

	--final)
		echo EREL_TYPE=-DEREL_TYPE=1 >> ${CONFIG_FILE}
		;;

	--release*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi

		echo EREL_TYPE=-DEREL_TYPE=\"$VAL\" >> ${CONFIG_FILE}
		# "
		;;

	--verbose-tests )
		echo VERBOSE_TESTS=-verbose >> ${CONFIG_FILE}
		;;

	--rootdir*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi

		echo ROOTDIR=$VAL >> ${CONFIG_FILE}
		;;

	--oe-username*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi

		echo OE_USERNAME=$VAL >> ${CONFIG_FILE}
		;;

	--scp-client*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi

		SCP=$VAL
		;;

	--ssh-client*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL = $1
		fi

		SSH=$VAL
		;;

	--hg*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL = $1
		fi

		HG=$VAL
		;;
	
	--arch*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi
		ARCH=$VAL
		case $ARCH in
			x86.64)
				ARCH=ix86_64
				MFLAG=-m64
				EFLAG=E64
			;;
			x86)
				ARCH=ix86
				MFLAG=-m32
				EFLAG=E32
			;;
			ARM)
				ARCH=ARM
				MFLAG=
				EFLAG=E32
			;;
			*)
				echo "Unknown Architecture '$VAL'"
				echo "Supported Architectures:"
				echo "   x86"
				echo "   x86_64"
				echo "   ARM"
				exit
		esac
		;;
		
	--wine*)
		VAL=`echo $1 | cut -d = -f 2`
		if [ "$VAL" = "$1" ]; then
			shift ; VAL=$1
		fi
		echo WINE=$VAL >> "$PREFIX"${CONFIG_FILE}
		;;

	--no-cygwin )
		NO_CYGWIN=-mno-cygwin
		;;
	* )
		echo "Unknown option '$1'"
		echo "Configures and prepares the euphoria source for building"
		echo
		echo "configure [options]"
		echo
		echo "Options:"
		echo "   --without-euphoria"
		echo "   --eubin value"
		echo "   --build value       set the build directory"
		echo "   --full"
		echo "   --release value     set the release type for the version string"
		echo "   --debug             turn debugging on"
		echo "   --prefix value      set the install directory (default /usr/local)"
		echo "   --plat value        set the OS that we will translate to."
		echo "                       values can be: WINDOWS, OSX, LINUX, FREEBSD, OPENBSD or NETBSD."
		echo "   --watcom            set this so the translator will create C code for"
		echo "                       Watcom C."
		echo "   --no-managed-mem    disable managed memory"
		echo "   --align4            malloc allocates addresses that are"
		echo "                       always 4 byte aligned."
		echo "   --eubin value       Use this option to specify the location of the"
		echo "   --cc value          set this to the name of your GNU C compiler file name if its "
		echo "                       name is not 'gcc'"
		echo "   --rc value          Name of the windows resource compiler.  This is used with"
		echo "                       MinGW builds."
		echo "   --cc-prefix         Prefix to use with the compiler and other build binaries.  This"
		echo "                       is generally used from cross compilers, or Windows MinGW"
		echo "                       installations that use a prefix"
		echo "   --roodir value      the root dir to use for checking the svn revision"
		echo "                       default is the parent directory"
		echo "   --use-binary-translator"
		echo "                       Use the already built translator rather"
		echo "                       than interpreting its source           "
		echo "   --use-source-translator                                    "
		echo "                       Interpret the translator's source rather" # '"
		echo "                       than using the already built translator"
		echo "                       (default)"
		echo "   --verbose-tests     cause the 'test' target to use the verbose flag"
		echo "                       with eutest"
		echo "   --oe-username value Developer user name on openeuphoria.org for various scp"
		echo "                       operations such as manual upload"
		echo "   --scp-client value  SCP program to use for scp uploads (default scp -C)"
		echo "   --ssh-client value  SSH program to use for ssh commands (default ssh -C)"
		echo "   --hg value          Mercurial binary command (default 'which hg')"
		echo "   --wine value        Path to wine (useful for cross compilation to windows)"
		echo "   --no-cygwin         Use the -mno-cygwin flag with MinGW.  This flag is obsoltete,"
		echo "                       and may cause errors on newer versions of MinGW."
		exit
		;;
	esac
	shift
done

if [ "$TARGET" = "EBSD" ]; then
	EBSD=1
elif [ "$TARGET" = "EOPENBSD" ]; then
	EOPENBSD=1
elif [ "$TARGET" = "EOSX" ]; then
	EOSX=1
elif [ "$TARGET" = "LINUX" ]; then
	ELINUX=1
elif [ "$TARGET" = "EWINDOWS" ]; then
	EMINGW=1
fi


echo EBSD=$EBSD >> "$PREFIX"${CONFIG_FILE}
echo EOPENBSD=$EOPENBSD >> "$PREFIX"${CONFIG_FILE}
echo ENETBSD=$ENETBSD >> "$PREFIX"${CONFIG_FILE}
echo EOSX=$EOSX >> "$PREFIX"${CONFIG_FILE}
echo ELINUX=$ELINUX >> "$PREFIX"${CONFIG_FILE}
echo EMINGW=$EMINGW >> "$PREFIX"${CONFIG_FILE}
# if eui doesn't exist the error message goes into
# the device file /dev/null. [works on Mingw too.]
if [ "x$EUBIN" = "x" ]; then
	if eui -? 1> /dev/null 2> /dev/null; then
		if [ "x$EUPHORIA" = "x" ]; then
			export EUPHORIA=1
		fi
	else
		export EUPHORIA=0
	fi
else
	export EUPHORIA=1
fi

if [ "x$EUPHORIA" = "x1" ]; then
	echo EUPHORIA=1 >> "$PREFIX"${CONFIG_FILE}
else
	echo EUPHORIA=0 >> "$PREFIX"${CONFIG_FILE}
fi

if [ "$TARGET" = "EWINDOWS" ]; then
	# MANAGED_MEM and ALIGN4 are on by default for Windows
	# and only Windows
	if [ "x$MANAGED_MEM" = "x" ]; then
		echo MANAGED_MEM=1 >> "$PREFIX"${CONFIG_FILE}
	else
		echo MANAGED_MEM=0 >> "$PREFIX"${CONFIG_FILE}
	fi

	if [ "x$ALIGN4" = "x" ]; then
		echo ALIGN4=0 >> "$PREFIX"${CONFIG_FILE}
	else
		echo ALIGN4=1 >> "$PREFIX"${CONFIG_FILE}
	fi
fi

if [ "x$RC" = "x" ]; then
	export RC=windres
fi

if [ "$EC" != "" ]; then
	echo "TRANSLATE=$EC" >> "$PREFIX"${CONFIG_FILE}
fi

echo "ARCH=$ARCH" >> "$PREFIX"${CONFIG_FILE}
echo "MSIZE=$MFLAG" >> "$PREFIX"${CONFIG_FILE}
echo "EFLAG=-d $EFLAG" >> "$PREFIX"${CONFIG_FILE}
echo "CC_SUFFIX=$CC" >> "$PREFIX"${CONFIG_FILE}
echo "CC_PREFIX=$CC_PREFIX" >> "$PREFIX"${CONFIG_FILE}
echo "RC=$RC" >> "$PREFIX"${CONFIG_FILE}
echo "SCP=$SCP" >> "$PREFIX"${CONFIG_FILE}
echo "SSH=$SSH" >> "$PREFIX"${CONFIG_FILE}
echo "HG=$HG" >> "$PREFIX"${CONFIG_FILE}

export PWD=`pwd $PWDARG`
export PPWD=`cd .. && pwd $PWDARG`

# The following works around a bug in djgpp's pwd
# that at times returns the parent of the current
# directory instead of the current directory.
if [ ! -e "$PPWD"/source ] && [ -e "$PWD"/source ]; then
	# bug is present
	echo "Information: Working around djgpp's PWD bug"
	export PPWD=$PWD
fi

export TRUNKDIR=$PPWD

mkdir -p $BUILDDIR
export BUILDDIR=`cd "$BUILDDIR" && pwd $PWDARG`

echo TRUNKDIR=$TRUNKDIR >> "$PREFIX"${CONFIG_FILE}
echo BUILDDIR=$BUILDDIR >> "$PREFIX"${CONFIG_FILE}

if [ "$USECYPPATH" = "true" ]; then
	export CYPTRUNKDIR=`cygpath -a -m $TRUNKDIR`
	export CYPBUILDDIR=`cygpath -a -m $BUILDDIR`
else
	# MinGW and others
	export CYPTRUNKDIR=$TRUNKDIR
	export CYPBUILDDIR=$BUILDDIR
fi
echo CYPTRUNKDIR=$CYPTRUNKDIR >> "$PREFIX"${CONFIG_FILE}
echo CYPBUILDDIR=$CYPBUILDDIR >> "$PREFIX"${CONFIG_FILE}

echo XLTTARGETCC=$XLTTARGETCC >> "$PREFIX"${CONFIG_FILE}
echo NO_CYGWIN=$NO_CYGWIN >> "$PREFIX"${CONFIG_FILE}

# Make a generic Makefile that simply includes Makefile.gnu
echo include Makefile.gnu > Makefile

echo Writing eu.cfg to $BUILDDIR/eu.cfg
echo "[all]" > $BUILDDIR/eu.cfg
echo -d $EFLAG >> $BUILDDIR/eu.cfg
echo -eudir $CYPTRUNKDIR >> $BUILDDIR/eu.cfg
echo -i $CYPTRUNKDIR/include >> $BUILDDIR/eu.cfg

echo "[translate]" >> $BUILDDIR/eu.cfg
if [ x"$PLAT" != x"" ]; then
	echo "-plat" $PLAT  >> $BUILDDIR/eu.cfg
	echo PLAT=$PLAT >> "$PREFIX"${CONFIG_FILE}
fi
echo "-$XLTTARGETCC " >> $BUILDDIR/eu.cfg
echo "-con " >> $BUILDDIR/eu.cfg
echo "-com" $CYPTRUNKDIR >> $BUILDDIR/eu.cfg
echo "-lib" $CYPBUILDDIR/eu.a >> $BUILDDIR/eu.cfg
echo "-lib-pic" $CYPBUILDDIR/euso.a >> $BUILDDIR/eu.cfg
if [ x"$CC_PREFIX" != x"" ]; then
	echo "-cc-prefix" $CC_PREFIX  >> $BUILDDIR/eu.cfg
fi
	
echo "[bind]"  >> $BUILDDIR/eu.cfg
echo "-eub" $CYPBUILDDIR/eub >> $BUILDDIR/eu.cfg

cp $BUILDDIR/eu.cfg $TRUNKDIR/source/eu.cfg
