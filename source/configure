#!/bin/sh
UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown
UNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown

# If under Cygwin, we have 2 sets of paths: the normal TRUNKDIR/BUILDDIR/INCDIR
# defined by the Cygwin path (/cygdrive/c/dir/file) as well as the CYP- versions
# (c:/dir/file). The normal variables are used by make itself, which can't
# handle the mixed-mode path and can only deal with pure Cygwin ones.
# (These are also used by the various utilities ike cp, gcc, etc, even though
# they can handle either format). The CYP- versions are used whenever we call
# eui, euc, or an euphoria program, as these can only handle mixed-mode paths.

USECYPPATH="false"

if echo "$UNAME_SYSTEM" | grep CYGWIN > /dev/null; then
	# for now, we build with -mno-cygwin under cygwin, so this is treated
	# identically to MinGW
	# A true exu.exe should probably set UNAME_SYSTEM="CYGWIN"
	UNAME_SYSTEM=WINDOWS
	# However, since we use absolute paths and Cygwin's make can't deal with
	# mixed-mode paths (C:/dir/file) the way MSYS's make can, we turn
	# CYPPATH on
	USECYPPATH="true"
elif echo "$UNAME_SYSTEM" | grep MINGW > /dev/null; then
	UNAME_SYSTEM=WINDOWS
fi

if [ -e source/global.e ]; then
	PREFIX=source/
else
	PREFIX=./
fi



echo "# File generated from configure" > Makefile.eu

if echo "$UNAME_MACHINE" | grep "i[1-7]86" > /dev/null; then
	echo ARCH=ix86 >> "$PREFIX"Makefile.eu
elif echo "$UNAME_MACHINE" | grep "x86_64" > /dev/null; then
	echo ARCH=ix86 >> "$PREFIX"Makefile.eu
elif echo "$UNAME_MACHINE" | grep ARM > /dev/null; then
	echo ARCH=ARM >> "$PREFIX"Makefile.eu
fi




if test $UNAME_SYSTEM = "Linux"; then
	echo EBSD= >> "$PREFIX"Makefile.eu
	echo EOPENBSD= >> "$PREFIX"Makefile.eu
	echo ENETBSD= >> "$PREFIX"Makefile.eu
	echo EOSX= >> "$PREFIX"Makefile.eu
	echo ESUNOS= >> "$PREFIX"Makefile.eu
	echo ELINUX=1 >> "$PREFIX"Makefile.eu
	echo EMINGW= >> "$PREFIX"Makefile.eu
	echo EDJGPP= >> "$PREFIX"Makefile.eu
elif test $UNAME_SYSTEM = "MS-DOS"; then
	echo EBSD= >> "$PREFIX"Makefile.eu
	echo ENETBSD= >> "$PREFIX"Makefile.eu
	echo EOPENBSD= >> "$PREFIX"Makefile.eu
	echo EOSX= >> "$PREFIX"Makefile.eu
	echo ESUNOS= >> "$PREFIX"Makefile.eu
	echo ELINUX= >> "$PREFIX"Makefile.eu
	echo EMINGW= >> "$PREFIX"Makefile.eu
	echo EDJGPP=1 >> "$PREFIX"Makefile.eu
	echo SHELL=bash >> "$PREFIX"Makefile.eu
	cp Makefile.gnu "$PREFIX"../tests/Makefile.gnu
elif test $UNAME_SYSTEM = "WINDOWS"; then
	echo EBSD= >> "$PREFIX"Makefile.eu
	echo EOSX= >> "$PREFIX"Makefile.eu
	echo ENETBSD= >> "$PREFIX"Makefile.eu
	echo EOPENBSD= >> "$PREFIX"Makefile.eu
	echo ESUNOS= >> "$PREFIX"Makefile.eu
	echo ELINUX= >> "$PREFIX"Makefile.eu
	echo EMINGW=1 >> "$PREFIX"Makefile.eu
	echo EDJGPP= >> "$PREFIX"Makefile.eu
elif test $UNAME_SYSTEM = "SunOS"; then
	echo EBSD=1 >> "$PREFIX"Makefile.eu
	echo ENETBSD= >> "$PREFIX"Makefile.eu
	echo EOSX= >> "$PREFIX"Makefile.eu
	echo EOPENBSD= >> "$PREFIX"Makefile.eu
	echo ESUNOS=1 >> "$PREFIX"Makefile.eu
	echo ELINUX= >> "$PREFIX"Makefile.eu
	echo EMINGW= >> "$PREFIX"Makefile.eu
	echo EDJGPP= >> "$PREFIX"Makefile.eu
elif test $UNAME_SYSTEM = "OpenBSD"; then
	echo EBSD=1 >> "$PREFIX"Makefile.eu
	echo ENETBSD= >> "$PREFIX"Makefile.eu
	echo EOPENBSD=1 >> "$PREFIX"Makefile.eu
	echo EOSX= >> "$PREFIX"Makefile.eu
	echo ESUNOS= >> "$PREFIX"Makefile.eu
	echo ELINUX= >> "$PREFIX"Makefile.eu
	echo EMINGW= >> "$PREFIX"Makefile.eu
	echo EDJGPP= >> "$PREFIX"Makefile.eu
elif test $UNAME_SYSTEM = "NetBSD"; then
	echo EBSD=1 >> "$PREFIX"Makefile.eu
	echo ENETBSD=1 >> "$PREFIX"Makefile.eu
	echo EOPENBSD= >> "$PREFIX"Makefile.eu
	echo EOSX= >> "$PREFIX"Makefile.eu
	echo ESUNOS= >> "$PREFIX"Makefile.eu
	echo ELINUX= >> "$PREFIX"Makefile.eu
	echo EMINGW= >> "$PREFIX"Makefile.eu
	echo EDJGPP= >> "$PREFIX"Makefile.eu
else
	echo EBSD=1 >> "$PREFIX"Makefile.eu
	if test $UNAME_SYSTEM = "Darwin"; then
		echo EOSX=1 >> "$PREFIX"Makefile.eu
	else
		echo EOSX= >> "$PREFIX"Makefile.eu
	fi
	echo ESUNOS= >> "$PREFIX"Makefile.eu
	echo EOPENBSD= >> "$PREFIX"Makefile.eu
	echo ELINUX= >> "$PREFIX"Makefile.eu
	echo EMINGW= >> "$PREFIX"Makefile.eu
	echo EDJGPP= >> "$PREFIX"Makefile.eu
fi
# default use source
export EC="eui ec.ex"
export BUILDDIR=build
export XLTTARGETCC=gcc
export CC=gcc
# parameters
while [ "$1" != "" ]; do
    case $1 in
    	--plat )
		echo "PLAT=$2" >> "$PREFIX"Makefile.eu
		shift
	;;
	--watcom )
		export XLTTARGETCC=wat
	;;
	--cc )
		export CC=$2
	;;
        --without-euphoria )
			export EUPHORIA=0
        ;;
	--eubin )
			export LEN=`echo $2/eucd.exe | wc -c`
			if test $LEN -gt 85; then
				if test $UNAME_SYSTEM = "MS-DOS"; then
					echo "Cannot configure with such a long path for DJGPP."
					rm "$PREFIX"Makefile.eu
					exit
				fi
			fi
			echo "EUBIN=$2" >> "$PREFIX"Makefile.eu
			EUBIN=$2
			shift
		;;
        --full )
			echo RELEASE=1 >> "$PREFIX"Makefile.eu
        ;;

        --build )
			export BUILDDIR=$2
			shift
		;;
        --debug )
			echo EDEBUG=1 >> "$PREFIX"Makefile.eu
        ;;
		--prefix )
			echo "PREFIX=$2" >> Makefile.eu
			shift
		;;
	--use-binary-translator )
		export EC="euc"
		;;
	--use-source-translator )
		export EC="eui ec.ex"
		;;
	--release )
		shift
		echo EREL_TYPE=-DEREL_TYPE=\"$1\" >> Makefile.eu
		;;
	--rootdir )
		shift
		echo ROOTDIR=$1 >> Makefile.eu
		;;
	--wkhtmltopdf )
		echo WKHTMLTOPDF=1 >> Makefile.eu
		;;
		* )
			echo "Unknown option '$1'"
			echo "Configures and prepares the euphoria source for building"
			echo
 			echo "configure [options]"
			echo
			echo "Options:"
			echo "    --without-euphoria"
			echo "    --eubin value"
			echo "    --build value       set the build directory"
			echo "    --full"
			echo "    --release value     set the release type for the version string"
			echo "    --debug             turn debugging on"
			echo "    --prefix value      set the install directory (default /usr/local)"
			echo "    --plat value        set the OS that we will translate to."
			echo "           values can be: WIN, OSX, LINUX, FREEBSD, SUNOS, OPENBSD or NETBSD."
			echo "                                                               "
			echo "    --watcom            set this so the translator will create C code for "
			echo "                        Watcom C."
			echo "    --cc  value         set this to the name of your GNU C compiler file name if its "
			echo "                        name is not 'gcc'"
			echo "    --roodir value      the root dir to use for checking the svn revision"
			echo "                        default is the parent directory"
			echo "    --use-binary-translator"
			echo "                        Use the already built translator rather"
			echo "                        than interpreting its source           "
			echo "                                                               "
			echo "    --use-source-translator                                    "
			echo "                        Interpret the translator's source rather"
			echo "                        than using the already built translator"
			echo "                        (default)"
			echo "    --wkhtmltopdf                                              "
			echo "                        build pdf documentation with wkhtmltopdf"
			echo "                        instead of the default htmldoc"
			exit
			;;
    esac
    shift
done

touch nothing.ex
# if eui doesn't exist the error message goes into
# the device file /dev/null. [works on Mingw too.]
if [ "x$EUBIN" = "x" ]; then
	if eui nothing.ex 2> /dev/null; then
		if [ "x$EUPHORIA" = "x" ]; then
			export EUPHORIA=1
		fi
	else
		export EUPHORIA=0
	fi
else
	export EUPHORIA=1
fi
rm nothing.ex

if [ "x$EUPHORIA" = "x1" ]; then
	echo EUPHORIA=1 >> "$PREFIX"Makefile.eu
else
	echo EUPHORIA=0 >> "$PREFIX"Makefile.eu
fi
if [ "x$MANAGED_MEM" = "x" ]; then
        if test $UNAME_SYSTEM = "MS-DOS"; then
        	echo "Information: Managed memory always on for DJGPP."
		echo MANAGED_MEM=1 >> "$PREFIX"Makefile.eu
	fi
fi
echo "CC=$CC" >> "$PREFIX"Makefile.eu
if [ "$EC" != "" ]; then
	echo "TRANSLATE=$EC" >> "$PREFIX"Makefile.eu
fi
export PWD=`pwd`
export PPWD=`cd .. && pwd`
# The following works around a bug in djgpp's pwd
# that at times returns the parent of the current
# directory instead of the current directory.
if [ ! -e "$PPWD"/source ] && [ -e "$PWD"/source ]; then
	# bug is present
	echo "Information: Working around djgpp's PWD bug"
	export PPWD=$PWD
fi
export TRUNKDIR=$PPWD
mkdir -p $BUILDDIR
export BUILDDIR=`cd "$BUILDDIR" && pwd`
echo TRUNKDIR=$TRUNKDIR >> "$PREFIX"Makefile.eu
echo BUILDDIR=$BUILDDIR >> "$PREFIX"Makefile.eu
if [ "$USECYPPATH" = "true" ]; then
echo CYPTRUNKDIR=`cygpath -a -m $TRUNKDIR` >> "$PREFIX"Makefile.eu
echo CYPBUILDDIR=`cygpath -a -m $BUILDDIR` >> "$PREFIX"Makefile.eu
else
echo CYPTRUNKDIR=$TRUNKDIR >> "$PREFIX"Makefile.eu
echo CYPBUILDDIR=$BUILDDIR >> "$PREFIX"Makefile.eu
fi
echo XLTTARGETCC=$XLTTARGETCC >> "$PREFIX"Makefile.eu
# Make a generic Makefile that simply includes Makefile.gnu
echo include Makefile.gnu > Makefile
