#
# Setup compiler specific flags
#

if $(JAM_TOOLSET) = WATCOM
{
    CCFLAGS = /bt=nt /mf /w0 /zq /j /zp4 /fp5 /fpi87 /5r /otimra /ol /zp8 /s /I.. /Ipcre
        -DMANAGED_MEM -DEOW -DEWATCOM ;
}
else if $(JAM_TOOLSET) = VISUALC
{
    CCFLAGS = -D_CRT_NONSTDC_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -DEMSVC ;
}
else if $(JAM_TOOLSET) = DJGPP
{
    CCFLAGS = -w -ffast-math -O2 -Os ;
}
else if $(JAM_TOOLSET) = MINGW
{
    CCFLAGS = -w -ffast-math -O2 -Os -DEMINGW -mno-cygwin -mwindows ;
}
else
{
    CCFLAGS = -w -ffast-math -O2 -Os ;
}

#
# Setup platform specific flags
#

if $(NT)
{
    CCFLAGS += -DEWINDOWS ;
}
else if $(UNIX)
{
    CCFLAGS += -DEUNIX ;
    if $(OS) = MACOSX
    {
        CCFLAGS += -DEBSD -DEBSD62 -DEOSX ;
    }
    else if $(OS) = SUNOS
    {
        CCFLAGS += -DEBSD -DEBSD62 -DESUNOS ;
    }
    else if $(OS) = FREEBSD
    {
        CCFLAGS += -DEBSD -DEBSD62 -DEFREEBSD ;
    }
    else if $(OS) = OPENBSD
    {
        CCFLAGS += -DEBSD -DEBSD62 -DEOPENBSD ;
    }
    else if $(OS) = NETBSD
    {
        CCFLAGS += -DEBSD -DEBSD62 -DENETBSD ;
    }
    else if $(OS) = LINUX
    {
        CCFLAGS += -DELINUX ;
    }
    else
    {
        Echo $(OS) is not supported by Euphoria ;
        Exit ;
    }
}
else
{
    Echo $(OS) is not supported by Euphoria ;
    Exit ;
}

#
# This rule helps debugging as it prints out a variable recursively
#
rule EchoVar
{
    local __i ;
    for __i in $(1)
    {
        echo $(__i) "=" [$($(__i))] ;
    }
}

#
# Generates be_rev.c
#
rule RevGet
{
    Clean clean : $(<) ;
    MakeLocate $(<) : $(BUILD_DIR) ;
}

actions RevGet
{
    eui revget.ex -output $(<)
}

#
# Generate the be_magic.c file
#
rule MagicGet
{
    Depends $(<) : be_execute$(SUFOBJ) ;
    Clean clean : $(<) ;
    MakeLocate $(<) : $(BUILD_DIR) ;

    MagicGet1 $(<) : be_execute$(SUFOBJ) ;
}

actions MagicGet1
{
    eui findjmp.ex $(<) $(>)
}

#
# EuMain builds an executable from euphoria source
#
rule EuMain
{
    local _s _t ;

    # so 'jam foo' works when it's really foo.exe

    # Add grist to file names
    # Add suffix to exe

    _s = [ FGristFiles $(>) ] ;
    _t = [ FAppendSuffix $(<) : $(SUFEXE) ] ;

    if $(_t) != $(<)
    {
        Depends $(<) : $(_t) ;
        NotFile $(<) ;
    }

    Depends exe : $(_t) ;
    Depends $(_t) : $(_s) ;

    # Setup the rules that will scan Euphoria source looking
    # for include statements, thus adding them as dependencies
    HDRRULE on $(_s) = HdrRule ;
    HDRSCAN on $(_s) = "^[^-\"\'\/]*include[ ]+([^ ]+.[ex])" ;
    HDRSEARCH on $(_s) = $(SEARCH_SOURCE:E) $(SUBDIRHDRS) $(HDRS) $(STDHDRS) ;
    HDRGRIST on $(_s) = $(HDRGRIST) ;

    # Add our resulting executable to the clean target
    Clean clean : $(_t) ;

    MakeLocate $(_t) : $(BUILD_DIR) ;

    Depends all : $(<) ;
    Depends $(<) : $(>) ;
    Depends $(<) : $(USER_LIBRARY) ;

    EuMain1 $(<) : $(>) ;
}

actions EuMain1
{
    euc $(EUCFLAGS) -o $(<) -builddir $(BUILD_DIR) -lib $(USER_LIBRARY)$(SUFLIB) $(>)
}

