-- This program disassembles be_execute.obj
-- and parses the assembler code to determine
-- what jumptab should have been set to.
-- Algorithm Thanks to Jim Brown
include std/os.e
include std/types.e
include std/convert.e

sequence
	cmds = command_line(),
	obj = "be_execute.obj",
	outfile = "be_magic.c"

if length(cmds) > 2 then
	outfile = cmds[3]
end if

if length(cmds) > 3 then
	obj = cmds[4]
end if

system( "wdis " & obj & " > be_execute.asm", 0 )

integer asm = open("be_execute.asm","r")
object line
atom exec_addr = 0, jmp_addr = 0

line = ""

while sequence(line) and not
	 match( " Execute_:", line ) do
	line = gets(asm)
end while

if sequence(line) and length(line) > 7 then
	exec_addr = hex_text(line[1..8] )
end if

line = gets(asm)

while sequence(line) and not match( " DD\t", line ) do
	line = gets(asm)
end while

jmp_addr = hex_text(line[1..8])
close(asm)

if exec_addr and jmp_addr then
	integer fh = open(outfile, "w")
	if fh = -1 then
		printf(2, "Cannot open \"%s\" for writing\n", {outfile})
		abort(1)
	end if
	-- create .c file for jumptab address
	printf(fh,"/* Important! The offset below is based on the object code WATCOM\n" &
		 " * generates for be_execute.c. It is the address of the internal jump table\n" &
		 " * generated by the compiler for the main switch statement in be_execute.c.\n" &
		 " * This file is automatically generated by findjmp.ex.\n" & 
		 " */\n" &
		"void Execute(int *);\nint ** jumptab = ((int**)Execute)+%d;\n", 
	     	{jmp_addr - exec_addr }/4 )
	close(fh)

else
	abort(1) -- tell Make to quit
end if
