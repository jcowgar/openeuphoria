<!-- GENERATED BY A EUPHORIA PROGRAM. DO NOT EDIT! -->


<html>
<head><title>Euphoria Reference Manual Part II - Section 3</title>
<style type="text/css">
<!--
body        {background-color: "#FFFFFF";}
a           {text-decoration: none;}
a:link      {color: "#0033BB"; text-decoration: underline;}
a:visited   {color: "#006699"; text-decoration: underline;}
a:active    {color: red; text-decoration: underline;}
a:hover     {color: red; text-decoration: underline;}
a.blue    {text-decoration: none;}
a.blue:link      {color: "#5500FF"; text-decoration: underline;}
a.blue:visited   {color: "#5500FF"; text-decoration: underline;}
a.blue:active    {color: red; text-decoration: underline;}
a.blue:hover     {color: red; text-decoration: underline;}
a.brown      {text-decoration: none;}
a.brown:link      {color: "#993333"; text-decoration: underline;}
a.brown:visited   {color: "#993333"; text-decoration: underline;}
a.brown:active    {color: red; text-decoration: underline;}
a.brown:hover     {color: red; text-decoration: underline;}
-->
</style>

</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">
<br>


<a name=PATHSEP></a><font color="#006633" size=+2><br>
<center><b>PATHSEP</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">include file.e<BR>
PATHSEP
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>The platform's path separator character.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>When on DOS32 or WIN32, '\\'. When on LINUX or FREEBSD, '/'
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">x = PATHSEP</font>
<font color="#FF0055">-- x is '/' or '\\' depending on platform</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#pathinfo">pathinfo</a>
</td></tr>


</table>




<a name=pathinfo></a><font color="#006633" size=+2><br>
<center><b>pathinfo</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">include file.e<BR>
s2 = pathinfo(s1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Parse the fully qualified pathname (s1) and return a sequence containing directory name,
file name and file extension.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The host operating system path separator is used.
</td></tr>


<tr><td valign=top><b>Example 1:</b></td>
<td>DOS32/WIN32
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">info = pathinfo(</font><font color="#00A033">"C:\\euphoria\\docs\\readme.txt"</font><font color="#330033">)</font>
<font color="#FF0055">-- info is {"C:\\euphoria\\docs", "readme", "txt"}</font>
</pre></td></tr>


<tr><td valign=top><b>Example 2:</b></td>
<td>Linux/FreeBSD
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">info = pathinfo(</font><font color="#00A033">"/opt/euphoria/docs/readme.txt"</font><font color="#330033">)</font>
<font color="#FF0055">-- info is {"/opt/euphoria/docs", "readme", "txt"}</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#dirname">dirname</a>,
<a href="lib_e_g.htm#filename">filename</a>,
<a href="lib_e_g.htm#fileext">fileext</a>
</td></tr>


</table>




<a name=palette></a><font color="#006633" size=+2><br>
<center><b>palette</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 x = palette(i, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Change the color for color number i to s, where s is a sequence
 of color intensities: {red, green, blue}. Each value in s can be
 from 0 to 63. If successful, a 3-element sequence containing the
 previous color for i will be returned, and all pixels on the
 screen with value i will be set to the new color. If
 unsuccessful, the atom -1 will be returned. 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">x = palette(0, </font><font color="#993333">{</font><font color="#330033">15, 40, 10</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- color number 0 (normally black) is changed to a shade</font>
<font color="#FF0055">-- of mainly green.</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#all_palette">all_palette</a>
</td></tr>

</table>


<a name=peek></a><font color="#006633" size=+2><br>
<center><b>peek</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = peek(a)<BR>
 or ...<BR>
  s = peek({a, i})
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a single byte value in the range 0 to 255 from machine
 address a, or return a sequence containing i consecutive byte
 values starting at address a in memory.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Since addresses are 32-bit numbers, they can be larger than the largest
 value of type integer (31-bits). Variables that hold an address should
 therefore be declared as <font color="#993333"><b>atoms</b></font>.
<P>
It is faster to read several bytes at once using the second
 form of peek() than it is to read one byte at a time in a loop.
<P>
Remember that peek takes just one argument, which in the
 second form is actually a 2-element sequence.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td> The following are equivalent:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033"></font>
<font color="#FF0055">-- method 1</font>
<font color="#330033">s = {</font><font color="#FF00FF">peek</font><font color="#993333">(</font><font color="#330033">100</font><font color="#993333">)</font><font color="#330033">, </font><font color="#FF00FF">peek</font><font color="#993333">(</font><font color="#330033">101</font><font color="#993333">)</font><font color="#330033">, </font><font color="#FF00FF">peek</font><font color="#993333">(</font><font color="#330033">102</font><font color="#993333">)</font><font color="#330033">, </font><font color="#FF00FF">peek</font><font color="#993333">(</font><font color="#330033">103</font><font color="#993333">)</font><font color="#330033">}</font>
<font color="#330033"></font>
<font color="#FF0055">-- method 2</font>
<font color="#330033">s = </font><font color="#FF00FF">peek</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">100, 4</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#poke">poke</a>,
<a href="lib_p_r.htm#peeks">peeks</a>,
<a href="lib_p_r.htm#peek2s">peek2s</a>,
<a href="lib_p_r.htm#peek2u">peek2u</a>,
<a href="lib_p_r.htm#peek4s">peek4s</a>,
<a href="lib_p_r.htm#peek4u">peek4u</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_e_g.htm#free">free</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_e_g.htm#free_low">free_low</a>,
<a href="lib_c_d.htm#call">call</a>
</td></tr>

</table>

<a name=peeks></a><font color="#006633" size=+2><br>
<center><b>peeks</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = peeks(a)<BR>
 or ...<BR>
  s = peeks({a, i})
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a single signed byte value in the range -128 to 127 from machine
 address a, or return a sequence containing i consecutive signed byte
 values starting at address a in memory.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Since addresses are 32-bit numbers, they can be larger than the largest
 value of type integer (31-bits). Variables that hold an address should
 therefore be declared as <font color="#993333"><b>atoms</b></font>.
<P>
It is faster to read several bytes at once using the second
 form of peeks() than it is to read one byte at a time in a loop.
<P>
Remember that peek takes just one argument, which in the
 second form is actually a 2-element sequence.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td> The following are equivalent:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033"></font>
<font color="#FF0055">-- method 1</font>
<font color="#330033">s = {peeks</font><font color="#993333">(</font><font color="#330033">100</font><font color="#993333">)</font><font color="#330033">, peeks</font><font color="#993333">(</font><font color="#330033">101</font><font color="#993333">)</font><font color="#330033">, peeks</font><font color="#993333">(</font><font color="#330033">102</font><font color="#993333">)</font><font color="#330033">, peeks</font><font color="#993333">(</font><font color="#330033">103</font><font color="#993333">)</font><font color="#330033">}</font>
<font color="#330033"></font>
<font color="#FF0055">-- method 2</font>
<font color="#330033">s = peeks(</font><font color="#993333">{</font><font color="#330033">100, 4</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#poke">poke</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#peek2s">peek2s</a>,
<a href="lib_p_r.htm#peek2u">peek2u</a>,
<a href="lib_p_r.htm#peek4s">peek4s</a>,
<a href="lib_p_r.htm#peek4u">peek4u</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_e_g.htm#free">free</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_e_g.htm#free_low">free_low</a>,
<a href="lib_c_d.htm#call">call</a>
</td></tr>

</table>

<a name=peek2s></a><font color="#006633" size=+2><br>
<center><b>peek2s</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = peek2s(a)<BR>
 or ...<BR>
  s = peek2s({a, i})
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a signed two-byte value in the range -32768 to 32767 from machine
 address a, or return a sequence containing i consecutive byte
 values starting at address a in memory.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Since addresses are 32-bit numbers, they can be larger than the largest
 value of type integer (31-bits). Variables that hold an address should
 therefore be declared as <font color="#993333"><b>atoms</b></font>.
<P>
It is faster to read several bytes at once using the second
 form of peek2s() than it is to read one byte at a time in a loop.
<P>
Remember that peek takes just one argument, which in the
 second form is actually a 2-element sequence.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td> The following are equivalent:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033"></font>
<font color="#FF0055">-- method 1</font>
<font color="#330033">s = {peek2s</font><font color="#993333">(</font><font color="#330033">100</font><font color="#993333">)</font><font color="#330033">, peek2s</font><font color="#993333">(</font><font color="#330033">102</font><font color="#993333">)</font><font color="#330033">, peek2s</font><font color="#993333">(</font><font color="#330033">104</font><font color="#993333">)</font><font color="#330033">, peek2s</font><font color="#993333">(</font><font color="#330033">106</font><font color="#993333">)</font><font color="#330033">}</font>
<font color="#330033"></font>
<font color="#FF0055">-- method 2</font>
<font color="#330033">s = peek2s(</font><font color="#993333">{</font><font color="#330033">100, 4</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#poke2">poke</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#peeks">peeks</a>,
<a href="lib_p_r.htm#peek2u">peek2u</a>,
<a href="lib_p_r.htm#peek4s">peek4s</a>,
<a href="lib_p_r.htm#peek4u">peek4u</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_e_g.htm#free">free</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_e_g.htm#free_low">free_low</a>,
<a href="lib_c_d.htm#call">call</a>
</td></tr>

</table>

<a name=peek2u></a><font color="#006633" size=+2><br>
<center><b>peek2u</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = peek2u(a)<BR>
 or ...<BR>
  s = peek2u({a, i})
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a two-byte value in the range 0 to 65535 from machine
 address a, or return a sequence containing i consecutive byte
 values starting at address a in memory.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Since addresses are 32-bit numbers, they can be larger than the largest
 value of type integer (31-bits). Variables that hold an address should
 therefore be declared as <font color="#993333"><b>atoms</b></font>.
<P>
It is faster to read several bytes at once using the second
 form of peek2u() than it is to read one byte at a time in a loop.
<P>
Remember that peek takes just one argument, which in the
 second form is actually a 2-element sequence.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td> The following are equivalent:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033"></font>
<font color="#FF0055">-- method 1</font>
<font color="#330033">s = {peek2u</font><font color="#993333">(</font><font color="#330033">100</font><font color="#993333">)</font><font color="#330033">, peek2u</font><font color="#993333">(</font><font color="#330033">102</font><font color="#993333">)</font><font color="#330033">, peek2u</font><font color="#993333">(</font><font color="#330033">104</font><font color="#993333">)</font><font color="#330033">, peek2u</font><font color="#993333">(</font><font color="#330033">106</font><font color="#993333">)</font><font color="#330033">}</font>
<font color="#330033"></font>
<font color="#FF0055">-- method 2</font>
<font color="#330033">s = peek2u(</font><font color="#993333">{</font><font color="#330033">100, 4</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#poke2">poke</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#peeks">peeks</a>,
<a href="lib_p_r.htm#peek2s">peek2s</a>,
<a href="lib_p_r.htm#peek4s">peek4s</a>,
<a href="lib_p_r.htm#peek4u">peek4u</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_e_g.htm#free">free</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_e_g.htm#free_low">free_low</a>,
<a href="lib_c_d.htm#call">call</a>
</td></tr>

</table>

<a name=peek4s></a><font color="#006633" size=+2><br>
<center><b>peek4s</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> a2 = peek4s(a1)<BR>
 or ...<BR>
  s = peek4s({a1, i})
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a 4-byte (32-bit) signed value in the range -2147483648 to
 +2147483647 from machine address a1, or return a sequence
 containing i consecutive 4-byte signed values starting at
 address a1 in memory.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The 32-bit values returned by peek4s() may be too large for the Euphoria
 integer type (31-bits), so you should use
 <font color="#993333"><b>atom</b></font> variables.
<P>
Since machine addresses are 32-bit numbers, they can also be too large for
 Euphoria's integer type. Variables that hold an address should therefore
 be declared as <font color="#993333"><b>atoms</b></font>.
<P>
It is faster to read several 4-byte values at once using the
 second form of peek4s() than it is to read one 4-byte value at
 a time in a loop.
<P>
Remember that peek4s() takes just one argument, which in the
 second form is actually a 2-element sequence.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td> The following are equivalent:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033"></font>
<font color="#FF0055">-- method 1</font>
<font color="#330033">s = {</font><font color="#FF00FF">peek4s</font><font color="#993333">(</font><font color="#330033">100</font><font color="#993333">)</font><font color="#330033">, </font><font color="#FF00FF">peek4s</font><font color="#993333">(</font><font color="#330033">104</font><font color="#993333">)</font><font color="#330033">, </font><font color="#FF00FF">peek4s</font><font color="#993333">(</font><font color="#330033">108</font><font color="#993333">)</font><font color="#330033">, </font><font color="#FF00FF">peek4s</font><font color="#993333">(</font><font color="#330033">112</font><font color="#993333">)</font><font color="#330033">}</font>
<font color="#330033"></font>
<font color="#FF0055">-- method 2</font>
<font color="#330033">s = </font><font color="#FF00FF">peek4s</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">100, 4</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#peek4u">peek4u</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#peeks">peeks</a>,
<a href="lib_p_r.htm#peek2s">peek2s</a>,
<a href="lib_p_r.htm#peek2s">peek2u</a>,
<a href="lib_p_r.htm#poke4">poke4</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_e_g.htm#free">free</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_e_g.htm#free_low">free_low</a>,
<a href="lib_c_d.htm#call">call</a>
</td></tr>

</table>


<a name=peek4u></a><font color="#006633" size=+2><br>
<center><b>peek4u</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> a2 = peek4u(a1)<BR>
 or ...<BR>
  s = peek4u({a1, i})
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a 4-byte (32-bit) unsigned value in the range 0 to
 4294967295 from machine address a1, or return a sequence
 containing i consecutive 4-byte unsigned values starting at
 address a1 in memory.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The 32-bit values returned by peek4u() may be too large for the Euphoria
 integer type (31-bits), so you should use
 <font color="#993333"><b>atom</b></font> variables.
<P>
Since machine addresses are 32-bit numbers, they can also be too large for
 Euphoria's integer type. Variables that hold an address should therefore
 be declared as <font color="#993333"><b>atoms</b></font>.
<P>
It is faster to read several 4-byte values at once using the
 second form of peek4u() than it is to read one 4-byte value at
 a time in a loop.
<P>
Remember that peek4u() takes just one argument, which in the
 second form is actually a 2-element sequence.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td> The following are equivalent:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033"></font>
<font color="#FF0055">-- method 1</font>
<font color="#330033">s = {</font><font color="#FF00FF">peek4u</font><font color="#993333">(</font><font color="#330033">100</font><font color="#993333">)</font><font color="#330033">, </font><font color="#FF00FF">peek4u</font><font color="#993333">(</font><font color="#330033">104</font><font color="#993333">)</font><font color="#330033">, </font><font color="#FF00FF">peek4u</font><font color="#993333">(</font><font color="#330033">108</font><font color="#993333">)</font><font color="#330033">, </font><font color="#FF00FF">peek4u</font><font color="#993333">(</font><font color="#330033">112</font><font color="#993333">)</font><font color="#330033">}</font>
<font color="#330033"></font>
<font color="#FF0055">-- method 2</font>
<font color="#330033">s = </font><font color="#FF00FF">peek4u</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">100, 4</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#peek4s">peek4s</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#poke4">poke4</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_e_g.htm#free">free</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_e_g.htm#free_low">free_low</a>,
<a href="lib_c_d.htm#call">call</a>
</td></tr>

</table>

<a name=peek_string></a><font color="#006633" size=+2><br>
<center><b>peek_string</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> s = peek_string(a)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a sequence of text from a null terminated string starting at
 machine address a.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td> The following reads the null-terminated string starting at 100 
  into the sequence s:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033"></font>
<font color="#330033">s = peek_string(100)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#poke">poke</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_e_g.htm#free">free</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_e_g.htm#free_low">free_low</a>
</td></tr>

</table>


<a name=PI></a><font color="#006633" size=+2><br>
<center><b>PI</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include math.e<BR>
 PI
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>PI (3.141592653589793238) has been defined as a global constant.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Enough digits have been used to attain the maximum accuracy
 possible for a Euphoria atom.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">x = PI  </font><font color="#FF0055">-- x is 3.141592653589793238</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#sin">sin</a>,
<a href="lib_c_d.htm#cos">cos</a>,
<a href="lib_s_t.htm#tan">tan</a>
</td></tr>

</table>


<a name=pixel></a><font color="#006633" size=+2><br>
<center><b>pixel</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> pixel(x1, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Set one or more pixels on a <font color="#CC3366">pixel-graphics</font>
 screen starting at point s, where s is a 2-element screen coordinate {x, y}.
 If x1 is an atom, one pixel will be set to the color indicated by x1.
 If x1 is a sequence then a number of pixels will be set, starting
 at s and moving to the right (increasing x value, same y value).
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>When x1 is a sequence, a very fast algorithm is used to put the
 pixels on the screen. It is much faster to call pixel() once,
 with a sequence of pixel colors, than it is to call it many
 times, plotting one pixel color at a time.
<P>
In graphics mode 19, pixel() is highly optimized.
<p>
Any off-screen pixels will be safely clipped.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">pixel</font><font color="#330033">(BLUE, </font><font color="#993333">{</font><font color="#330033">50, 60</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- the point {50,60} is set to the color BLUE</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">pixel</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">BLUE, GREEN, WHITE, RED</font><font color="#993333">}</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">50,60</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- {50,60} set to BLUE</font>
<font color="#FF0055">-- {51,60} set to GREEN</font>
<font color="#FF0055">-- {52,60} set to WHITE</font>
<font color="#FF0055">-- {53,60} set to RED</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get_pixel">get_pixel</a>,
<a href="lib_e_g.htm#graphics_mode">graphics_mode</a>
</td></tr>

</table>


<a name=platform></a><font color="#006633" size=+2><br>
<center><b>platform</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">
 i = platform()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>platform() is a function built-in to the interpreter. It indicates
 the platform that the program is being executed on:
 <font color="#CC3366"><b>DOS32</b></font>,
 <font color="#CC3366"><b>WIN32</b></font>,
 <font color="#CC3366"><b>Linux</b></font> or
 <font color="#CC3366"><b>FreeBSD</b></font>.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>When <font color="#993333"><b>ex.exe</b></font> is running, the platform
 is DOS32. When <font color="#993333"><b>exw.exe</b></font>
 is running the platform is WIN32. When 
 <font color="#993333"><b>exu</b></font> is running the platform is LINUX
 (or FREEBSD).
<P>
The include file <font color="#5500FF"><b>misc.e</b></font> contains the
 following constants:
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">    global constant </font><font color="#330033">DOS32 = 1,</font>
<font color="#330033">                    WIN32 = 2,</font>
<font color="#330033">                    LINUX = 3,</font>
<font color="#330033">                    FREEBSD = 3</font>
</pre></td></tr>

<tr><td valign=top><b></b></td>
<td>Use platform() when you want to execute different code depending
 on which platform the program is running on.

<P>
 Additional platforms will be added as Euphoria is ported to new
 machines and operating environments.

<P>
 The call to platform() costs nothing. It is optimized
 at compile-time into the appropriate integer value: 1, 2 or 3.
</td></tr>


<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">if </font><font color="#FF00FF">platform</font><font color="#330033">() = WIN32 </font><font color="#0000FF">then</font>
<font color="#FF0055">    -- call system Beep routine</font>
<font color="#330033">    err = </font><font color="#FF00FF">c_func</font><font color="#330033">(Beep, </font><font color="#993333">{</font><font color="#330033">0,0</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#0000FF">elsif </font><font color="#FF00FF">platform</font><font color="#330033">() = DOS32 </font><font color="#0000FF">then</font>
<font color="#FF0055">    -- make beep</font>
<font color="#330033">    sound(500)</font>
<font color="#330033">    t = </font><font color="#FF00FF">time</font><font color="#330033">()</font>
<font color="#0000FF">    while </font><font color="#FF00FF">time</font><font color="#330033">() < t + 0.5 </font><font color="#0000FF">do</font>
<font color="#0000FF">    end while</font>
<font color="#330033">    sound(0)</font>
<font color="#0000FF">else</font>
<font color="#FF0055">    -- do nothing (Linux/FreeBSD)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td>
 <a class="blue" href="platform.htm"><b>platform.doc</b>
 </a>
</td></tr>

</table>


<a name=poke></a><font color="#006633" size=+2><br>
<center><b>poke</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> poke(a, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>If x is an atom, write a single byte value to memory address a.<P>
If x is a sequence, write a sequence of byte values to
 consecutive memory locations starting at location a.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The lower 8-bits of each byte value, i.e. <b>remainder(x, 256)</b>,
 is actually stored in memory.
<P>
It is faster to write several bytes at once by poking a sequence
 of values, than it is to write one byte at a time in a loop.
<P>
Writing to the screen memory with poke() can be much faster than using
 <a href="lib_p_r.htm#puts">puts()</a> or
 <a href="lib_p_r.htm#printf">printf()</a>, but the programming is more
 difficult. In most cases the speed is not needed. For example, the Euphoria
 editor, <font color="#993333"><b>ed</b></font>, never uses poke().
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = allocate(100)   </font><font color="#FF0055">-- allocate 100 bytes in memory</font>
<font color="#330033"></font>
<font color="#FF0055">-- poke one byte at a time:</font>
<font color="#FF00FF">poke</font><font color="#330033">(a, 97)</font>
<font color="#FF00FF">poke</font><font color="#330033">(a+1, 98)</font>
<font color="#FF00FF">poke</font><font color="#330033">(a+2, 99)</font>
<font color="#330033"></font>
<font color="#FF0055">-- poke 3 bytes at once:</font>
<font color="#FF00FF">poke</font><font color="#330033">(a, </font><font color="#993333">{</font><font color="#330033">97, 98, 99</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\callmach.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#poke4">poke4</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_e_g.htm#free">free</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_e_g.htm#free_low">free_low</a>,
<a href="lib_c_d.htm#call">call</a>,
<a class="blue" href="library.htm#safe"><b>safe.e</b></a>
</td></tr>

</table>

<a name=poke2></a><font color="#006633" size=+2><br>
<center><b>poke2</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> poke2(a, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>If x is an atom, write a word (two-byte) value to memory address a.<P>
If x is a sequence, write a sequence of word values to
 consecutive memory locations starting at location a.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The lower 16-bits of each byte value, i.e. <b>remainder(x, 65535)</b>,
 is actually stored in memory.
<P>
It is faster to write several words at once by poking a sequence
 of values, than it is to write one word at a time in a loop.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = allocate(100)   </font><font color="#FF0055">-- allocate 100 bytes in memory</font>
<font color="#330033"></font>
<font color="#FF0055">-- poke one word at a time:</font>
<font color="#FF00FF">poke</font><font color="#330033">(a, 10097)</font>
<font color="#FF00FF">poke</font><font color="#330033">(a+2, 10098)</font>
<font color="#FF00FF">poke</font><font color="#330033">(a+4, 10099)</font>
<font color="#330033"></font>
<font color="#FF0055">-- poke 3 words at once:</font>
<font color="#FF00FF">poke</font><font color="#330033">(a, </font><font color="#993333">{</font><font color="#330033">10097, 10098, 10099</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#peek2u">peek2u</a>,
<a href="lib_p_r.htm#peek2u">peek2s</a>,
<a href="lib_p_r.htm#poke">poke</a>,
<a href="lib_p_r.htm#poke4">poke4</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_e_g.htm#free">free</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_e_g.htm#free_low">free_low</a>,
<a href="lib_c_d.htm#call">call</a>,
<a class="blue" href="library.htm#safe"><b>safe.e</b></a>
</td></tr>

</table>

<a name=poke4></a><font color="#006633" size=+2><br>
<center><b>poke4</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> poke4(a, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>If x is an atom, write a 4-byte (32-bit) value to memory
 address a.<P>
If x is a sequence, write a sequence of 4-byte values to
 consecutive memory locations starting at location a.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The value or values to be stored must not exceed 32-bits in size.
<P>
It is faster to write several 4-byte values at once by poking
 a sequence of values, than it is to write one 4-byte value at a
 time in a loop.
<P>
The 4-byte values to be stored can be negative or positive.
 You can read them back with either peek4s() or peek4u().
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = allocate(100)   </font><font color="#FF0055">-- allocate 100 bytes in memory</font>
<font color="#330033"></font>
<font color="#FF0055">-- poke one 4-byte value at a time:</font>
<font color="#FF00FF">poke4</font><font color="#330033">(a, 9712345)</font>
<font color="#FF00FF">poke4</font><font color="#330033">(a+4, #FF00FF00)</font>
<font color="#FF00FF">poke4</font><font color="#330033">(a+8, -12345)</font>
<font color="#330033"></font>
<font color="#FF0055">-- poke 3 4-byte values at once:</font>
<font color="#FF00FF">poke4</font><font color="#330033">(a, </font><font color="#993333">{</font><font color="#330033">9712345, #FF00FF00, -12345</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#peek4u">peek4u</a>,
<a href="lib_p_r.htm#peek4s">peek4s</a>,
<a href="lib_p_r.htm#poke">poke</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_c_d.htm#call">call</a>
</td></tr>

</table>


<a name=polygon></a><font color="#006633" size=+2><br>
<center><b>polygon</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 polygon(i1, i2, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Draw a polygon with 3 or more vertices given in s, on a
 <font color="#CC3366">pixel-graphics</font> screen using a certain
 color i1. Fill the area if i2 is 1. Don't fill if i2 is 0.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">polygon(GREEN, 1, </font><font color="#993333">{</font><font color="#0000FF">{</font><font color="#330033">100, 100</font><font color="#0000FF">}</font><font color="#330033">, </font><font color="#0000FF">{</font><font color="#330033">200, 200</font><font color="#0000FF">}</font><font color="#330033">, </font><font color="#0000FF">{</font><font color="#330033">900, 700</font><font color="#0000FF">}</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- makes a solid green triangle.</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#draw_line">draw_line</a>,
<a href="lib_e_g.htm#ellipse">ellipse</a>
</td></tr>

</table>


<a name=position></a><font color="#006633" size=+2><br>
<center><b>position</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> position(i1, i2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Set the cursor to line i1, column i2, where the top left corner
 of the screen is line 1, column 1. The next character displayed
 on the screen will be printed at this location. position() will
 report an error if the location is off the screen.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>position() works in both <font color="#CC3366">text and pixel-graphics
 modes</font>.
<p>
The coordinate system for displaying text is different from the one for
 displaying pixels. Pixels are displayed such that the top-left is (x=0,y=0)
 and the first coordinate controls the horizontal, left-right location.
 In <font color="#CC3366">pixel-graphics modes</font>
 you can display both text and pixels. position() only sets the
 line and column for the text that you display, not the pixels
 that you plot. There is no corresponding routine for setting
 the next pixel position.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">position</font><font color="#330033">(2,1)</font>
<font color="#FF0055">-- the cursor moves to the beginning of the second line from</font>
<font color="#FF0055">-- the top</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get_position">get_position</a>,
<a href="lib_p_r.htm#puts">puts</a>,
<a href="lib_p_r.htm#print">print</a>,
<a href="lib_p_r.htm#printf">printf</a>
</td></tr>

</table>


<a name=power></a><font color="#006633" size=+2><br>
<center><b>power</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x3 = power(x1, x2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Raise x1 to the power x2
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The arguments to this function may be atoms or sequences. The
 rules for <a href="refman_2.htm#26">operations on sequences</a> apply.
<P>
Powers of 2 are calculated very efficiently.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">? </font><font color="#FF00FF">power</font><font color="#330033">(5, 2)</font>
<font color="#FF0055">-- 25 is printed</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">? </font><font color="#FF00FF">power</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">5, 4, 3.5</font><font color="#993333">}</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">2, 1, -0.5</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- {25, 4, 0.534522} is printed</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 3:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">? </font><font color="#FF00FF">power</font><font color="#330033">(2, </font><font color="#993333">{</font><font color="#330033">1, 2, 3, 4</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- {2, 4, 8, 16}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 4:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">? </font><font color="#FF00FF">power</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">1, 2, 3, 4</font><font color="#993333">}</font><font color="#330033">, 2)</font>
<font color="#FF0055">-- {1, 4, 9, 16}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#log">log</a>,
<a href="lib_s_t.htm#sqrt">sqrt</a>
</td></tr>

</table>


<a name=prepend></a><font color="#006633" size=+2><br>
<center><b>prepend</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> s2 = prepend(s1, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Prepend x to the start of sequence s1. The length of s2 will be
 <a href="lib_h_o.htm#length">length(s1)</a> + 1.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>If x is an atom this is the same as <b>s2 = x & s1</b>. If x is a
 sequence it is definitely not the same.
<P>
The case where s1 and s2 are the same variable is handled
 very efficiently.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">prepend</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">1,2,3</font><font color="#993333">}</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">0,0</font><font color="#993333">}</font><font color="#330033">)   </font><font color="#FF0055">-- {{0,0}, 1, 2, 3}</font>
<font color="#330033"></font>
<font color="#FF0055">-- Compare with concatenation:</font>
<font color="#330033"></font>
<font color="#330033">{0,0} & {1,2,3}           </font><font color="#FF0055">-- {0, 0, 1, 2, 3}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = {}</font>
<font color="#0000FF">for </font><font color="#330033">i = 1 </font><font color="#0000FF">to </font><font color="#330033">10 </font><font color="#0000FF">do</font>
<font color="#330033">    s = </font><font color="#FF00FF">prepend</font><font color="#330033">(s, i)</font>
<font color="#0000FF">end for</font>
<font color="#FF0055">-- s is {10,9,8,7,6,5,4,3,2,1}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#append">append</a>,
               <a href="refman_2.htm#27">concatenation operator &</a>,
               <a href="refman_2.htm#28">sequence-formation operator</a>
</td></tr>

</table>


<a name=pretty_print></a><font color="#006633" size=+2><br>
<center><b>pretty_print</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include misc.e<br>
  pretty_print(fn, x, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Print, to file or device fn, an object x, using braces { , , , },
 indentation, and multiple lines to show the structure. 
 
 <p>Several options
 may be supplied in s to control the presentation.
 Pass {} to select the defaults, or set options as below:<br>
   [1] display ASCII characters:<br>
       * 0: never<br>
       * 1: alongside any integers in the printable ASCII range 32..127 (default)<br>
       * 2: like 1, plus display as "string" when all integers of a sequence
            are in the printable ASCII range<br>
       * 3: like 2, but show *only* quoted characters, not numbers,
            for any integers in the printable ASCII range, as well as 
            the whitespace characters: \t \r \n<br>
   [2] amount to indent for each level of sequence nesting - default: 2<br>
   [3] column we are starting at - default: 1<br>
   [4] approximate column to wrap at - default: 78<br>
   [5] format to use for integers - default: "%d"<br>
   [6] format to use for floating-point numbers - default: "%.10g"<br>
   [7] minimum value for printable ASCII - default 32<br>
   [8] maximum value for printable ASCII - default 127<br>
   [9] maximum number of lines to output
 <p>
 If the length of s is less than 8, unspecified options at 
 the end of the sequence will keep the default values.    
 e.g. {0, 5} will choose "never display ASCII", 
 plus 5-character indentation, with defaults for everything else.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The display will start at the current cursor position. Normally you will
want to call pretty_print() when the cursor is in column 1 (after printing
a \n character). If you want to start in a different column, you should
call position() and specify a value for option [3]. This will ensure 
that the first and last braces in a sequence line up vertically.
<p> When specifying the format to use for integers and floating-point numbers,
you can add some decoration, e.g. "(%d)" or "$ %.2f"
</td></tr>


<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">pretty_print(1, </font><font color="#00A033">"ABC"</font><font color="#330033">, </font><font color="#993333">{}</font><font color="#330033">)    </font>
<font color="#330033"></font>
<font color="#330033">{65</font><font color="#00A033">'A'</font><font color="#330033">,66</font><font color="#00A033">'B'</font><font color="#330033">,67</font><font color="#00A033">'C'</font><font color="#330033">}</font>
</pre></td></tr>


<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">pretty_print(1, </font><font color="#993333">{</font><font color="#0000FF">{</font><font color="#330033">1,2,3</font><font color="#0000FF">}</font><font color="#330033">, </font><font color="#0000FF">{</font><font color="#330033">4,5,6</font><font color="#0000FF">}</font><font color="#993333">}</font><font color="#330033">, </font><font color="#993333">{}</font><font color="#330033">)  </font>
<font color="#330033">          </font>
<font color="#330033">{</font>
<font color="#330033">  {1,2,3},</font>
<font color="#330033">  {4,5,6}</font>
<font color="#330033">}</font>
</pre></td></tr>


<tr><td valign=top><b>Example 3:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">pretty_print(1, </font><font color="#993333">{</font><font color="#00A033">"Euphoria"</font><font color="#330033">, </font><font color="#00A033">"Programming"</font><font color="#330033">, </font><font color="#00A033">"Language"</font><font color="#993333">}</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">2</font><font color="#993333">}</font><font color="#330033">)  </font>
<font color="#330033"></font>
<font color="#330033">{</font>
<font color="#00A033">  "Euphoria"</font><font color="#330033">,</font>
<font color="#00A033">  "Programming"</font><font color="#330033">,</font>
<font color="#00A033">  "Language"</font>
<font color="#330033">}</font>
<font color="#330033"> </font>
</pre></td></tr>


<tr><td valign=top><b>Example 4:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">puts</font><font color="#330033">(1, </font><font color="#00A033">"word_list = "</font><font color="#330033">) </font><font color="#FF0055">-- moves cursor to column 13</font>
<font color="#330033">pretty_print(1, </font>
<font color="#330033">             {</font><font color="#993333">{</font><font color="#00A033">"Euphoria"</font><font color="#330033">, 8, 5.3</font><font color="#993333">}</font><font color="#330033">, </font>
<font color="#330033">              {</font><font color="#00A033">"Programming"</font><font color="#330033">, 11, -2.9}, </font>
<font color="#330033">              {</font><font color="#00A033">"Language"</font><font color="#330033">, 8, 9.8}}, </font>
<font color="#330033">             {2, 4, 13, 78, </font><font color="#00A033">"%03d"</font><font color="#330033">, </font><font color="#00A033">"%.3f"</font><font color="#330033">}) </font><font color="#FF0055">-- first 6 of 8 options</font>
<font color="#330033"></font>
<font color="#330033">word_list = {</font>
<font color="#330033">                {</font>
<font color="#00A033">                    "Euphoria"</font><font color="#330033">,</font>
<font color="#330033">                    008,</font>
<font color="#330033">                    5.300</font>
<font color="#330033">                },</font>
<font color="#330033">                {</font>
<font color="#00A033">                    "Programming"</font><font color="#330033">,</font>
<font color="#330033">                    011,</font>
<font color="#330033">                    -2.900</font>
<font color="#330033">                },</font>
<font color="#330033">                {</font>
<font color="#00A033">                    "Language"</font><font color="#330033">,</font>
<font color="#330033">                    008,</font>
<font color="#330033">                    9.800</font>
<font color="#330033">                }</font>
<font color="#330033">            }</font>
<font color="#330033"></font>
</pre></td></tr>



<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#?">?</a>,
<a href="lib_p_r.htm#print">print</a>,
<a href="lib_p_r.htm#puts">puts</a>,
<a href="lib_p_r.htm#printf">printf</a>
</td></tr>

</table>


<a name=print></a><font color="#006633" size=+2><br>
<center><b>print</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> print(fn, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Print, to file or device fn, an object x with braces { , , , }
 to show the structure.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">print</font><font color="#330033">(1, </font><font color="#00A033">"ABC"</font><font color="#330033">)  </font><font color="#FF0055">-- output is:  {65, 66, 67}</font>
<font color="#FF00FF">puts</font><font color="#330033">(1, </font><font color="#00A033">"ABC"</font><font color="#330033">)   </font><font color="#FF0055">-- output is:  ABC</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">print</font><font color="#330033">(1, </font><font color="#FF00FF">repeat</font><font color="#993333">(</font><font color="#0000FF">{</font><font color="#330033">10,20</font><font color="#0000FF">}</font><font color="#330033">, 3</font><font color="#993333">)</font><font color="#330033">)</font>
<font color="#FF0055">-- output is: {{10,20},{10,20},{10,20}}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#?">?</a>,
<a href="lib_p_r.htm#pretty_print">pretty_print</a>,
<a href="lib_p_r.htm#puts">puts</a>,
<a href="lib_p_r.htm#printf">printf</a>,
<a href="lib_e_g.htm#get">get</a>
</td></tr>

</table>



<a name=printf></a><font color="#006633" size=+2><br>
<center><b>printf</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> printf(fn, st, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Print x, to file or device fn, using format string st. 
 If x is a sequence, then format specifiers from st are matched with 
 corresponding elements of x. If x is an atom, then normally st will 
 contain just one format specifier and it will be applied to x,
 however if st contains multiple format specifiers, each one will 
 be applied to the same value x. 
 Thus printf() always takes exactly 3 arguments. Only the length of
 the last argument, containing the values to be printed, will
 vary. The basic format specifiers are:<P>
 %d - print an atom as a decimal integer<BR>
 %x - print an atom as a hexadecimal integer. Negative numbers
      are printed in two's complement, so -1 will print as FFFFFFFF<BR>
 %o - print an atom as an octal integer<BR>
 %s - print a sequence as a string of characters, or print an atom as
 a single character<BR>
 %e - print an atom as a floating-point number with exponential
 notation<BR>
 %f - print an atom as a floating-point number with a decimal
 point but no exponent<BR>
 %g - print an atom as a floating-point number using 
  whichever format seems appropriate, given the magnitude of the number<BR>
 %% - print the '%' character itself<BR>
<P>
Field widths can be added to the basic formats, e.g. %5d, %8.2f,
 %10.4s. The number before the decimal point is the minimum field
 width to be used. The number after the decimal point is the
 precision to be used.
<P>
If the field width is negative, e.g. %-5d then the value will be
 left-justified within the field. Normally it will be right-justified.
 If the field width starts with a leading 0, e.g. %08d
 then leading zeros will be supplied to fill up the field. If the
 field width starts with a '+' e.g. %+7d then a plus sign will be
 printed for positive values.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Watch out for the following common mistake:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">    name=</font><font color="#00A033">"John Smith"</font>
<font color="#FF00FF">    printf</font><font color="#330033">(1, </font><font color="#00A033">"%s"</font><font color="#330033">, name)     </font><font color="#FF0055">-- error!</font>
</pre></td></tr>


<tr><td valign=top><b></b></td>
<td>This will print only the first character, J, of name, as each element
 of name is taken to be a separate value to be formatted. You must
 say this instead:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">    name=</font><font color="#00A033">"John Smith"</font>
<font color="#FF00FF">    printf</font><font color="#330033">(1, </font><font color="#00A033">"%s"</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">name</font><font color="#993333">}</font><font color="#330033">)   </font><font color="#FF0055">-- correct</font>
</pre></td></tr>


<tr><td valign=top><b></b></td>
<td>Now, the third argument of printf() is a one-element sequence
 containing the item to be formatted.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">rate = 7.875</font>
<font color="#FF00FF">printf</font><font color="#330033">(myfile, </font><font color="#00A033">"The interest rate is: %8.2f\n"</font><font color="#330033">, rate)</font>
<font color="#330033"></font>
<font color="#330033">      The interest rate is:     7.88</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">name=</font><font color="#00A033">"John Smith"</font>
<font color="#330033">score=97</font>
<font color="#FF00FF">printf</font><font color="#330033">(1, </font><font color="#00A033">"%15s, %5d\n"</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">name, score</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
<font color="#330033">      John Smith,    97</font>
<font color="#330033"></font>
</pre></td></tr>


<tr><td valign=top><b>Example 3:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">printf</font><font color="#330033">(1, </font><font color="#00A033">"%-10.4s $ %s"</font><font color="#330033">, </font><font color="#993333">{</font><font color="#00A033">"ABCDEFGHIJKLMNOP"</font><font color="#330033">, </font><font color="#00A033">"XXX"</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
<font color="#330033">      ABCD       $ XXX</font>
<font color="#330033"></font>
</pre></td></tr>


<tr><td valign=top><b>Example 4:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">printf</font><font color="#330033">(1, </font><font color="#00A033">"%d  %e  %f  %g"</font><font color="#330033">, 7.75) </font><font color="#FF0055">-- same value in different formats</font>
<font color="#330033"></font>
<font color="#330033">      7  7.750000e+000  7.750000  7.75</font>
<font color="#330033"></font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#sprintf">sprintf</a>,
<a href="lib_p_r.htm#puts">puts</a>,
<a href="lib_h_o.htm#open">open</a>
</td></tr>

</table>


<a name=profile></a><font color="#006633" size=+2><br>
<center><b>profile</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> profile(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Enable or disable profiling at run-time. This works for both
 <font color="#993333"><b>execution-count</b></font> and 
 <font color="#993333"><b>time-profiling</b></font>.
 If i is 1 then profiling will be enabled, and samples/counts will be
 recorded. If i is 0 then profiling will be disabled and
 samples/counts will not be recorded.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>After a "<b>with profile</b>" or "<b>with profile_time</b>" statement,
 profiling is turned on automatically. Use profile(0) to
 turn it off. Use profile(1) to turn it back on when
 execution reaches the code that you wish to focus the
 profile on.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">with </font><font color="#330033">profile_time</font>
<font color="#FF00FF">profile</font><font color="#330033">(0)</font>
<font color="#330033">  ...</font>
<font color="#0000FF">procedure </font><font color="#330033">slow_routine()</font>
<font color="#FF00FF">profile</font><font color="#330033">(1)</font>
<font color="#330033">  ...</font>
<font color="#FF00FF">profile</font><font color="#330033">(0)</font>
<font color="#0000FF">end procedure</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#trace">trace</a>,
               <a href="refman_3.htm#2">profiling</a>,
               <a href="refman_2.htm#6">special top-level statements</a>
</td></tr>

</table>


<a name=prompt_number></a><font color="#006633" size=+2><br>
<center><b>prompt_number</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include get.e<BR>
 a = prompt_number(st, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Prompt the user to enter a number. st is a string of text that will be
 displayed on the screen. s is a sequence of two values {lower, upper}
 which determine the range of values that the user may enter. If the user
 enters a number that is less than lower or greater than upper, he will
 be prompted again. s can be <a href="refman_2.htm#empty_seq">empty</a>,
 {}, if there are no restrictions.
</td></tr>


<tr><td valign=top><b>Comments:</b></td>
<td>If this routine is too simple for your needs, feel free to
     copy it and make your own more specialized version.
</td></tr>


<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">age = prompt_number(</font><font color="#00A033">"What is your age? "</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">0, 150</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">t = prompt_number(</font><font color="#00A033">"Enter a temperature in Celcius:\n"</font><font color="#330033">, </font><font color="#993333">{}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get">get</a>,
<a href="lib_p_r.htm#prompt_string">prompt_string</a>
</td></tr>

</table>


<a name=prompt_string></a><font color="#006633" size=+2><br>
<center><b>prompt_string</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include get.e<BR>
 s = prompt_string(st)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Prompt the user to enter a string of text. st is a string that
 will be displayed on the screen. The string that the user types
 will be returned as a sequence, minus any new-line character. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> If the user happens to type control-Z (indicates end-of-file), 
  "" will be returned.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">name = prompt_string(</font><font color="#00A033">"What is your name? "</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#gets">gets</a>,
<a href="lib_p_r.htm#prompt_number">prompt_number</a>
</td></tr>

</table>


<a name=put_screen_char></a><font color="#006633" size=+2><br>
<center><b>put_screen_char</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include image.e<BR>
  put_screen_char(i1, i2, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Write zero or more characters onto the screen along with their attributes.
i1 specifies the line, and i2 specifies the column where the first
character should be written. The sequence s looks
like: {ascii-code1, attribute1, ascii-code2, attribute2, ...}.
Each pair of elements in s describes one character. The ascii-code
atom contains the ASCII code of the character. The attributes atom contains
the foreground color, background color, and possibly other platform-dependent
information controlling how the character is displayed on the screen.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The length of s must be a multiple of 2. If s has 0 length, nothing
 will be written to the screen.<p>
 It's faster to write several characters to the screen with a single
 call to put_screen_char() than it is to write one character at a time.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF0055">-- write AZ to the top left of the screen</font>
<font color="#FF0055">-- (attributes are platform-dependent)</font>
<font color="#330033">put_screen_char(1, 1, </font><font color="#993333">{</font><font color="#00A033">'A'</font><font color="#330033">, 152, </font><font color="#00A033">'Z'</font><font color="#330033">, 131</font><font color="#993333">}</font><font color="#330033">) </font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get_screen_char">get_screen_char</a>,
<a href="lib_c_d.htm#display_text_image">display_text_image</a>
</td></tr>

</table>


<a name=puts></a><font color="#006633" size=+2><br>
<center><b>puts</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> puts(fn, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Output, to file or device fn, a single byte (atom) or sequence
 of bytes. The low order 8-bits of each value is actually sent
 out. If fn is the screen you will see text characters displayed.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>When you output a sequence of bytes it must not have any (sub)sequences
 within it. It must be a
 <font color="#993333"><b>sequence of atoms</b></font> only.
 (Typically a string of ASCII codes).
 <p>
 Avoid outputting 0's to the screen or to standard output. 
 Your output might get truncated.
 <p>
 Remember that if the output file was opened in text mode, DOS and Windows
 will change \n (10) to \r\n (13 10). 
 Open the file in binary mode if this is not what you want.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">puts</font><font color="#330033">(SCREEN, </font><font color="#00A033">"Enter your first name: "</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">puts</font><font color="#330033">(output, </font><font color="#00A033">'A'</font><font color="#330033">)  </font><font color="#FF0055">-- the single byte 65 will be sent to output</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#printf">printf</a>,
<a href="lib_e_g.htm#gets">gets</a>,
<a href="lib_h_o.htm#open">open</a>
</td></tr>

</table>


<a name=rad2deg></a><font color="#006633" size=+2><br>
<center><b>rad2deg</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">include math.e<BR>
x2 = rad2deg(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Convert an angle measured in radians to an angle measured in degrees
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to an atom or sequence.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">x = rad2deg(3.385938749)</font>
<font color="#FF0055">-- x is 194</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#deg2rad">deg2rad</a>
</td></tr>

</table>


<a name=rand></a><font color="#006633" size=+2><br>
<center><b>rand</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x2 = rand(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a random integer from 1 to x1, where x1 may be from 1 to
 the largest positive value of type integer (1073741823).
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> This function may be applied to an atom or to all elements
 of a sequence.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = </font><font color="#FF00FF">rand</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">10, 20, 30</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- s might be: {5, 17, 23} or {9, 3, 12} etc.</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#set_rand">set_rand</a>
</td></tr>

</table>


<a name=read_bitmap></a><font color="#006633" size=+2><br>
<center><b>read_bitmap</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face ="Arial, Helvetica"> include image.e<BR>
 x = read_bitmap(st)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>st is the name of a .bmp "bitmap" file. The file should be in
 the bitmap format. The most common variations of the format
 are supported. If the file is read successfully the result will
 be a 2-element sequence. The first element is the palette,
 containing intensity values in the range 0 to 255. The
 second element is a 2-d sequence of sequences containing a
 pixel-graphics image. You can pass the palette to all_palette()
 (after dividing it by 4 to scale it). The image can be passed
 to display_image().<P>
Bitmaps of 2, 4, 16 or 256 colors are supported. If the file is
 not in a good format, an error code (atom) is returned instead:
</td></tr>


<tr><td></td><td>
<pre><font color="#0000FF">    global constant </font><font color="#330033">BMP_OPEN_FAILED = 1,</font>
<font color="#330033">                 BMP_UNEXPECTED_EOF = 2,</font>
<font color="#330033">             BMP_UNSUPPORTED_FORMAT = 3</font>
</pre></td></tr>


<tr><td valign=top><b>Comments:</b></td>
<td>You can create your own bitmap picture files using Windows
 Paintbrush and many other graphics programs. You can then
 incorporate these pictures into your Euphoria programs.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">x = read_bitmap(</font><font color="#00A033">"c:\\windows\\arcade.bmp"</font><font color="#330033">)</font>
<font color="#FF0055">-- note: double backslash needed to get single backslash in</font>
<font color="#FF0055">-- a string</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\dos32\bitmap.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#palette">palette</a>,
<a href="lib_a_b.htm#all_palette">all_palette</a>,
<a href="lib_c_d.htm#display_image">display_image</a>,
<a href="lib_s_t.htm#save_bitmap">save_bitmap</a>
</td></tr>

</table>

<a name=read_file></a><font color="#006633" size=+2><br>
<center><b>read_file</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">include file.e<BR>
s2 = read_file(s1)<BR>
or<BR>
s2 = read_file(i1)<BR>
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Read the contents of either file named s1 or an open file handle i1. Returns the
contents as 1 sequence.
</td></tr>


<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">data = read_file(</font><font color="#00A033">"myfile.txt"</font><font color="#330033">)</font>
<font color="#FF0055">-- data contains the entire contents of 'myfile.txt'</font>
</pre></td></tr>


<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">fh = </font><font color="#FF00FF">open</font><font color="#330033">(</font><font color="#00A033">"myfile.txt"</font><font color="#330033">, </font><font color="#00A033">"r"</font><font color="#330033">)</font>
<font color="#330033">data = read_file(fh)</font>
<font color="#FF00FF">close</font><font color="#330033">(fh)</font>
<font color="#330033"></font>
<font color="#FF0055">-- data contains the entire contents of 'myfile.txt'</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#read_lines">read_lines</a>,
<a href="lib_h_o.htm#open">open</a>
</td></tr>

</table>


<a name=read_lines></a><font color="#006633" size=+2><br>
<center><b>read_lines</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">include file.e<BR>
s2 = read_lines(s1)<BR>
or<BR>
s2 = read_lines(i1)<BR>
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Read the contents of either file named s1 or an open file handle i1 as a sequence
of lines.
</td></tr>


<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">data = read_lines(</font><font color="#00A033">"myfile.txt"</font><font color="#330033">)</font>
<font color="#FF0055">-- data contains the entire contents of 'myfile.txt', 1 sequence per line:</font>
<font color="#FF0055">-- {{"Line 1"}, {"Line 2"}, {"Line 3"}}</font>
</pre></td></tr>


<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">fh = </font><font color="#FF00FF">open</font><font color="#330033">(</font><font color="#00A033">"myfile.txt"</font><font color="#330033">, </font><font color="#00A033">"r"</font><font color="#330033">)</font>
<font color="#330033">data = read_lines(fh)</font>
<font color="#FF00FF">close</font><font color="#330033">(fh)</font>
<font color="#330033"></font>
<font color="#FF0055">-- data contains the entire contents of 'myfile.txt', 1 sequence per line:</font>
<font color="#FF0055">-- {{"Line 1"}, {"Line 2"}, {"Line 3"}}</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#read_file">read_file</a>,
<a href="lib_h_o.htm#open">open</a>
</td></tr>

</table>




<a name=register_block></a><font color="#006633" size=+2><br>
<center><b>register_block</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><b>Syntax:</b></td>
<td><font face="Arial, Helvetica"> include machine.e (or safe.e)<BR>
 register_block(a, i)</font>
</td></tr>

<tr><td valign=top><b>Description:</b></td>
<td>Add a block of memory to the list of safe blocks maintained
 by <font color="#5500FF"><b>safe.e</b></font> (the debug version of
 <font color="#5500FF"><b>machine.e</b></font>). The block starts at
 address a. The length of the block is i bytes.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This routine is only meant to be used for <b>debugging
 purposes</b>. <font color="#5500FF"><b>safe.e</b></font> tracks the
 blocks of memory that your program is allowed to
 <a href="lib_p_r.htm#peek">peek()</a>,
 <a href="lib_p_r.htm#poke">poke()</a>,
 <a href="lib_h_o.htm#mem_copy">mem_copy()</a> etc. These are normally
 just the blocks that you have allocated using Euphoria's
 <a href="lib_a_b.htm#allocate">allocate()</a> or
 <a href="lib_a_b.htm#allocate_low">allocate_low()</a> routines, and which 
 you have not yet freed using Euphoria's
 <a href="lib_e_g.htm#free">free()</a> or
 <a href="lib_e_g.htm#free_low">free_low()</a>. In some cases, you may
 acquire additional, external, blocks of memory, perhaps as a result
 of calling a C routine. If you are debugging your program using
 <font color="#5500FF"><b>safe.e</b></font>, you must register
 these external blocks of memory or
 <font color="#5500FF"><b>safe.e</b></font> will prevent you from
 accessing them. When you are finished using an external block you can
 unregister it using unregister_block().
 <p>
 When you include <font color="#5500FF"><b>machine.e</b></font>, you'll
 get different versions of register_block() and unregister_block()
 that do nothing. This makes it easy to switch back and forth between
 debug and non-debug runs of your program.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">atom </font><font color="#330033">addr</font>
<font color="#330033"></font>
<font color="#330033">addr = </font><font color="#FF00FF">c_func</font><font color="#330033">(x, </font><font color="#993333">{}</font><font color="#330033">)</font>
<font color="#330033">register_block(addr, 5)</font>
<font color="#FF00FF">poke</font><font color="#330033">(addr, </font><font color="#00A033">"ABCDE"</font><font color="#330033">)</font>
<font color="#330033">unregister_block(addr)</font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_u_z.htm#unregister_block">unregister_block</a>,
 <a class="blue" href="library.htm#safe"><b>safe.e</b></a>
</td></tr>

</table>

<a name=remainder></a><font color="#006633" size=+2><br>
<center><b>remainder</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face="Arial, Helvetica"> x3 = remainder(x1, x2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Compute the remainder after dividing x1 by x2. The result will
 have the same sign as x1, and the magnitude of the result will
 be less than the magnitude of x2.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The arguments to this function may be atoms or sequences. The
 rules for <a href="refman_2.htm#26">operations on sequences</a> apply.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = </font><font color="#FF00FF">remainder</font><font color="#330033">(9, 4)</font>
<font color="#FF0055">-- a is 1</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = </font><font color="#FF00FF">remainder</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">81, -3.5, -9, 5.5</font><font color="#993333">}</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">8, -1.7, 2, -4</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- s is {1, -0.1, -1, 1.5}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 3:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = </font><font color="#FF00FF">remainder</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">17, 12, 34</font><font color="#993333">}</font><font color="#330033">, 16)</font>
<font color="#FF0055">-- s is {1, 12, 2}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 4:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = </font><font color="#FF00FF">remainder</font><font color="#330033">(16, </font><font color="#993333">{</font><font color="#330033">2, 3, 5</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- s is {0, 1, 1}</font>
<font color="#330033">  </font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td>
<a href="lib_c_d.htm#ceil">ceil</a>,
<a href="lib_e_g.htm#floor">floor</a>,
<a href="lib_p_r.htm#round">round</a>,
<a href="lib_p_r.htm#round_prec">round_prec</a>
</td></tr>


</table>

<a name=remove></a><font color="#006633" size=+2><br>
<center><b>remove</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">include sequence.e<BR>
s2 = remove(s1, i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Remove an item from a sequence
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>A new sequence is created. s1 can be a string or complex sequence.
</td></tr>


<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = remove(</font><font color="#00A033">"Johnn Doe"</font><font color="#330033">, 4)</font>
<font color="#FF0055">-- s is "John Doe"</font>
</pre></td></tr>


<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = remove(</font><font color="#993333">{</font><font color="#330033">1,2,3,3,4</font><font color="#993333">}</font><font color="#330033">, 4)</font>
<font color="#FF0055">-- s is {1,2,3,4}</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#remove_range">remove_range</a>
</td></tr>

</table>

<a name=remove_range></a><font color="#006633" size=+2><br>
<center><b>remove_range</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">include sequence.e<BR>
s2 = remove_range(s1, i1, i2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Remove items starting at index i1 thru i2 in s1.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>A new sequence is created. s1 can be a string or complex sequence.
</td></tr>


<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = remove_range(</font><font color="#00A033">"John Middle Doe"</font><font color="#330033">, 6, 12)</font>
<font color="#FF0055">-- s is "John Doe"</font>
</pre></td></tr>


<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = remove_range(</font><font color="#993333">{</font><font color="#330033">1,2,3,3,4,4</font><font color="#993333">}</font><font color="#330033">, 4, 5)</font>
<font color="#FF0055">-- s is {1,2,3,4}</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#remove">remove</a>
</td></tr>

</table>




<a name=repeat></a><font color="#006633" size=+2><br>
<center><b>repeat</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> s = repeat(x, a)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Create a sequence of length a where each element is x. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> When you repeat a sequence or a floating-point number the
 interpreter does not actually make multiple copies in memory.
 Rather, a single copy is "pointed to" a number of times.
 
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">repeat</font><font color="#330033">(0, 10)      </font><font color="#FF0055">-- {0,0,0,0,0,0,0,0,0,0}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">repeat</font><font color="#330033">(</font><font color="#00A033">"JOHN"</font><font color="#330033">, 4)  </font><font color="#FF0055">-- {"JOHN", "JOHN", "JOHN", "JOHN"}</font>
<font color="#FF0055">-- The interpreter will create only one copy of "JOHN"</font>
<font color="#FF0055">-- in memory</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#append">append</a>,
               <a href="lib_p_r.htm#prepend">prepend</a>,
               <a href="refman_2.htm#28">sequence-formation operator</a>
</td></tr>

</table>


<a name=replace_range></a><font color="#006633" size=+2><br>
<center><b>replace_range</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">include sequence.e<BR>
s2 = replace_range(s1, x, i1, i2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Replace from index i1 to i2 of s1 with object x. x can be any object.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>A new sequence is created. s1 can be a string or complex sequence.

To replace just one element, simply: s[index] = new_item
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = replace_range(</font><font color="#00A033">"John Middle Doe"</font><font color="#330033">, </font><font color="#00A033">"Smith"</font><font color="#330033">, 6, 11)</font>
<font color="#FF0055">-- s is "John Smith Doe"</font>
</pre></td></tr>


<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = replace_range(</font><font color="#993333">{</font><font color="#330033">45.3, </font><font color="#00A033">"John"</font><font color="#330033">, 5, </font><font color="#0000FF">{</font><font color="#330033">10, 20</font><font color="#0000FF">}</font><font color="#993333">}</font><font color="#330033">, 25, 2, 3)</font>
<font color="#FF0055">-- s is {45.3, 25, {10, 20}}</font>
</pre></td></tr>


</table>

<a name=reverse></a><font color="#006633" size=+2><br>
<center><b>reverse</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include sequence.e<BR>
 s2 = reverse(s1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Reverse the order of elements in a sequence. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> A new sequence is created where the top-level elements appear
 in reverse order compared to the original sequence.
 
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">reverse(</font><font color="#993333">{</font><font color="#330033">1,3,5,7</font><font color="#993333">}</font><font color="#330033">)          </font><font color="#FF0055">-- {7,5,3,1}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">reverse(</font><font color="#993333">{</font><font color="#0000FF">{</font><font color="#330033">1,2,3</font><font color="#0000FF">}</font><font color="#330033">, </font><font color="#0000FF">{</font><font color="#330033">4,5,6</font><font color="#0000FF">}</font><font color="#993333">}</font><font color="#330033">) </font><font color="#FF0055">-- {{4,5,6}, {1,2,3}}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 3:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">reverse(</font><font color="#993333">{</font><font color="#330033">99</font><font color="#993333">}</font><font color="#330033">)               </font><font color="#FF0055">-- {99}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 4:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">reverse(</font><font color="#993333">{}</font><font color="#330033">)                 </font><font color="#FF0055">-- {}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#append">append</a>,
<a href="lib_p_r.htm#prepend">prepend</a>,
<a href="lib_p_r.htm#repeat">repeat</a>
</td></tr>

</table>


<a name=right></a><font color="#006633" size=+2><br>
<center><b>right</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include sequence.e<BR>
s2 = right(s1, i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the last i items of s1. If i is greater than the length of s1, then the entire
s1 will be returned.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>A new sequence is created.

s1 can be any type of sequence, including nested sequences.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s2 = right(</font><font color="#00A033">"John Doe"</font><font color="#330033">, 3)</font>
<font color="#FF0055">-- s2 is Doe</font>
<font color="#330033"></font>
<font color="#330033">s2 = right(</font><font color="#00A033">"John Doe"</font><font color="#330033">, 50)</font>
<font color="#FF0055">-- s2 is John Doe</font>
<font color="#330033"></font>
<font color="#330033">s2 = right(</font><font color="#993333">{</font><font color="#330033">1, 5.4, </font><font color="#00A033">"John"</font><font color="#330033">, 30</font><font color="#993333">}</font><font color="#330033">, 3)</font>
<font color="#FF0055">-- s2 is {5.4, "John", 30}</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#left">left</a>,
<a href="lib_h_o.htm#mid">mid</a>,
<a href="lib_s_t.htm#slice">slice</a>
</td></tr>

</table>


<a name=round></a><font color="#006633" size=+2><br>
<center><b>round</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = round(x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the argument's elements rounded to the nearest integer.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> This function may be applied to an atom or to all elements
 of a sequence.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">round(</font><font color="#993333">{</font><font color="#330033">4.12, 4.67, -5.8, -5.21</font><font color="#993333">}</font><font color="#330033">) </font><font color="#FF0055">-- {4, 5, -6, -5}</font>
<font color="#330033">round(12.2) </font><font color="#FF0055">-- 12</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td>
<a href="lib_c_d.htm#ceil">ceil</a>,
<a href="lib_e_g.htm#floor">floor</a>,
<a href="lib_p_r.htm#remainder">remainder</a>,
<a href="lib_p_r.htm#round_prec">round_prec</a>
</td></tr>


</table>

<a name=round_prec></a><font color="#006633" size=+2><br>
<center><b>round_prec</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> a = round_prec(x, i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the argument's elements rounded to i precision.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> This function may be applied to an atom or to all elements
 of a sequence.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">round_prec(</font><font color="#993333">{</font><font color="#330033">4.12, 4.67, -5.8, -5.21</font><font color="#993333">}</font><font color="#330033">, 10) </font><font color="#FF0055">-- {4.1, 4.7, -5.8, -5.2}</font>
<font color="#330033">round_prec(12.2512, 100) </font><font color="#FF0055">-- 12.25</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td>
<a href="lib_c_d.htm#ceil">ceil</a>,
<a href="lib_e_g.htm#floor">floor</a>,
<a href="lib_p_r.htm#remainder">remainder</a>,
<a href="lib_p_r.htm#round">round</a>
</td></tr>


</table>

<a name=routine_id></a><font color="#006633" size=+2><br>
<center><b>routine_id</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = routine_id(st)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return an integer id number, known as a
 <font color="#993333"><b>routine id</b></font>, for a user-defined Euphoria
 procedure or function. The name of the procedure or function
 is given by the string sequence st. -1 is returned if the named
 routine can't be found.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The id number can be passed to call_proc() or call_func(), to indirectly
 call the routine named by st.
<P>
 The routine named by st must be visible, i.e. callable, at the
 place where routine_id() is used to get the id number. Indirect calls to the
 routine can appear earlier in the program than the definition
 of the routine, but the id number can only be obtained in code that 
 comes <i>after</i> the definition of the routine - see example 2 below.

<P> 
 Once obtained, a valid <font color="#993333"><b>routine id</b></font>
 can be used at <font color="#CC0099"><b><i>any</i></b></font> place 
 in the program to call a routine indirectly via call_proc()/call_func().
<p>
 Some typical uses of routine_id() are:<p>
 1. <a href="refman_2.htm#42">Calling a routine that is defined later in
  a program.</a><br>
 2. Creating a subroutine that takes another routine as a parameter. (See
  Example 2 below)<br>
 3. Using a sequence of <font color="#993333"><b>routine id's</b></font>
  to make a case (switch) statement.<br>
 4. Setting up an Object-Oriented system.<br>
 5. Getting a <font color="#993333"><b>routine id</b></font> so you
  can pass it to call_back(). (See
 <a class="blue" href="platform.htm#callback"><b>platform.doc</b></a>)
 <p>
 Note that C routines, callable by Euphoria, also have routine id's.
 See define_c_proc() and define_c_func().
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">procedure </font><font color="#330033">foo()</font>
<font color="#FF00FF">    puts</font><font color="#330033">(1, </font><font color="#00A033">"Hello World\n"</font><font color="#330033">)</font>
<font color="#0000FF">end procedure</font>
<font color="#330033"></font>
<font color="#FF00FF">integer </font><font color="#330033">foo_num</font>
<font color="#330033">foo_num = </font><font color="#FF00FF">routine_id</font><font color="#330033">(</font><font color="#00A033">"foo"</font><font color="#330033">)</font>
<font color="#330033"></font>
<font color="#FF00FF">call_proc</font><font color="#330033">(foo_num, </font><font color="#993333">{}</font><font color="#330033">)  </font><font color="#FF0055">-- same as calling foo()</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">function </font><font color="#330033">apply_to_all(</font><font color="#FF00FF">sequence </font><font color="#330033">s, </font><font color="#FF00FF">integer </font><font color="#330033">f)</font>
<font color="#FF0055">    -- apply a function to all elements of a sequence</font>
<font color="#FF00FF">    sequence </font><font color="#330033">result</font>
<font color="#330033">    result = {}</font>
<font color="#0000FF">    for </font><font color="#330033">i = 1 </font><font color="#0000FF">to </font><font color="#FF00FF">length</font><font color="#330033">(s) </font><font color="#0000FF">do</font>
<font color="#FF0055">        -- we can call add1() here although it comes later in the program</font>
<font color="#330033">        result = </font><font color="#FF00FF">append</font><font color="#330033">(result, </font><font color="#FF00FF">call_func</font><font color="#993333">(</font><font color="#330033">f, </font><font color="#0000FF">{</font><font color="#330033">s</font><font color="#5500FF">[</font><font color="#330033">i</font><font color="#5500FF">]</font><font color="#0000FF">}</font><font color="#993333">)</font><font color="#330033">)</font>
<font color="#0000FF">    end for</font>
<font color="#0000FF">    return </font><font color="#330033">result</font>
<font color="#0000FF">end function</font>
<font color="#330033"></font>
<font color="#0000FF">function </font><font color="#330033">add1(</font><font color="#FF00FF">atom </font><font color="#330033">x)</font>
<font color="#0000FF">    return </font><font color="#330033">x + 1</font>
<font color="#0000FF">end function</font>
<font color="#330033"></font>
<font color="#FF0055">-- add1() is visible here, so we can ask for its routine id</font>
<font color="#330033">? apply_to_all(</font><font color="#993333">{</font><font color="#330033">1, 2, 3</font><font color="#993333">}</font><font color="#330033">, </font><font color="#FF00FF">routine_id</font><font color="#993333">(</font><font color="#00A033">"add1"</font><font color="#993333">)</font><font color="#330033">)</font>
<font color="#FF0055">-- displays {2,3,4}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#call_proc">call_proc</a>,
<a href="lib_c_d.htm#call_func">call_func</a>,
<a href="lib_c_d.htm#call_back">call_back</a>,
<a href="lib_c_d.htm#define_c_func">define_c_func</a>,
<a href="lib_c_d.htm#define_c_proc">define_c_proc</a>,
<a class="blue" href="platform.htm#callback"><b>platform.doc</b>
</a>
</td></tr>

</table>

<p>&nbsp;<p><center>
<font color="#006633" face="Arial, Helvetica" size=+1>... continue</font><br>&nbsp;<br>
<font face="Arial, Helvetica" size=-1>
<a href="lib_a_b.htm">from A to B</a> &nbsp; | &nbsp;
<a href="lib_c_d.htm">from C to D</a> &nbsp; | &nbsp;
<a href="lib_e_g.htm">from E to G</a> &nbsp; | &nbsp;
<a href="lib_h_o.htm">from H to O</a> &nbsp; | &nbsp;
from P to R &nbsp; | &nbsp;
<a href="lib_s_t.htm">from S to T</a> &nbsp; | &nbsp;
<a href="lib_u_z.htm">from U to Z</a></font></center><p>&nbsp;


</body>
</html>

