<!-- GENERATED BY A EUPHORIA PROGRAM. DO NOT EDIT! -->


<html>
<head><title>Euphoria Reference Manual Part II - Section 3</title>
<style type="text/css">
<!--
body        {background-color: "#FFFFFF";}
a           {text-decoration: none;}
a:link      {color: "#0033BB"; text-decoration: underline;}
a:visited   {color: "#006699"; text-decoration: underline;}
a:active    {color: red; text-decoration: underline;}
a:hover     {color: red; text-decoration: underline;}
a.blue    {text-decoration: none;}
a.blue:link      {color: "#5500FF"; text-decoration: underline;}
a.blue:visited   {color: "#5500FF"; text-decoration: underline;}
a.blue:active    {color: red; text-decoration: underline;}
a.blue:hover     {color: red; text-decoration: underline;}
a.brown      {text-decoration: none;}
a.brown:link      {color: "#993333"; text-decoration: underline;}
a.brown:visited   {color: "#993333"; text-decoration: underline;}
a.brown:active    {color: red; text-decoration: underline;}
a.brown:hover     {color: red; text-decoration: underline;}
-->
</style>

</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">

<center><font color="#FF0099" size=+2>
<br>
 3. Alphabetical Listing of all Routines
</font></center>
<p>&nbsp;<br>

<a name=?></a><font color="#006633" size=+2><br>
<center><b>?</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> ? x
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>This is just a shorthand way of saying: <b>pretty_print(1, x, {})</b> -
 i.e. printing the value of an expression to the standard output,
 with braces and indentation to show the structure.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">? {1, 2} + {3, 4}  </font><font color="#FF0055">-- will display {4, 6}</font>
<font color="#330033"></font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#pretty_print">pretty_print</a>,
  <a href="lib_p_r.htm#print">print</a>
</td></tr>

</table>


<a name=abort></a><font color="#006633" size=+2><br>
<center><b>abort</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> abort(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Abort execution of the program. The argument i is a small integer
 status value to be returned to the operating system. A value of 0
 generally indicates successful completion of the program. Other
 values can indicate various kinds of errors. DOS batch (.bat)
 programs can read this value using the errorlevel feature.
 A Euphoria program can read this value using system_exec().
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> abort() is useful when a program is many levels deep in
 subroutine calls, and execution must end immediately, perhaps
 due to a severe error that has been detected.
<P>
If you don't use abort(), <font color="#993333"><b>ex.exe/exw.exe/exu</b></font>
 will normally return
 an exit status code of 0. If your program fails with a
 Euphoria-detected compile-time or run-time error then a
 code of 1 is returned.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">if </font><font color="#330033">x = 0 </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(ERR, </font><font color="#00A033">"can't divide by 0 !!!\n"</font><font color="#330033">)</font>
<font color="#FF00FF">    abort</font><font color="#330033">(1)</font>
<font color="#0000FF">else</font>
<font color="#330033">    z = y / x</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#crash_message">crash_message</a>,
<a href="lib_s_t.htm#system_exec">system_exec</a>
</td></tr>

</table>

<a name=abs></a><font color="#006633" size=+2><br>
<center><b>abs</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">include math.e<BR>
x = abs(x)</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Returns the absolute value of each element of x
</td></tr>

 <tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to an atom or to all elements of a sequence
</td></tr>

 <tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">x = abs(</font><font color="#993333">{</font><font color="#330033">10.5, -12, 3</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- x is {10.5, 12, 3}</font>
<font color="#330033"></font>
<font color="#330033">i = abs(-4)</font>
<font color="#FF0055">-- i is 4</font>
</pre></td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#sign">sign</a>
</td></tr>

</table>


<a name=all_palette></a><font color="#006633" size=+2><br>
<center><b>all_palette</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b> DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 all_palette(s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Specify new color intensities for the entire set of colors in the
 current graphics mode. s is a sequence of the form:<P>
{{r,g,b}, {r,g,b}, ..., {r,g,b}}
<P>
Each element specifies a new color intensity {red, green, blue}
 for the corresponding color number, starting with color number 0.
 The values for red, green and blue must be in the range 0 to 63.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> This executes much faster than if you were to use palette() to
 set the new color intensities one by one. This procedure can
 be used with read_bitmap() to quickly display a picture on the
 screen.
 
</td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\dos32\bitmap.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get_all_palette">get_all_palette</a>,
<a href="lib_p_r.htm#palette">palette</a>,
<a href="lib_p_r.htm#read_bitmap">read_bitmap</a>,
<a href="lib_u_z.htm#video_config">video_config</a>,
<a href="lib_e_g.htm#graphics_mode">graphics_mode</a>
</td></tr>

</table>


<a name=allocate></a><font color="#006633" size=+2><br>
<center><b>allocate</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 a = allocate(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Allocate i contiguous bytes of memory. Return the address of the
 block of memory, or return 0 if the memory can't be allocated.
 The address returned will be at least 4-byte aligned. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>When you are finished using the block, you should pass the address of the
block to free(). This will free the block and make the memory available
for other purposes. Euphoria will never free or reuse your block until
you explicitly call free(). When your program terminates, the operating
system will reclaim all memory for use with other programs.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">buffer = allocate(100)</font>
<font color="#0000FF">for </font><font color="#330033">i = 0 </font><font color="#0000FF">to </font><font color="#330033">99 </font><font color="#0000FF">do</font>
<font color="#FF00FF">    poke</font><font color="#330033">(buffer+i, 0)</font>
<font color="#0000FF">end for</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#free">free</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#poke">poke</a>,
<a href="lib_h_o.htm#mem_set">mem_set</a>,
<a href="lib_c_d.htm#call">call</a>
</td></tr>

</table>


<a name=allocate_low></a><font color="#006633" size=+2><br>
<center><b>allocate_low</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b> DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 i2 = allocate_low(i1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Allocate i1 contiguous bytes of low memory, i.e. conventional
 memory (address below 1 megabyte). Return the address
 of the block of memory, or return 0 if the memory can't be
 allocated. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> Some DOS software interrupts require that you pass one or
 more addresses in registers. These addresses must be
 conventional memory addresses for DOS to be able to read or
 write to them.
 
</td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\dos32\dosint.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#dos_interrupt">dos_interrupt</a>,
<a href="lib_e_g.htm#free_low">free_low</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#poke">poke</a>
</td></tr>

</table>


<a name=allocate_string></a><font color="#006633" size=+2><br>
<center><b>allocate_string</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 a = allocate_string(s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Allocate space for string sequence s. Copy s into this space
 along with a 0 terminating character. This is the format
 expected for C strings. The memory address of the string will
 be returned. If there is not enough memory available,
 0 will be returned. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>To free the string, use free().
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">atom </font><font color="#330033">title</font>
<font color="#330033"></font>
<font color="#330033">title = allocate_string(</font><font color="#00A033">"The Wizard of Oz"</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\win32\window.exw</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td>
  <a href="lib_a_b.htm#allocate">allocate</a>,
  <a href="lib_e_g.htm#free">free</a>
</td></tr>

</table>


<a name=allow_break></a><font color="#006633" size=+2><br>
<center><b>allow_break</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include file.e<BR>
 allow_break(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>When i is 1 (true) control-c and control-Break can terminate
 your program when it tries to read input from the keyboard. When
 i is 0 (false) your program will not be terminated by control-c
 or control-Break.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>DOS will display ^C on the screen, even when your program cannot
 be terminated.
<P>
Initially your program can be terminated at any point where
 it tries to read from the keyboard. It could also be terminated
 by other input/output operations depending on options the user
 has set in his <b>config.sys</b> file. (Consult an MS-DOS manual for the BREAK
 command.) For some types of program this sudden termination could leave
 things in a messy state and might result in loss of data.
 allow_break(0) lets you avoid this situation.
<P>
You can find out if the user has pressed control-c or
 control-Break by calling check_break().
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">allow_break(0)  </font><font color="#FF0055">-- don't let the user kill me!</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#check_break">check_break</a>
</td></tr>

</table>


<a name=and_bits></a><font color="#006633" size=+2><br>
<center><b>and_bits</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x3 = and_bits(x1, x2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Perform the logical AND operation on corresponding bits in
 x1 and x2. A bit in x3 will be 1 only if the corresponding
 bits in x1 and x2 are both 1.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The arguments to this function may be atoms or sequences. The
 rules for <a href="refman_2.htm#26">operations on sequences</a> apply.
<P>
The arguments must be representable as 32-bit numbers,
 either signed or unsigned.
<P>
If you intend to manipulate full 32-bit values, you should declare your
 variables as <font color="#993333"><b>atom</b></font>, rather than
 integer. Euphoria's integer type is limited to 31-bits.
<P>
Results are treated as signed numbers. They will be
 negative when the highest-order bit is 1.
<P>
To understand the binary representation of a number you
 should display it in hexadecimal notation. Use the %x format
 of <a href="lib_p_r.htm#printf">printf()</a>.
 
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = </font><font color="#FF00FF">and_bits</font><font color="#330033">(#0F0F0000, #12345678)</font>
<font color="#FF0055">-- a is #02040000</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = </font><font color="#FF00FF">and_bits</font><font color="#330033">(#FF, </font><font color="#993333">{</font><font color="#330033">#123456, #876543, #2211</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- a is {#56, #43, #11}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 3:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = </font><font color="#FF00FF">and_bits</font><font color="#330033">(#FFFFFFFF, #FFFFFFFF)</font>
<font color="#FF0055">-- a is -1</font>
<font color="#FF0055">-- Note that #FFFFFFFF is a positive number,</font>
<font color="#FF0055">-- but the result of a bitwise logical operation is interpreted</font>
<font color="#FF0055">-- as a signed 32-bit number, so it's negative.</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#or_bits">or_bits</a>,
<a href="lib_u_z.htm#xor_bits">xor_bits</a>,
<a href="lib_h_o.htm#not_bits">not_bits</a>,
<a href="lib_h_o.htm#int_to_bits">int_to_bits</a>
</td></tr>

</table>


<a name=append></a><font color="#006633" size=+2><br>
<center><b>append</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> s2 = append(s1, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Create a new sequence identical to s1 but with x added on the end
 as the last element. The length of s2 will be
 <a href="lib_h_o.htm#length">length(s1)</a> + 1. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> If x is an atom this is equivalent to <b>s2 = s1 & x</b>. If x is a
 sequence it is not equivalent.
<P>
The extra storage is allocated automatically and very
 efficiently with Euphoria's dynamic storage allocation.
 The case where s1 and s2 are actually the same variable
 (as in Example 1 below) is highly optimized.
 
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td> You can use append() to dynamically grow a sequence, e.g.
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">sequence </font><font color="#330033">x</font>
<font color="#330033"></font>
<font color="#330033">x = {}</font>
<font color="#0000FF">for </font><font color="#330033">i = 1 </font><font color="#0000FF">to </font><font color="#330033">10 </font><font color="#0000FF">do</font>
<font color="#330033">    x = </font><font color="#FF00FF">append</font><font color="#330033">(x, i)</font>
<font color="#0000FF">end for</font>
<font color="#FF0055">-- x is now {1,2,3,4,5,6,7,8,9,10}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td> Any kind of Euphoria object can be appended to a sequence, e.g.
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">sequence </font><font color="#330033">x, y, z</font>
<font color="#330033"></font>
<font color="#330033">x = {</font><font color="#00A033">"fred"</font><font color="#330033">, </font><font color="#00A033">"barney"</font><font color="#330033">}</font>
<font color="#330033">y = </font><font color="#FF00FF">append</font><font color="#330033">(x, </font><font color="#00A033">"wilma"</font><font color="#330033">)</font>
<font color="#FF0055">-- y is now {"fred", "barney", "wilma"}</font>
<font color="#330033"></font>
<font color="#330033">z = </font><font color="#FF00FF">append</font><font color="#330033">(</font><font color="#FF00FF">append</font><font color="#993333">(</font><font color="#330033">y, </font><font color="#00A033">"betty"</font><font color="#993333">)</font><font color="#330033">, </font><font color="#993333">{</font><font color="#00A033">"bam"</font><font color="#330033">, </font><font color="#00A033">"bam"</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- z is now {"fred", "barney", "wilma", "betty", {"bam", "bam"}}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#prepend">prepend</a>,
  <a href="refman_2.htm#27">concatenation operator &</a>,
  <a href="refman_2.htm#28">sequence-formation operator</a>
</td></tr>

</table>


<a name=arccos></a><font color="#006633" size=+2><br>
<center><b>arccos</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include math.e<BR>x2 = arccos(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Return an angle with cosine equal to x1. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> The argument, x1, must be in the range -1 to +1 inclusive.
<P>
A value between 0 and <a href="lib_p_r.htm#PI">PI</a> radians will be
returned.
<P>
This function may be applied to an atom or to all elements
 of a sequence.
<P>
arccos() is not as fast as arctan().
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = arccos(</font><font color="#993333">{</font><font color="#330033">-1,0,1</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- s is {3.141592654, 1.570796327, 0}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#cos">cos</a>,
<a href="lib_a_b.htm#arcsin">arcsin</a>,
<a href="lib_a_b.htm#arctan">arctan</a>
</td></tr>

</table>


<a name=arcsin></a><font color="#006633" size=+2><br>
<center><b>arcsin</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">include math.e<BR>x2 = arcsin(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Return an angle with sine equal to x1. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> The argument, x1, must be in the range -1 to +1 inclusive.
<P>
A value between -PI/2 and +PI/2 (radians) will be returned.
<P>
This function may be applied to an atom or to all elements
 of a sequence.
<P>
arcsin() is not as fast as arctan().
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = arcsin(</font><font color="#993333">{</font><font color="#330033">-1,0,1</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- s is {-1.570796327, 0, 1.570796327}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#sin">sin</a>,
<a href="lib_a_b.htm#arccos">arccos</a>,
<a href="lib_a_b.htm#arctan">arctan</a>
</td></tr>

</table>


<a name=arctan></a><font color="#006633" size=+2><br>
<center><b>arctan</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x2 = arctan(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Return an angle with tangent equal to x1. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> A value between -PI/2 and PI/2 (radians) will be returned.
<P>
This function may be applied to an atom or to all elements
 of a sequence.
<P>
arctan() is faster than arcsin() or arccos().
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = </font><font color="#FF00FF">arctan</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">1,2,3</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- s is {0.785398, 1.10715, 1.24905}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#tan">tan</a>,
<a href="lib_a_b.htm#arcsin">arcsin</a>,
<a href="lib_a_b.htm#arccos">arccos</a>
</td></tr>

</table>


<a name=atom></a><font color="#006633" size=+2><br>
<center><b>atom</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = atom(x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Return 1 if x is an atom else return 0. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> This serves to define the atom type. You can also call it
 like an ordinary function to determine if an object is an
 atom.
 
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">atom </font><font color="#330033">a</font>
<font color="#330033">a = 5.99</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">object </font><font color="#330033">line</font>
<font color="#330033"></font>
<font color="#330033">line = </font><font color="#FF00FF">gets</font><font color="#330033">(0)</font>
<font color="#0000FF">if </font><font color="#FF00FF">atom</font><font color="#330033">(line) </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(SCREEN, </font><font color="#00A033">"end of file\n"</font><font color="#330033">)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#sequence">sequence</a>,
               <a href="lib_h_o.htm#object">object</a>,
               <a href="lib_h_o.htm#integer">integer</a>,
               <a href="refman_2.htm#1">atoms and sequences</a>
</td></tr>

</table>


<a name=atom_to_float32></a><font color="#006633" size=+2><br>
<center><b>atom_to_float32</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 s = atom_to_float32(a1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Convert a Euphoria atom to a sequence of 4 single-byte values.
 These 4 bytes contain the representation of an IEEE
 floating-point number in 32-bit format. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> Euphoria atoms can have values which are 64-bit IEEE
 floating-point numbers, so you may lose precision when you convert
 to 32-bits (16 significant digits versus 7). The range of
 exponents is much larger in 64-bit format (10 to the 308, versus
 10 to the 38), so some atoms may be too large or too small to
 represent in 32-bit format. In this case you will get one of the
 special 32-bit values:
 <a href="refman_2.htm#inf_nan">inf or -inf (infinity or -infinity)</a>.
To avoid this, you can use atom_to_float64().
<P>
Integer values will also be converted to 32-bit floating-point
 format.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">fn = </font><font color="#FF00FF">open</font><font color="#330033">(</font><font color="#00A033">"numbers.dat"</font><font color="#330033">, </font><font color="#00A033">"wb"</font><font color="#330033">)</font>
<font color="#FF00FF">puts</font><font color="#330033">(fn, atom_to_float32</font><font color="#993333">(</font><font color="#330033">157.82</font><font color="#993333">)</font><font color="#330033">) </font><font color="#FF0055">-- write 4 bytes to a file</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#atom_to_float64">atom_to_float64</a>,
<a href="lib_e_g.htm#float32_to_atom">float32_to_atom</a>
</td></tr>

</table>


<a name=atom_to_float64></a><font color="#006633" size=+2><br>
<center><b>atom_to_float64</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 s = atom_to_float64(a1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Convert a Euphoria atom to a sequence of 8 single-byte values.
 These 8 bytes contain the representation of an IEEE
 floating-point number in 64-bit format. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> All Euphoria atoms have values which can be represented as
 64-bit IEEE floating-point numbers, so you can convert any atom
 to 64-bit format without losing any precision.
<P>
Integer values will also be converted to 64-bit floating-point
 format.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">fn = </font><font color="#FF00FF">open</font><font color="#330033">(</font><font color="#00A033">"numbers.dat"</font><font color="#330033">, </font><font color="#00A033">"wb"</font><font color="#330033">)</font>
<font color="#FF00FF">puts</font><font color="#330033">(fn, atom_to_float64</font><font color="#993333">(</font><font color="#330033">157.82</font><font color="#993333">)</font><font color="#330033">) </font><font color="#FF0055">-- write 8 bytes to a file</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#atom_to_float32">atom_to_float32</a>,
<a href="lib_e_g.htm#float64_to_atom">float64_to_atom</a>
</td></tr>

</table>


<a name=average></a><font color="#006633" size=+2><br>
<center><b>average</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax</b></td>
<td><font face = "Arial, Helvetica"> include math.e<BR>
a = average(x)</font>
</td></tr>


 <tr><td valign=top><b>Description</b></td>
<td>Compute the average of all the argument's elements
</td></tr>

 <tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to an atom or to all elements of a sequence
</td></tr>

 <tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">  a = average(</font><font color="#993333">{</font><font color="#330033">8.5, 7.25, 10, 18.75</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">  -- a is 11.125</font>
</pre></td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#sum">sum</a>,
<a href="lib_h_o.htm#max">max</a>,
<a href="lib_h_o.htm#min">min</a>
</td></tr>

</table>


<a name=bits_to_int></a><font color="#006633" size=+2><br>
<center><b>bits_to_int</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 a = bits_to_int(s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Convert a sequence of binary 1's and 0's into a positive
 number. The least-significant bit is s[1]. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> If you print s the bits will appear in "reverse" order, but
 it is convenient to have increasing subscripts access bits of
 increasing significance.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = bits_to_int(</font><font color="#993333">{</font><font color="#330033">1,1,1,0,1</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- a is 23 (binary 10111)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#int_to_bits">int_to_bits</a>,
               <a href="refman_2.htm#26">operations on sequences</a>
</td></tr>

</table>


<a name=bk_color></a><font color="#006633" size=+2><br>
<center><b>bk_color</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 bk_color(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Set the background color to one of the 16 standard colors. In
 <font color="#CC3366">pixel-graphics modes</font> the whole
 screen is affected immediately. In 
 <font color="#CC3366">text modes</font> any new characters
 that you print will have the new background color. In some text modes
 there might only be 8 distinct background colors available.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The 16 standard colors are defined as constants in
 <font color="#5500FF"><b>graphics.e</b></font>
<P>
In <font color="#CC3366">pixel-graphics modes</font>, color 0 which is
 normally BLACK, will be set to the same {r,g,b} palette value as
 color number i.
<p>
In some <font color="#CC3366">pixel-graphics modes</font>, there is a
 <i>border</i> color that appears at the edges of the screen. In 256-color
 modes, this is the 17th color in the palette. You can control it as you
 would any other color.
<P>
In <font color="#CC3366">text modes</font>, to restore the original
 background color when
 your program finishes, e.g. 0 - BLACK, you must call bk_color(0).
 If the cursor is at the bottom line of the screen, you may have
 to actually print something before terminating your program.
 Printing '\n' may be enough.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">bk_color(BLACK)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td>
  <a href="lib_s_t.htm#text_color">text_color</a>,
  <a href="lib_p_r.htm#palette">palette</a>
</td></tr>

</table>


<a name=bytes_to_int></a><font color="#006633" size=+2><br>
<center><b>bytes_to_int</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 a = bytes_to_int(s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Convert a 4-element sequence of byte values to an atom.
 The elements of s are in the order expected for a 32-bit
 integer on the 386+, i.e. least-significant byte first.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The result could be greater than the integer type allows, so you should
 assign it to an <font color="#993333"><b>atom</b></font>.
<P>
s would normally contain positive values that have been read
 using peek() from 4 consecutive memory locations.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">atom </font><font color="#330033">int32</font>
<font color="#330033"></font>
<font color="#330033">int32 = bytes_to_int(</font><font color="#993333">{</font><font color="#330033">37,1,0,0</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- int32 is 37 + 256*1 = 293</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#int_to_bytes">int_to_bytes</a>,
<a href="lib_a_b.htm#bits_to_int">bits_to_int</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#peek4s">peek4s</a>,
<a href="lib_p_r.htm#peek4u">peek4u</a>,
<a href="lib_p_r.htm#poke">poke</a>
</td></tr>

</table>

<p>&nbsp;<p><center>
<font color="#006633" face="Arial, Helvetica" size=+1>... continue</font><br>&nbsp;<br>
<font face="Arial, Helvetica" size=-1>
from A to B &nbsp; | &nbsp;
<a href="lib_c_d.htm">from C to D</a> &nbsp; | &nbsp;
<a href="lib_e_g.htm">from E to G</a> &nbsp; | &nbsp;
<a href="lib_h_o.htm">from H to O</a> &nbsp; | &nbsp;
<a href="lib_p_r.htm">from P to R</a> &nbsp; | &nbsp;
<a href="lib_s_t.htm">from S to T</a> &nbsp; | &nbsp;
<a href="lib_u_z.htm">from U to Z</a></font></center><p>&nbsp;


</body>
</html>

