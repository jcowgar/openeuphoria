<!-- GENERATED BY A EUPHORIA PROGRAM. DO NOT EDIT! -->


<html>
<head><title>Euphoria Reference Manual Part II - Section 3</title>
<style type="text/css">
<!--
body        {background-color: "#FFFFFF";}
a           {text-decoration: none;}
a:link      {color: "#0033BB"; text-decoration: underline;}
a:visited   {color: "#006699"; text-decoration: underline;}
a:active    {color: red; text-decoration: underline;}
a:hover     {color: red; text-decoration: underline;}
a.blue    {text-decoration: none;}
a.blue:link      {color: "#5500FF"; text-decoration: underline;}
a.blue:visited   {color: "#5500FF"; text-decoration: underline;}
a.blue:active    {color: red; text-decoration: underline;}
a.blue:hover     {color: red; text-decoration: underline;}
a.brown      {text-decoration: none;}
a.brown:link      {color: "#993333"; text-decoration: underline;}
a.brown:visited   {color: "#993333"; text-decoration: underline;}
a.brown:active    {color: red; text-decoration: underline;}
a.brown:hover     {color: red; text-decoration: underline;}
-->
</style>

</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">
<br>


<a name=save_bitmap></a><font color="#006633" size=+2><br>
<center><b>save_bitmap</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include image.e<BR>
 i = save_bitmap(s, st)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Create a bitmap (.bmp) file from a 2-element sequence s.
 st is the name of a .bmp "bitmap" file. s[1] is the palette:<P>
{{r,g,b}, {r,g,b}, ..., {r,g,b}}
<P>
Each red, green, or blue value is in the range 0 to 255. s[2]
 is a 2-d sequence of sequences containing a pixel-graphics image.
 The sequences contained in s[2] must all have the same length.
 s is in the same format as the value returned by read_bitmap().
<P>
The result will be one of the following codes:
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">    global constant </font><font color="#330033">BMP_SUCCESS = 0,</font>
<font color="#330033">                BMP_OPEN_FAILED = 1,</font>
<font color="#330033">               BMP_INVALID_MODE = 4 </font><font color="#FF0055">-- invalid graphics mode</font>
<font color="#FF0055">                                    -- or invalid argument</font>
</pre></td></tr>

 
<tr><td valign=top><b>Comments:</b></td>
<td>If you use get_all_palette() to get the palette before calling
 this function, you must multiply the returned intensity values
 by 4 before calling save_bitmap().
<p>
You might use save_image() to get the 2-d image for s[2].
<P>
save_bitmap() produces bitmaps of 2, 4, 16, or 256 colors and
 these can all be read with read_bitmap(). Windows Paintbrush
 and some other tools do not support 4-color bitmaps.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">paletteData = get_all_palette() * 4</font>
<font color="#330033">code = save_bitmap(</font><font color="#993333">{</font><font color="#330033">paletteData, imageData</font><font color="#993333">}</font><font color="#330033">,</font>
<font color="#00A033">                   "c:\\example\\a1.bmp"</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#save_image">save_image</a>,
<a href="lib_p_r.htm#read_bitmap">read_bitmap</a>,
<a href="lib_s_t.htm#save_screen">save_screen</a>,
<a href="lib_e_g.htm#get_all_palette">get_all_palette</a>
</td></tr>

</table>


<a name=save_image></a><font color="#006633" size=+2><br>
<center><b>save_image</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include image.e<BR>
 s3 = save_image(s1, s2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Save a rectangular image from a <font color="CC3366">pixel-graphics</font>
 screen. The result is a 2-d sequence of sequences containing all the pixels
 in the image. You can redisplay the image using display_image().
 s1 is a 2-element sequence {x1,y1} specifying the top-left
 pixel in the image. s2 is a sequence {x2,y2} specifying the
 bottom-right pixel.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = save_image(</font><font color="#993333">{</font><font color="#330033">0,0</font><font color="#993333">}</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">50,50</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033">display_image(</font><font color="#993333">{</font><font color="#330033">100,200</font><font color="#993333">}</font><font color="#330033">, s)</font>
<font color="#330033">display_image(</font><font color="#993333">{</font><font color="#330033">300,400</font><font color="#993333">}</font><font color="#330033">, s)</font>
<font color="#FF0055">-- saves a 51x51 square image, then redisplays it at {100,200}</font>
<font color="#FF0055">-- and at {300,400}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#display_image">display_image</a>,
<a href="lib_s_t.htm#save_text_image">save_text_image</a>
</td></tr>

</table>


<a name=save_screen></a><font color="#006633" size=+2><br>
<center><b>save_screen</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include image.e<BR>
 i = save_screen(x1, st)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Save the whole screen or a rectangular region of the screen as
 a Windows bitmap (.bmp) file. To save the whole screen, pass the
 integer 0 for x1. To save a rectangular region of the screen,
 x1 should be a sequence of 2 sequences:
 {{topLeftXPixel, topLeftYPixel}, 
 {bottomRightXPixel, bottomRightYPixel}}<P>
st is the name of a .bmp "bitmap" file.
<P>
The result will be one of the following codes:
</td></tr>


<tr><td></td><td>
<pre><font color="#0000FF">    global constant </font><font color="#330033">BMP_SUCCESS = 0,</font>
<font color="#330033">                BMP_OPEN_FAILED = 1,</font>
<font color="#330033">               BMP_INVALID_MODE = 4 </font><font color="#FF0055">-- invalid graphics mode</font>
<font color="#FF0055">                                    -- or invalid argument</font>
</pre></td></tr>


<tr><td valign=top><b>Comments:</b></td>
<td>save_screen() produces bitmaps of 2, 4, 16, or 256 colors and
 these can all be read with read_bitmap(). Windows Paintbrush
 and some other tools do not support 4-color bitmaps.
<P>
save_screen() only works in
 <font color="#CC3366">pixel-graphics modes</font>, not text modes.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF0055">-- save whole screen:</font>
<font color="#330033">code = save_screen(0, </font><font color="#00A033">"c:\\example\\a1.bmp"</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF0055">-- save part of screen:</font>
<font color="#330033">err = save_screen(</font><font color="#993333">{</font><font color="#0000FF">{</font><font color="#330033">0,0</font><font color="#0000FF">}</font><font color="#330033">,</font><font color="#0000FF">{</font><font color="#330033">200, 15</font><font color="#0000FF">}</font><font color="#993333">}</font><font color="#330033">, </font><font color="#00A033">"b1.bmp"</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#save_image">save_image</a>,
<a href="lib_p_r.htm#read_bitmap">read_bitmap</a>,
<a href="lib_s_t.htm#save_bitmap">save_bitmap</a>
</td></tr>

</table>


<a name=save_text_image></a><font color="#006633" size=+2><br>
<center><b>save_text_image</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include image.e<BR>
 s3 = save_text_image(s1, s2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Save a rectangular region of text from a
 <font color="#CC3366">text-mode</font> screen.
 The result is a sequence of sequences containing ASCII characters
 and attributes from the screen. You can redisplay this text using
 display_text_image(). s1 is a 2-element sequence {line1, column1}
 specifying the top-left character. s2 is a sequence
 {line2, column2} specifying the bottom right character.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Because the character attributes are also saved, you will get
 the correct foreground color, background color and other properties
 for each character when you redisplay the text.
<P>
On DOS32, an attribute byte is made up of two 4-bit fields that
 encode the foreground and background color of a character.
 The high-order 4 bits determine the background color, while
 the low-order 4 bits determine the foreground color.
<P>
This routine only works in <font color="#CC3366">text modes</font>.
<P>
You might use this function in a text-mode graphical user
 interface to save a portion of the screen before displaying a
 drop-down menu, dialog box, alert box etc.
<P>
On DOS32, if you are flipping video pages, note that this function reads
 from the current active page.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td> If the top 2 lines of the screen have:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">   Hello</font>
<font color="#330033">   World</font>
</pre></td></tr>


<tr><td valign=top><b></b></td>
<td>And you execute:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = save_text_image(</font><font color="#993333">{</font><font color="#330033">1,1</font><font color="#993333">}</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">2,5</font><font color="#993333">}</font><font color="#330033">)</font>
</pre></td></tr>


<tr><td valign=top><b></b></td>
<td>Then s is something like:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">    {</font><font color="#00A033">"H-e-l-l-o-"</font><font color="#330033">,</font>
<font color="#00A033">     "W-o-r-l-d-"</font><font color="#330033">}</font>
<font color="#330033">where </font><font color="#00A033">'-' </font><font color="#330033">indicates the attribute bytes</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#display_text_image">display_text_image</a>,
<a href="lib_s_t.htm#save_image">save_image</a>,
<a href="lib_s_t.htm#set_active_page">set_active_page</a>,
<a href="lib_e_g.htm#get_screen_char">get_screen_char</a>
</td></tr>

</table>


<a name=scroll></a><font color="#006633" size=+2><br>
<center><b>scroll</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 scroll(i1, i2, i3)
</font>
</td></tr>

 
<tr><td valign=top><b>Description:</b></td>
<td>Scroll a region of text on the screen either up (i1 positive) or
 down (i1 negative) by i1 lines. The region is the series of lines
 on the screen from i2 (top line) to i3 (bottom line), inclusive.
 New blank lines will appear at the top or bottom.
</td></tr>


<tr><td valign=top><b>Comments:</b></td>
<td>You could perform the scrolling operation using a series
of calls to puts(), but scroll() is much faster.
<p>
The position of the cursor after scrolling is not defined.
</td></tr>


<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>bin\ed.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#clear_screen">clear_screen</a>,
<a href="lib_s_t.htm#text_rows">text_rows</a>
</td></tr>

</table>


<a name=seek></a><font color="#006633" size=+2><br>
<center><b>seek</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include file.e<BR>
 i1 = seek(fn, a1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Seek (move) to any byte position in the file fn or to the end of
 file if a1 is -1. For each open file there is a current byte
 position that is updated as a result of I/O operations on the
 file. The initial file position is 0 for files opened for read,
 write or update. The initial position is the end of file for
 files opened for append. The value returned by seek() is 0 if the
 seek was successful, and non-zero if it was unsuccessful. It is
 possible to seek past the end of a file. If you seek past the end
 of the file, and write some data, undefined bytes will be inserted 
 into the gap between the original end of file and your new data.
</td></tr>


<tr><td valign=top><b>Comments:</b></td>
<td>After seeking and reading (writing) a series of bytes, you may need to 
 call seek() explicitly before you switch to writing (reading) bytes, 
 even though the file position should already be what you want.
 <P>
 This function is normally used with files opened in binary mode.
 In text mode, DOS converts CR LF to LF on input, and LF to CR LF
 on output, which can cause great confusion when you are 
 trying to count bytes.
</td></tr>


<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">include </font><font color="#330033">file.e</font>
<font color="#330033"></font>
<font color="#FF00FF">integer </font><font color="#330033">fn</font>
<font color="#330033">fn = </font><font color="#FF00FF">open</font><font color="#330033">(</font><font color="#00A033">"mydata"</font><font color="#330033">, </font><font color="#00A033">"rb"</font><font color="#330033">)</font>
<font color="#FF0055">-- read and display first line of file 3 times:</font>
<font color="#0000FF">for </font><font color="#330033">i = 1 </font><font color="#0000FF">to </font><font color="#330033">3 </font><font color="#0000FF">do</font>
<font color="#FF00FF">    puts</font><font color="#330033">(1, </font><font color="#FF00FF">gets</font><font color="#993333">(</font><font color="#330033">fn</font><font color="#993333">)</font><font color="#330033">)</font>
<font color="#0000FF">    if </font><font color="#330033">seek(fn, 0) </font><font color="#0000FF">then</font>
<font color="#FF00FF">        puts</font><font color="#330033">(1, </font><font color="#00A033">"rewind failed!\n"</font><font color="#330033">)</font>
<font color="#0000FF">    end if</font>
<font color="#0000FF">end for</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_u_z.htm#where">where</a>,
<a href="lib_h_o.htm#open">open</a>
</td></tr>

</table>


<a name=sequence></a><font color="#006633" size=+2><br>
<center><b>sequence</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = sequence(x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Return 1 if x is a sequence else return 0. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> This serves to define the sequence type. You can also call
 it like an ordinary function to determine if an object is
 a sequence.
 
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">sequence </font><font color="#330033">s</font>
<font color="#330033">s = {1,2,3}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">if </font><font color="#FF00FF">sequence</font><font color="#330033">(x) </font><font color="#0000FF">then</font>
<font color="#330033">    sum = 0</font>
<font color="#0000FF">    for </font><font color="#330033">i = 1 </font><font color="#0000FF">to </font><font color="#FF00FF">length</font><font color="#330033">(x) </font><font color="#0000FF">do</font>
<font color="#330033">        sum = sum + x[i]</font>
<font color="#0000FF">    end for</font>
<font color="#0000FF">else</font>
<font color="#FF0055">    -- x must be an atom</font>
<font color="#330033">    sum = x</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#atom">atom</a>,
               <a href="lib_h_o.htm#object">object</a>,
               <a href="lib_h_o.htm#integer">integer</a>,
               <a href="refman_2.htm#1">atoms and sequences</a>
</td></tr>

</table>


<a name=set_active_page></a><font color="#006633" size=+2><br>
<center><b>set_active_page</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include image.e<BR>
 set_active_page(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Select video page i to send all screen output to.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>With multiple pages you can instantaneously change the entire
 screen without causing any visible "flicker". You can also
 save the screen and bring it back quickly.
<P>
video_config() will tell you how many pages are available in
 the current graphics mode.
<P>
By default, the active page and the display page are both 0.
<P>
This works under DOS, or in a full-screen DOS window. In a
 partial-screen window you cannot change the active page.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">include </font><font color="#330033">image.e</font>
<font color="#330033"></font>
<font color="#FF0055">-- active & display pages are initially both 0</font>
<font color="#FF00FF">puts</font><font color="#330033">(1, </font><font color="#00A033">"\nThis is page 0\n"</font><font color="#330033">)</font>
<font color="#330033">set_active_page(1)     </font><font color="#FF0055">-- screen output will now go to page 1</font>
<font color="#FF00FF">clear_screen</font><font color="#330033">()</font>
<font color="#FF00FF">puts</font><font color="#330033">(1, </font><font color="#00A033">"\nNow we've flipped to page 1\n"</font><font color="#330033">)</font>
<font color="#0000FF">if </font><font color="#FF00FF">getc</font><font color="#330033">(0) </font><font color="#0000FF">then        </font><font color="#FF0055">-- wait for key-press</font>
<font color="#0000FF">end if</font>
<font color="#330033">set_display_page(1)    </font><font color="#FF0055">-- "Now we've ..." becomes visible</font>
<font color="#0000FF">if </font><font color="#FF00FF">getc</font><font color="#330033">(0) </font><font color="#0000FF">then        </font><font color="#FF0055">-- wait for key-press</font>
<font color="#0000FF">end if</font>
<font color="#330033">set_display_page(0)    </font><font color="#FF0055">-- "This is ..." becomes visible again</font>
<font color="#330033">set_active_page(0)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get_active_page">get_active_page</a>,
<a href="lib_s_t.htm#set_display_page">set_display_page</a>,
<a href="lib_u_z.htm#video_config">video_config</a>
</td></tr>

</table>


<a name=set_display_page></a><font color="#006633" size=+2><br>
<center><b>set_display_page</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include image.e<BR>
 set_display_page(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Set video page i to be mapped to the visible screen.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>With multiple pages you can instantaneously change the entire
 screen without causing any visible "flicker". You can also
 save the screen and bring it back quickly.
<P>
video_config() will tell you how many pages are available in
 the current graphics mode.
<P>
By default, the active page and the display page are both 0.
<P>
This works under DOS, or in a full-screen DOS window. In a
 partial-screen window you cannot change the active page.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>See set_active_page() example.
</td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get_display_page">get_display_page</a>,
<a href="lib_s_t.htm#set_active_page">set_active_page</a>,
<a href="lib_u_z.htm#video_config">video_config</a>
</td></tr>

</table>


<a name=set_rand></a><font color="#006633" size=+2><br>
<center><b>set_rand</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 set_rand(i1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Set the random number generator to a certain state, i1, so that
 you will get a known series of random numbers on subsequent
 calls to rand().
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Normally the numbers returned by the rand() function are totally
 unpredictable, and will be different each time you run your
 program. Sometimes however you may wish to repeat the same
 series of numbers, perhaps because you are trying to debug
 your program, or maybe you want the ability to generate the
 same output (e.g. a random picture) for your user upon request.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">sequence </font><font color="#330033">s, t</font>
<font color="#330033">s = </font><font color="#FF00FF">repeat</font><font color="#330033">(0, 3)</font>
<font color="#330033">t = s</font>
<font color="#330033"></font>
<font color="#330033">set_rand(12345)</font>
<font color="#330033">s[1] = </font><font color="#FF00FF">rand</font><font color="#330033">(10)</font>
<font color="#330033">s[2] = </font><font color="#FF00FF">rand</font><font color="#330033">(100)</font>
<font color="#330033">s[3] = </font><font color="#FF00FF">rand</font><font color="#330033">(1000)</font>
<font color="#330033"></font>
<font color="#330033">set_rand(12345)  </font><font color="#FF0055">-- same value for set_rand()</font>
<font color="#330033">t[1] = </font><font color="#FF00FF">rand</font><font color="#330033">(10)  </font><font color="#FF0055">-- same arguments to rand() as before</font>
<font color="#330033">t[2] = </font><font color="#FF00FF">rand</font><font color="#330033">(100)</font>
<font color="#330033">t[3] = </font><font color="#FF00FF">rand</font><font color="#330033">(1000)</font>
<font color="#FF0055">-- at this point s and t will be identical</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#rand">rand</a>
</td></tr>

</table>


<a name=set_vector></a><font color="#006633" size=+2><br>
<center><b>set_vector</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 set_vector(i, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Set s as the new address for handling interrupt number i.
 s must be a protected mode <b>far address</b> in the form:
 {16-bit segment, 32-bit offset}. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Before calling set_vector() you must store a machine-code
 interrupt handling routine at location s in memory.
<P>
The 16-bit segment can be the code segment used by Euphoria.
 To get the value of this segment see
 <font color="#5500FF"><b>demo\dos32\hardint.ex</b></font>.
 The offset can be the 32-bit value returned by allocate().
 Euphoria runs in <b>protected mode</b> with the code segment
 and data segment pointing to the same physical memory,
 but with different access modes.
<P>
Interrupts occurring in either <b>real mode</b> or <b>protected mode</b>
 will be passed to your handler. Your interrupt handler
 should immediately load the correct data segment before it
 tries to reference memory.
<P>
Your handler might return from the interrupt using the
 iretd instruction, or jump to the original interrupt handler.
 It should save and restore any registers that it modifies.
<P>
You should lock the memory used by your handler to ensure
 that it will never be swapped out. See lock_memory().
<P>
It is highly recommended that you study
 <font color="#5500FF"><b>demo\dos32\hardint.ex</b></font>
 before trying to set up your own interrupt handler.
<P>
You should have a good knowledge of machine-level programming
 before attempting to write your own handler.
<P>
You can call set_vector() with the far address returned by
 get_vector(), when you want to restore the original handler.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">set_vector(#1C, </font><font color="#993333">{</font><font color="#330033">code_segment, my_handler_address</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\dos32\hardint.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get_vector">get_vector</a>,
<a href="lib_h_o.htm#lock_memory">lock_memory</a>,
<a href="lib_a_b.htm#allocate">allocate</a>
</td></tr>

</table>

<a name=sign></a><font color="#006633" size=+2><br>
<center><b>sign</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>
 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include math.e<BR>
i = sign(x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return -1, 0 or 1 for each element according to it being negative, zero or positive
</td></tr>

 <tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to an atom or to all elements of a sequence
</td></tr>

 <tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">i = sign(5)</font>
<font color="#FF0055">-- i is 1</font>
<font color="#330033"></font>
<font color="#330033">i = sign(0)</font>
<font color="#FF0055">-- i is 0</font>
<font color="#330033"></font>
<font color="#330033">i = sign(-2)</font>
<font color="#FF0055">-- i is -1</font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#abs">abs</a>
</td></tr>

</table>

<a name=sin></a><font color="#006633" size=+2><br>
<center><b>sin</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x2 = sin(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the sine of x1, where x1 is in radians.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to an atom or to all elements of a sequence.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">sin_x = </font><font color="#FF00FF">sin</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">.5, .9, .11</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- sin_x is {.479, .783, .110}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#cos">cos</a>,
<a href="lib_s_t.htm#tan">tan</a>
</td></tr>

</table>


<a name=sleep></a><font color="#006633" size=+2><br>
<center><b>sleep</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">include misc.e<BR>
  sleep(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Suspend execution for i seconds.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>On WIN32 and Linux/FreeBSD, the operating
 system will suspend your process and schedule other processes. 
 On DOS32, your program will go into a busy loop
  for i seconds, during which time other processes may run, but 
  they will compete with your process for the CPU.
  <p>
  With multiple tasks, the whole program sleeps, not just 
  the current task. To make just the current task sleep, you can
  call task_schedule(task_self(), {i, i}) and then execute task_yield().
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">puts</font><font color="#330033">(1, </font><font color="#00A033">"Waiting 15 seconds...\n"</font><font color="#330033">)</font>
<font color="#330033">sleep(15)</font>
<font color="#FF00FF">puts</font><font color="#330033">(1, </font><font color="#00A033">"Done.\n"</font><font color="#330033">)</font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#lock_file">lock_file</a>,
<a href="lib_a_b.htm#abort">abort</a>,
<a href="lib_s_t.htm#time">time</a>
</td></tr>

</table>


<a name=slice></a><font color="#006633" size=+2><br>
<center><b>slice</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include sequence.e<BR>
s2 = slice(s1, i1, i2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return items i1 to i2 from s1. If i2 is greater than the length of s1, then from i1 to the
end of s1 will be returned. If i2 is zero, it will be treated as the end of s1. If i2 is a
negative value, then it will be treated as i2 positions from the end of s1.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>A new sequence is created.

s1 can be any type of sequence, including nested sequences.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s2 = slice(</font><font color="#00A033">"John Doe"</font><font color="#330033">, 6, 8)</font>
<font color="#FF0055">-- s2 is Doe</font>
<font color="#330033"></font>
<font color="#330033">s2 = slice(</font><font color="#00A033">"John Doe"</font><font color="#330033">, 6, 50)</font>
<font color="#FF0055">-- s2 is Doe</font>
<font color="#330033"></font>
<font color="#330033">s2 = slice(</font><font color="#993333">{</font><font color="#330033">1, 5.4, </font><font color="#00A033">"John"</font><font color="#330033">, 30</font><font color="#993333">}</font><font color="#330033">, 2, 3)</font>
<font color="#FF0055">-- s2 is {5.4, "John"}</font>
<font color="#330033"></font>
<font color="#330033">s2 = slice(</font><font color="#993333">{</font><font color="#330033">1,2,3,4,5</font><font color="#993333">}</font><font color="#330033">, 2, -1)</font>
<font color="#FF0055">-- s2 is {2,3,4}</font>
<font color="#330033"></font>
<font color="#330033">s2 = slice(</font><font color="#993333">{</font><font color="#330033">1,2,3,4,5</font><font color="#993333">}</font><font color="#330033">, 2, 0)</font>
<font color="#FF0055">-- s2 is {2,3,4,5}</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#right">right</a>,
<a href="lib_h_o.htm#mid">mid</a>,
<a href="lib_h_o.htm#left">left</a>
</td></tr>

</table>


<a name=sort></a><font color="#006633" size=+2><br>
<center><b>sort</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include sort.e<BR>
 s2 = sort(s1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Sort s1 into ascending order using a fast sorting algorithm. The
 elements of s1 can be any mix of atoms or sequences. Atoms come
 before sequences, and sequences are sorted "alphabetically" where
 the first elements are more significant than the later elements.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">x = 0 & sort(</font><font color="#993333">{</font><font color="#330033">7,5,3,8</font><font color="#993333">}</font><font color="#330033">) & 0</font>
<font color="#FF0055">-- x is set to {0, 3, 5, 7, 8, 0}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">y = sort(</font><font color="#993333">{</font><font color="#00A033">"Smith"</font><font color="#330033">, </font><font color="#00A033">"Jones"</font><font color="#330033">, </font><font color="#00A033">"Doe"</font><font color="#330033">, 5.5, 4, 6</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- y is {4, 5.5, 6, "Doe", "Jones", "Smith"}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 3:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">database = sort(</font><font color="#993333">{</font><font color="#0000FF">{</font><font color="#00A033">"Smith"</font><font color="#330033">,   95.0, 29</font><font color="#0000FF">}</font><font color="#330033">,</font>
<font color="#330033">                 {</font><font color="#00A033">"Jones"</font><font color="#330033">,   77.2, 31},</font>
<font color="#330033">                 {</font><font color="#00A033">"Clinton"</font><font color="#330033">, 88.7, 44}})</font>
<font color="#330033"></font>
<font color="#FF0055">-- The 3 database "records" will be sorted by the first "field"</font>
<font color="#FF0055">-- i.e. by name. Where the first field (element) is equal it</font>
<font color="#FF0055">-- will be sorted by the second field etc.</font>
<font color="#330033"></font>
<font color="#FF0055">-- after sorting, database is:</font>
<font color="#330033">               {</font><font color="#993333">{</font><font color="#00A033">"Clinton"</font><font color="#330033">, 88.7, 44</font><font color="#993333">}</font><font color="#330033">,</font>
<font color="#330033">                {</font><font color="#00A033">"Jones"</font><font color="#330033">,   77.2, 31},</font>
<font color="#330033">                {</font><font color="#00A033">"Smith"</font><font color="#330033">,   95.0, 29}}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#custom_sort">custom_sort</a>,
    <a href="lib_c_d.htm#compare">compare</a>,
    <a href="lib_h_o.htm#match">match</a>,
    <a href="lib_e_g.htm#find">find</a>
</td></tr>

</table>


<a name=sound></a><font color="#006633" size=+2><br>
<center><b>sound</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 sound(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Turn on the PC speaker at frequency i. If i is 0 the speaker
 will be turned off.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>On <font color="#CC3366"><b>WIN32</b></font> and 
     <font color="#CC3366"><b>Linux/FreeBSD</b></font> 
no sound will be made.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">sound(1000) </font><font color="#FF0055">-- starts a fairly high pitched sound</font>
<font color="#330033"></font>
</pre></td></tr>

</table>

<a name=split></a><font color="#006633" size=+2><br>
<center><b>split</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include sequence.e<BR>
s3 = split(s1, s2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>split s1 by s2
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to a string sequence or a complex sequence
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">result = split(</font><font color="#00A033">"John,Middle,Doe"</font><font color="#330033">, </font><font color="#00A033">","</font><font color="#330033">)</font>
<font color="#FF0055">-- result is {"John", "Middle", "Doe"}</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#split_adv">split_adv</a>,
<a href="lib_h_o.htm#join">join</a>
</td></tr>

</table>

<a name=split_adv></a><font color="#006633" size=+2><br>
<center><b>split_adv</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include sequence.e<BR>
s3 = split_adv(s1, s2, i1, i2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>split s1 by s2.

If i1 is > 0 then limit the number of tokens that will be split to i1.

If i2 is 1 then split by any one item in s2 not s2 as a whole. If i2 is 0 then split
by s2 as a whole.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to a string sequence or a complex sequence
</td></tr>


<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">result = split_adv(</font><font color="#00A033">"John,Middle,Doe"</font><font color="#330033">, </font><font color="#00A033">","</font><font color="#330033">, 2, 0)</font>
<font color="#FF0055">-- result is {"John", "Middle,Doe"}</font>
</pre></td></tr>


<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">result = split_adv(</font><font color="#00A033">"One,Two|Three.Four"</font><font color="#330033">, </font><font color="#00A033">".,|"</font><font color="#330033">, 0, 1)</font>
<font color="#FF0055">-- result is {"One", "Two", "Three", "Four"}</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#split">split</a>,
<a href="lib_h_o.htm#join">join</a>
</td></tr>

</table>

<a name=sprint></a><font color="#006633" size=+2><br>
<center><b>sprint</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include misc.e<BR>
 s = sprint(x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>The representation of x as a string of characters is returned.
 This is exactly the same as <b>print(fn, x)</b>, except that the output
 is returned as a sequence of characters, rather than being
 sent to a file or device. x can be any Euphoria object.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The atoms contained within x will be displayed to a maximum of
 10 significant digits, just as with print().
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = sprint(12345)</font>
<font color="#FF0055">-- s is "12345"</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = sprint(</font><font color="#993333">{</font><font color="#330033">10,20,30</font><font color="#993333">}</font><font color="#330033">+5)</font>
<font color="#FF0055">-- s is "{15,25,35}"</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#print">print</a>,
<a href="lib_s_t.htm#sprintf">sprintf</a>,
<a href="lib_u_z.htm#value">value</a>,
<a href="lib_e_g.htm#get">get</a>
</td></tr>

</table>


<a name=sprintf></a><font color="#006633" size=+2><br>
<center><b>sprintf</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> s = sprintf(st, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>This is exactly the same as <b>printf()</b>, except that the output
 is returned as a sequence of characters, rather than being
 sent to a file or device. st is a format string, x is the
 value or sequence of values to be formatted. <b>printf(fn, st, x)</b>
 is equivalent to <b>puts(fn, sprintf(st, x))</b>.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Some typical uses of sprintf() are:
<P>
 1. Converting numbers to strings.<BR>
 2. Creating strings to pass to system().<BR>
 3. Creating formatted error messages that can be passed to
    a common error message handler.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = </font><font color="#FF00FF">sprintf</font><font color="#330033">(</font><font color="#00A033">"%08d"</font><font color="#330033">, 12345)</font>
<font color="#FF0055">-- s is "00012345"</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#printf">printf</a>,
<a href="lib_u_z.htm#value">value</a>,
<a href="lib_s_t.htm#sprint">sprint</a>,
<a href="lib_e_g.htm#get">get</a>,
<a href="lib_s_t.htm#system">system</a>
</td></tr>

</table>


<a name=sqrt></a><font color="#006633" size=+2><br>
<center><b>sqrt</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x2 = sqrt(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Calculate the square root of x1. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to an atom or to all elements
 of a sequence.
<P>
Taking the square root of a negative number will abort your
 program with a run-time error message.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">r = </font><font color="#FF00FF">sqrt</font><font color="#330033">(16)</font>
<font color="#FF0055">-- r is 4</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#log">log</a>,
<a href="lib_p_r.htm#power">power</a>
</td></tr>

</table>


<a name=sum></a><font color="#006633" size=+2><br>
<center><b>sum</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax</b></td>
<td><font face = "Arial, Helvetica"> include math.e<BR>
a = sum(x)</font>
</td></tr>


 <tr><td valign=top><b>Description</b></td>
<td>Compute the sum of all the argument's elements
</td></tr>

 <tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to an atom or to all elements of a sequence
</td></tr>

 <tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">  a = sum(</font><font color="#993333">{</font><font color="#330033">10, 20, 30</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">  -- a is 60</font>
<font color="#330033"></font>
<font color="#330033">  a = sum(</font><font color="#993333">{</font><font color="#330033">10.5, 11.2, 8.1</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">  -- a is 29.8</font>
</pre></td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#average">average</a>,
<a href="lib_h_o.htm#max">max</a>,
<a href="lib_h_o.htm#min">min</a>
</td></tr>

</table>


<a name=system></a><font color="#006633" size=+2><br>
<center><b>system</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> system(st, i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Pass a command string st to the operating system command interpreter.
 The argument i indicates the manner in which to
 return from the call to system():<P>
When i is 0, the previous graphics mode is restored and the
 screen is cleared.
<P>
When i is 1, a beep sound will be made and the program will wait
 for the user to press a key before the previous graphics mode
 is restored.
<P>
When i is 2, the graphics mode is not restored and the screen
 is not cleared.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>i = 2 should only be used when it is known that the command executed by
 system() will not change the graphics mode.
<P>
You can use Euphoria as a sophisticated "batch" (.bat) language
 by making calls to system() and system_exec().
<P>
system() will start a new DOS or Linux/FreeBSD shell.
<P>
system() allows you to use command-line redirection of standard
 input and output in the command string st.
<P>
Under <font color="#CC3366"><b>DOS32</b></font>, a Euphoria program
 will start off using extended
 memory. If extended memory runs out the program will consume
 conventional memory. If conventional memory runs out it will use
 virtual memory, i.e. swap space on disk. The DOS command run by
 system() will fail if there is not enough conventional memory
 available. To avoid this situation you can reserve some
 conventional (low) memory by typing:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">    SET CAUSEWAY=LOWMEM:xxx</font>
</pre></td></tr>


<tr><td valign=top><b></b></td>
<td>where xxx is the number of K of conventional memory to reserve. Type this
 before running your program. You can also put this in <b>autoexec.bat</b>,
 or in a <b>.bat</b> file that runs your program. For example:
</td></tr>

 
<tr><td></td><td>
<pre><font color="#330033">    SET CAUSEWAY=LOWMEM:80</font>
<font color="#330033">    ex myprog.ex</font>
</pre></td></tr>


<tr><td valign=top><b></b></td>
<td>This will reserve 80K of conventional memory, which should be
 enough to run simple DOS commands like COPY, MOVE, MKDIR etc.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">system</font><font color="#330033">(</font><font color="#00A033">"copy temp.txt a:\\temp.bak"</font><font color="#330033">, 2)</font>
<font color="#FF0055">-- note use of double backslash in literal string to get</font>
<font color="#FF0055">-- single backslash</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">system</font><font color="#330033">(</font><font color="#00A033">"ex \\test\\myprog.ex < indata > outdata"</font><font color="#330033">, 2)</font>
<font color="#FF0055">-- executes myprog by redirecting standard input and</font>
<font color="#FF0055">-- standard output</font>
<font color="#330033"></font>
</pre></td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#system_exec">system_exec</a>,
<a href="lib_c_d.htm#dir">dir</a>,
<a href="lib_c_d.htm#current_dir">current_dir</a>,
<a href="lib_e_g.htm#getenv">getenv</a>,
<a href="lib_c_d.htm#command_line">command_line</a>
</td></tr>

</table>


<a name=system_exec></a><font color="#006633" size=+2><br>
<center><b>system_exec</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i1 = system_exec(st, i2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Try to run the command given by st. st must be a command to run an
 executable program, 
 possibly with some command-line arguments.
 If the program can be run, i1 will be the exit code from the
 program. If it is not possible to run the program, system_exec()
 might return -1, or perhaps (on Linux/FreeBSD) some other non-zero error code. 
 i2 is a code that indicates what to do about the
 graphics mode when system_exec() is finished. These codes are
 the same as for system():<P>
When i2 is 0, the previous graphics mode is restored and the
 screen is cleared.
<P>
When i2 is 1, a beep sound will be made and the program will wait
 for the user to press a key before the previous graphics mode
 is restored.
<P>
When i2 is 2, the graphics mode is not restored and the screen
 is not cleared.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>On DOS32 or WIN32, system_exec() will only run <b>.exe</b> and <b>.com</b> 
 programs. To run
 <b>.bat</b> files, or built-in DOS commands, you need system().
 Some commands, such as DEL, are not programs, they are
 actually built-in to the command interpreter.
<P>
 On DOS32 and WIN32, system_exec() does not allow the use of 
 command-line redirection in the command string st, nor does it
 allow you to quote strings that contain blanks, such as file names.
<P>
exit codes from DOS or Windows programs are normally in the
 range 0 to 255, with 0 indicating "success".
<P>
You can run a Euphoria program using system_exec(). A Euphoria
 program can return an exit code using abort().
<P>
system_exec() does not start a new DOS shell.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">integer </font><font color="#330033">exit_code</font>
<font color="#330033">exit_code = </font><font color="#FF00FF">system_exec</font><font color="#330033">(</font><font color="#00A033">"xcopy temp1.dat temp2.dat"</font><font color="#330033">, 2)</font>
<font color="#330033"></font>
<font color="#0000FF">if </font><font color="#330033">exit_code = -1 </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(2, </font><font color="#00A033">"\n couldn't run xcopy.exe\n"</font><font color="#330033">)</font>
<font color="#0000FF">elsif </font><font color="#330033">exit_code = 0 </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(2, </font><font color="#00A033">"\n xcopy succeeded\n"</font><font color="#330033">)</font>
<font color="#0000FF">else</font>
<font color="#FF00FF">    printf</font><font color="#330033">(2, </font><font color="#00A033">"\n xcopy failed with code %d\n"</font><font color="#330033">, exit_code)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF0055">-- executes myprog with two file names as arguments</font>
<font color="#0000FF">if </font><font color="#FF00FF">system_exec</font><font color="#330033">(</font><font color="#00A033">"ex \\test\\myprog.ex indata outdata"</font><font color="#330033">, 2) </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(2, </font><font color="#00A033">"failure!\n"</font><font color="#330033">)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#system">system</a>,
<a href="lib_a_b.htm#abort">abort</a>
</td></tr>

</table>


<a name=tan></a><font color="#006633" size=+2><br>
<center><b>tan</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x2 = tan(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the tangent of x1, where x1 is in radians.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to an atom or to all elements
 of a sequence.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">t = </font><font color="#FF00FF">tan</font><font color="#330033">(1.0)</font>
<font color="#FF0055">-- t is 1.55741</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#sin">sin</a>,
<a href="lib_c_d.htm#cos">cos</a>,
<a href="lib_a_b.htm#arctan">arctan</a>
</td></tr>

</table>


<a name=task_clock_start></a><font color="#006633" size=+2><br>
<center><b>task_clock_start</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">task_clock_start()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Restart the clock used for scheduling real-time tasks. Call this routine,
  some time after calling task_clock_stop(), when you want scheduling 
  of real-time tasks to continue.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>task_clock_stop() and task_clock_start() can be used to freeze
  the scheduling of real-time tasks. 
  <p>
  task_clock_start() causes the scheduled times of all real-time tasks to be
  incremented by the amount of time since task_clock_stop() was called. 
  This allows a game, simulation, or other program to continue smoothly.
  <p>
  Time-shared tasks are not affected.
  
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF0055">-- freeze the game while the player answers the phone</font>
<font color="#330033">task_clock_stop()</font>
<font color="#0000FF">while </font><font color="#FF00FF">get_key</font><font color="#330033">() = -1 </font><font color="#0000FF">do</font>
<font color="#0000FF">end while</font>
<font color="#330033">task_clock_start()</font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td>
<a href="lib_s_t.htm#task_clock_stop">task_clock_stop</a>,
<a href="lib_s_t.htm#task_schedule">task_schedule</a>,
<a href="lib_s_t.htm#task_yield">task_yield</a>,
<a href="lib_s_t.htm#task_suspend">task_suspend</a>
</td></tr>

</table>


<a name=task_clock_stop></a><font color="#006633" size=+2><br>
<center><b>task_clock_stop</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">task_clock_stop()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Stop the scheduling of real-time tasks. Scheduling will resume when
task_clock_start() is called. Time-shared tasks can continue. The current
task can also continue, unless it's a real-time task and it yields.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Call task_clock_stop() when you want to take time out
  from scheduling real-time tasks. For instance, you want to temporarily
  suspend a game or simulation for a period of time.
  <p>
  The time() function is not affected by this.
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td>
<a href="lib_s_t.htm#task_clock_start">task_clock_start</a>,
<a href="lib_s_t.htm#task_schedule">task_schedule</a>,
<a href="lib_s_t.htm#task_yield">task_yield</a>,
<a href="lib_s_t.htm#task_suspend">task_suspend</a>
</td></tr>

</table>


<a name=task_create></a><font color="#006633" size=+2><br>
<center><b>task_create</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">a2 = task_create(i1, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Create a new task. i1 is the routine id of a user-defined Euphoria procedure. 
 s is the list of arguments that will be passed to this procedure 
  when the task starts executing. The result, a2, is a task identifier,
  created by the system. It can be used to identify this task to 
  the other Euphoria multitasking routines.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>task_create() creates a new task, 
  but does not start it executing.
  <p>Each task has its own set of private variables and its own call stack.
  Global and local variables are shared between all tasks. 
  <p>
  If a run-time error is detected, the traceback will include information on
  all tasks, with the offending task listed first.
  <p>Many tasks can be created that all run the same procedure, possibly
  with different parameters.
  <p>A task cannot be based on a function, since there would be no 
  way of using the function result.
  <p>
  Each task id is unique. task_create() never returns the same task id
  as it did before. Task id's are integer-valued atoms and can be as 
  large as the largest integer-valued atom (15 digits).
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">mytask = task_create(</font><font color="#FF00FF">routine_id</font><font color="#993333">(</font><font color="#00A033">"myproc"</font><font color="#993333">)</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">5, 9, </font><font color="#00A033">"ABC"</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#task_schedule">task_schedule</a>,
<a href="lib_s_t.htm#task_yield">task_yield</a>,
<a href="lib_s_t.htm#task_suspend">task_suspend</a>,
<a href="lib_s_t.htm#task_self">task_self</a>
</td></tr>

</table>


<a name=task_list></a><font color="#006633" size=+2><br>
<center><b>task_list</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">s = task_list()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Get a sequence containing the task id's for all active or suspended tasks.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This function lets you find out which tasks currently exist. Tasks that
 have terminated are not included. You can
 pass a task id to task_status() to find out more about a particular task.

</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">sequence </font><font color="#330033">tasks</font>
<font color="#330033">     </font>
<font color="#330033">tasks = task_list()</font>
<font color="#0000FF">for </font><font color="#330033">i = 1 </font><font color="#0000FF">to </font><font color="#FF00FF">length</font><font color="#330033">(tasks) </font><font color="#0000FF">do</font>
<font color="#0000FF">    if </font><font color="#330033">task_status(tasks</font><font color="#993333">[</font><font color="#330033">i</font><font color="#993333">]</font><font color="#330033">) > 0 </font><font color="#0000FF">then</font>
<font color="#FF00FF">        printf</font><font color="#330033">(1, </font><font color="#00A033">"task %d is active\n"</font><font color="#330033">, tasks</font><font color="#993333">[</font><font color="#330033">i</font><font color="#993333">]</font><font color="#330033">)</font>
<font color="#0000FF">    end if</font>
<font color="#0000FF">end for</font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td>
<a href="lib_s_t.htm#task_status">task_status</a>,
<a href="lib_s_t.htm#task_create">task_create</a>,
<a href="lib_s_t.htm#task_schedule">task_schedule</a>,
<a href="lib_s_t.htm#task_yield">task_yield</a>,
<a href="lib_s_t.htm#task_suspend">task_suspend</a>

</td></tr>

</table>


<a name=task_schedule></a><font color="#006633" size=+2><br>
<center><b>task_schedule</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">task_schedule(a, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Schedule task a to run using scheduling parameter x. a must be a task 
identifier returned by task_create(). If x is a positive atom, then x tells the
task scheduler how many times it should run time-shared task a in one 
burst before it considers running other tasks. If x is a sequence, it 
must be a 2-element sequence {min, max}, both values greater than or 
equal to 0, where min and max indicate the minimum and maximum times, 
in seconds, to wait before running 
real-time task a. min and max also set the time interval for 
subsequent runs of task a, unless overridden by another call 
to task_schedule() or task_suspend().

</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The task scheduler, which is built-in to the Euphoria run-time system, will use the
scheduling parameter x as a guide when scheduling this task. It may not 
always be possible to achieve the desired number of consecutive runs, 
or the desired time frame. For instance, a task might take so long before
yielding control, that another task misses it's desired time window. 

<p>
Real-time tasks have a higher priority. Time-shared tasks are run when
no real-time task is ready to execute. A task can switch back and forth
between real-time and time-shared. It all depends on the last call to
task_schedule() for that task. The scheduler never runs a real-time
task before the start of its time frame (min value), and it tries to
avoid missing the task's deadline (max value).

<p>
For precise timing, you can specify the same value for min and max.
However, by specifying a range of times, you give the scheduler 
some flexibility. This allows it to schedule tasks more efficiently, 
and avoid non-productive delays. When the scheduler must delay, 
it calls sleep(), unless the required delay is very short. 
sleep() lets the operating system run other programs.

<p>
The min and max values can be fractional. If the min value is smaller than
the resolution of the scheduler's clock (currently 0.01 seconds on Windows
and Linux/FreeBSD, and 0.55 seconds on DOS unless tick_rate() is called) then
accurate time scheduling cannot be performed, but the scheduler will
try to run the task several times in a row to approximate what is desired.
For example, if you ask for a min time of 0.002 seconds, then the scheduler
will try to run your task .01/.002 = 5 times in a row before waiting for the
clock to "click" ahead by .01. During the next 0.01 seconds it will
run your task (up to) another 5 times etc. provided your task can 
be completed 5 times in one clock period.

<p>
For time-shared tasks, increasing parameter x 
will increase the percentage of CPU time given to the selected task,
while decreasing the percentage given to other time-shared tasks.
It will also increase the efficiency of the program, since each actual task
switch wastes a bit of time. A task_yield() where the same task continues
executing takes less time. However it may not be desirable to block other
time-shared tasks from running for long periods of time. Note that 
real-time tasks are always given priority at any task_yield(), once 
their activation time has been reached.
</ul>

<p>
At program start-up there is a single task running. Its task id is 0,
and initially it's a time-shared task allowed 1 run per task_yield(). 
No other task can run until task 0 executes a task_yield().

<p>
If task 0 (top-level) runs off the end of the main file,
the whole program terminates, regardless of what other tasks 
may still be active.

<p>
If the scheduler finds that no task is active, i.e. no task will ever
run again (not even task 0), it terminates the program with a 0
exit code code, similar to abort(0).
</td></tr>


<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033"></font>
<font color="#FF0055">-- Task t1 will be executed up to 10 times in a row before</font>
<font color="#FF0055">-- other time-shared tasks are given control. If a real-time</font>
<font color="#FF0055">-- task needs control, t1 will lose control to the real-time task.</font>
<font color="#330033">task_schedule(t1, 10) </font>
<font color="#330033"></font>
<font color="#FF0055">-- Task t2 will be scheduled to run some time between 4 and 5 seconds</font>
<font color="#FF0055">-- from now. Barring any rescheduling of t2, it will continue to</font>
<font color="#FF0055">-- execute every 4 to 5 seconds thereafter.</font>
<font color="#330033">task_schedule(t2, </font><font color="#993333">{</font><font color="#330033">4, 5</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#task_create">task_create</a>,
<a href="lib_s_t.htm#task_yield">task_yield</a>,
<a href="lib_s_t.htm#task_suspend">task_suspend</a>,
<a href="lib_s_t.htm#task_self">task_suspend</a>
</td></tr>

</table>


<a name=task_self></a><font color="#006633" size=+2><br>
<center><b>task_self</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">a = task_self()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the task id of the current task.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This value may be needed, if a task wants to schedule, kill or suspend 
itself.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF0055">-- schedule self</font>
<font color="#330033">task_schedule(task_self</font><font color="#993333">()</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">5.9, 6.0</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#task_create">task_create</a>,
<a href="lib_s_t.htm#task_schedule">task_schedule</a>,
<a href="lib_s_t.htm#task_yield">task_yield</a>,
<a href="lib_s_t.htm#task_suspend">task_suspend</a>

</td></tr>

</table>


<a name=task_status></a><font color="#006633" size=+2><br>
<center><b>task_status</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">i2 = task_status(a)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the status of a task. Status values are 1 (active), 0 (suspended), 
and -1 (task does not exist)
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>A task might want to know the status of one or more other tasks when 
deciding whether to proceed with some processing.
<p>
A -1 value could indicate a task that never existed, or a task that
terminated naturally or was killed.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">integer </font><font color="#330033">s</font>
<font color="#330033">     </font>
<font color="#330033">s = task_status(tid)</font>
<font color="#0000FF">if </font><font color="#330033">s = 1 </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(1, </font><font color="#00A033">"ACTIVE\n"</font><font color="#330033">)</font>
<font color="#0000FF">elsif </font><font color="#330033">s = 0 </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(1, </font><font color="#00A033">"SUSPENDED\n"</font><font color="#330033">)</font>
<font color="#0000FF">else</font>
<font color="#FF00FF">    puts</font><font color="#330033">(1, </font><font color="#00A033">"DOESN'T EXIST\n"</font><font color="#330033">)</font>
<font color="#0000FF">end if</font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td>
<a href="lib_s_t.htm#task_list">task_list</a>,
<a href="lib_s_t.htm#task_create">task_create</a>,
<a href="lib_s_t.htm#task_schedule">task_schedule</a>,
<a href="lib_s_t.htm#task_suspend">task_suspend</a>

</td></tr>

</table>


<a name=task_suspend></a><font color="#006633" size=+2><br>
<center><b>task_suspend</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">task_suspend(a)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Suspend execution of task a.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This causes task a to be suspended. Task a will not be executed again unless
 there is a call to task_schedule() for task a. a is a task id
 returned from task_create().<p>
 Any task can suspend any other task. If a task suspends itself,
 the suspension will start as soon as the task calls task_yield().
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF0055">-- suspend task 15</font>
<font color="#330033">task_suspend(15)</font>
<font color="#330033"></font>
<font color="#FF0055">-- suspend current task</font>
<font color="#330033">task_suspend(task_self</font><font color="#993333">()</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#task_create">task_create</a>,
<a href="lib_s_t.htm#task_schedule">task_schedule</a>,
<a href="lib_s_t.htm#task_self">task_self</a>,
<a href="lib_s_t.htm#task_yield">task_yield</a>
</td></tr>

</table>


<a name=task_yield></a><font color="#006633" size=+2><br>
<center><b>task_yield</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica">task_yield()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Yield control to the scheduler. The scheduler can then choose another task 
to run, or perhaps let the current task continue running.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Tasks should call task_yield() periodically so other tasks will
have a chance to run. Only when task_yield() is called, is there
a way for the scheduler to take back control from a task. 
This is what's known as cooperative multitasking.<p>
A task can have calls to task_yield() in many different places in it's code,
and at any depth of subroutine call.
<p>
The scheduler will use the current value of {min, max} or the current
number of consecutive runs remaining, in determining when to return to
the current task.
<p>
When control returns, execution will continue with the statement that
follows task_yield(). The call-stack and all private variables will remain
as they were when task_yield() was called. Global and local variables may
have changed, due to the execution of other tasks.<p>
Tasks should try to call task_yield() often enough to avoid causing
real-time tasks to miss their time window, and to avoid blocking time-shared
tasks for an excessive period of time. On the other hand, there is a
bit of overhead in calling task_yield(), and this overhead is slightly
larger when an actual switch to a different task takes place.<p>
A task should avoid calling task_yield() when it is in the middle
of a delicate operation that requires exclusive access to some data. 
Otherwise a race-condition could occur, where one task might interfere
with an operation being carried out by another task. In some cases
a task might need to mark some data as "locked" or "unlocked" 
in order to prevent this possibility.
With cooperative multitasking, these concurrency issues are much less 
of a problem than with the preemptive multitasking that other 
languages support.

</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF0055">-- From Language war game.</font>
<font color="#FF0055">-- This small task deducts life support energy from either the </font>
<font color="#FF0055">-- large Euphoria ship or the small shuttle.</font>
<font color="#FF0055">-- It seems to run "forever" in an infinite loop, </font>
<font color="#FF0055">-- but it's actually a real-time task that is called</font>
<font color="#FF0055">-- every 1.7 to 1.8 seconds throughout the game.</font>
<font color="#FF0055">-- It deducts either 3 units or 13 units of life support energy each time.</font>
<font color="#330033"></font>
<font color="#0000FF">global procedure </font><font color="#330033">task_life()</font>
<font color="#FF0055">-- independent task: subtract life support energy </font>
<font color="#0000FF">    while </font><font color="#330033">TRUE </font><font color="#0000FF">do</font>
<font color="#0000FF">        if </font><font color="#330033">shuttle </font><font color="#0000FF">then</font>
<font color="#330033">            p_energy(-3)</font>
<font color="#0000FF">        else</font>
<font color="#330033">            p_energy(-13)</font>
<font color="#0000FF">        end if</font>
<font color="#330033">        task_yield()</font>
<font color="#0000FF">    end while</font>
<font color="#0000FF">end procedure</font>
<font color="#330033"> </font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#task_create">task_create</a>,
<a href="lib_s_t.htm#task_schedule">task_schedule</a>,
<a href="lib_s_t.htm#task_suspend">task_suspend</a>
<a href="lib_s_t.htm#task_self">task_suspend</a>

</td></tr>

</table>



<a name=text_color></a><font color="#006633" size=+2><br>
<center><b>text_color</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 text_color(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Set the foreground text color. Add 16 to get blinking text in some modes.
 See <font color="#5500FF"><b>graphics.e</b></font> for a list
 of possible colors.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Text that you print <b><i>after</i></b> calling text_color() will have the
 desired color.
<P>
When your program terminates, the last color that you selected
 and actually printed on the screen will remain in effect.
 Thus you may have to print something, maybe just '\n', in
 WHITE to restore white text, especially if you are at the
 bottom line of the screen, ready to scroll up.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">text_color(BRIGHT_BLUE)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#bk_color">bk_color</a>
</td></tr>

</table>


<a name=text_rows></a><font color="#006633" size=+2><br>
<center><b>text_rows</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32, WIN32</b></font>
</td></tr>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 i2 = text_rows(i1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Set the number of lines on a <font color="#CC3366">text-mode</font> screen
 to i1 if possible. i2 will be set to the actual new number of lines.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Values of 25, 28, 43 and 50 lines are supported by most video
 cards.
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#graphics_mode">graphics_mode</a>
</td></tr>

</table>


<a name=tick_rate></a><font color="#006633" size=+2><br>
<center><b>tick_rate</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 tick_rate(a)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Specify the number of clock-tick interrupts per second.
 This determines the precision of the time() library
 routine. It also affects the sampling rate for time
 profiling.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>tick_rate() is ignored on 
   <font color="#CC3366"><b>WIN32</b></font> and
   <font color="#CC3366"><b>Linux/FreeBSD</b></font>.
 The time resolution on WIN32 is always 100 ticks/second.
<P>
On a PC the clock-tick interrupt normally occurs at 18.2
 interrupts per second. tick_rate() lets you increase
 that rate, but not decrease it.
<P>
tick_rate(0) will restore the rate to the normal 18.2 rate.
 Euphoria will also restore the rate automatically when it exits,
 even when it finds an error in your program.
<P>
If a program runs in a DOS window with a tick rate other
 than 18.2, the time() function will not advance unless the
 window is the active window.
<p>
With a tick rate other than 18.2, the time() function on DOS
takes about 1/100 the usual time that it needs to execute.
On Windows and FreeBSD, time() normally executes very quickly.
<P>
While <font color="#993333"><b>ex.exe</b></font> is running,
 the system will maintain the correct time of day. However if
 <font color="#993333"><b>ex.exe</b></font> should crash (e.g. you see
 a "CauseWay..." error) while the tick rate is high, you (or
 your user) may need to reboot the machine to restore the
 proper rate. If you don't, the system time may advance too
 quickly. This problem does not occur on
 <font color="#CC3366"><b>Windows 95/98/NT</b></font>, only on
 <font color="#CC3366"><b>DOS</b></font> or
 <font color="#CC3366"><b>Windows 3.1</b></font>. You will always get
 back the correct time of day from the battery-operated clock in your
 system when you boot up again.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">tick_rate(100)</font>
<font color="#FF0055">-- time() will now advance in steps of .01 seconds</font>
<font color="#FF0055">-- instead of the usual .055 seconds</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#time">time</a>,
<a href="refman_3.htm#21">time profiling</a>
</td></tr>

</table>


<a name=time></a><font color="#006633" size=+2><br>
<center><b>time</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> a = time()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the number of seconds since some fixed point in the past.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Take the difference between two readings of time(), to
 measure, for example, how long a section of code takes to
 execute.
<P>
The resolution with <font color="#CC3366"><b>DOS32</b></font> is normally
 about 0.05 seconds. On <font color="#CC3366"><b>WIN32 and Linux/FreeBSD</b></font> 
 it's about 0.01 seconds.
<P>
Under <font color="#CC3366"><b>DOS32</b></font> you can improve
 the resolution by calling tick_rate().
<P>
Under <font color="#CC3366"><b>DOS32</b></font> the period of time that 
you can normally measure is limited to 24 hours. After that, the 
value returned by time() will reset and start over. If however,
you have called tick_rate(), and clock ticks are happening at a rate
that is higher than the usual 18.2/sec, time() will continue much longer,
since in that case, Euphoria handles the clock-tick interrupt directly, 
and accumulates the ticks in a larger, 32-bit variable.

<p> 
DOS emulation under Windows XP is not perfect. When you do time profiling,
(with profile_time) the time() function might be off by several percent. 
This problem does not occur on Windows ME/98/95.
</td></tr>

On some machines, time() can return a negative number.
However, you can still use the difference in calls to time() to measure
elapsed time.
 >
<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">constant </font><font color="#330033">ITERATIONS = 1000000</font>
<font color="#FF00FF">integer </font><font color="#330033">p</font>
<font color="#FF00FF">atom </font><font color="#330033">t0, loop_overhead</font>
<font color="#330033"></font>
<font color="#330033">t0 = </font><font color="#FF00FF">time</font><font color="#330033">()</font>
<font color="#0000FF">for </font><font color="#330033">i = 1 </font><font color="#0000FF">to </font><font color="#330033">ITERATIONS </font><font color="#0000FF">do</font>
<font color="#FF0055">    -- time an empty loop</font>
<font color="#0000FF">end for</font>
<font color="#330033">loop_overhead = </font><font color="#FF00FF">time</font><font color="#330033">() - t0</font>
<font color="#330033"></font>
<font color="#330033">t0 = </font><font color="#FF00FF">time</font><font color="#330033">()</font>
<font color="#0000FF">for </font><font color="#330033">i = 1 </font><font color="#0000FF">to </font><font color="#330033">ITERATIONS </font><font color="#0000FF">do</font>
<font color="#330033">    p = </font><font color="#FF00FF">power</font><font color="#330033">(2, 20)</font>
<font color="#0000FF">end for</font>
<font color="#330033">? (</font><font color="#FF00FF">time</font><font color="#993333">() </font><font color="#330033">- t0 - loop_overhead)/ITERATIONS</font>
<font color="#FF0055">-- calculates time (in seconds) for one call to power</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#date">date</a>,
<a href="lib_s_t.htm#tick_rate">tick_rate</a>
</td></tr>

</table>


<a name=trace></a><font color="#006633" size=+2><br>
<center><b>trace</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> with trace<BR>
 trace(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>If i is 1 or 2, turn on full-screen interactive statement tracing/debugging. 
 If i is 3, turn on tracing of statements to a file called <b>ctrace.out</b>.
 If i is 0, turn off tracing. When i is 1 a color display appears.
 When i is 2 a monochrome trace display appears. 
 Tracing can only occur in routines that were
 compiled "<b>with trace</b>", and trace() has no effect unless it is
 executed in a "<b>with trace</b>" <b>section</b> of your program. 
 <p>
 See
 <a href="refman_3.htm#1">Part I - 3.1 Debugging</a> for a full discussion
  of tracing / debugging.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Use trace(2) if the color display is hard to view on your system.
<p>
All forms of trace() are supported by the Interpreter.
<p> 
Only trace(3) is supported by the Euphoria To C Translator.
</td></tr>


<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">if </font><font color="#330033">x < 0 </font><font color="#0000FF">then</font>
<font color="#FF0055">    -- ok, here's the case I want to debug...</font>
<font color="#FF00FF">    trace</font><font color="#330033">(1)</font>
<font color="#FF0055">    -- etc.</font>
<font color="#330033">    ...</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#profile">profile</a>,
               <a href="refman_3.htm">debugging and profiling</a>
</td></tr>

</table>

<p>&nbsp;<p><center>
<font color="#006633" face="Arial, Helvetica" size=+1>... continue</font><br>&nbsp;<br>
<font face="Arial, Helvetica" size=-1>
<a href="lib_a_b.htm">from A to B</a> &nbsp; | &nbsp;
<a href="lib_c_d.htm">from C to D</a> &nbsp; | &nbsp;
<a href="lib_e_g.htm">from E to G</a> &nbsp; | &nbsp;
<a href="lib_h_o.htm">from H to O</a> &nbsp; | &nbsp;
<a href="lib_p_r.htm">from P to R</a> &nbsp; | &nbsp;
from S to T &nbsp; | &nbsp;
<a href="lib_u_z.htm">from U to Z</a></font></center><p>&nbsp;


</body>
</html>

