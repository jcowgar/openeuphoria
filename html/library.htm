<!-- GENERATED BY A EUPHORIA PROGRAM. DO NOT EDIT! -->


<html>
<head><title>Euphoria v3.1 Reference Manual Part II - Section 1 and 2</title>
<style type="text/css">
<!--
body        {background-color: "#FFFFFF";}
a           {text-decoration: none;}
a:link      {color: "#0033BB"; text-decoration: underline;}
a:visited   {color: "#006699"; text-decoration: underline;}
a:active    {color: red; text-decoration: underline;}
a:hover     {color: red; text-decoration: underline;}
a.blue    {text-decoration: none;}
a.blue:link      {color: "#5500FF"; text-decoration: underline;}
a.blue:visited   {color: "#5500FF"; text-decoration: underline;}
a.blue:active    {color: red; text-decoration: underline;}
a.blue:hover     {color: red; text-decoration: underline;}
a.brown      {text-decoration: none;}
a.brown:link      {color: "#993333"; text-decoration: underline;}
a.brown:visited   {color: "#993333"; text-decoration: underline;}
a.brown:active    {color: red; text-decoration: underline;}
a.brown:hover     {color: red; text-decoration: underline;}
-->
</style>

</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">
<table width=90% border=0><tr><td>

<center><font color="#006633" size=+2><b>
<br>
 Part II - Library Routines
</b></font></center>

<center><font color="#FF0099" size=+2>
<br>
 1. Introduction
</font></center>
<p>&nbsp;<br>

 A large number of library routines are provided. Some are built right into
 the interpreter, <font color="#993333"><b>ex.exe</b></font>,
 <font color="#993333"><b>exw.exe</b></font> or
 <font color="#993333"><b>exu</b></font>.
 Others are written in Euphoria and you
 must include one of the <b>.e</b> files in
 <font color="#5500FF"><b>euphoria\include</b></font> to use them. Where this
 is the case, the appropriate include file is noted in the "Syntax" part of
 the description. Of course an include file need only be included once in your
 program. The editor displays in magenta those routines that are built into
 the interpreter, and require no include file. You can override the definition
 of these built-in routines by defining your own routine with the same name.
 You will get a suppressible warning if you do this.

<p>
 To indicate what kind of <font color="#993333"><b>object</b></font> may
 be passed in and returned, the following prefixes are used:

<p>
<center><table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><b>x</b></td>
<td width=10 align=center valign=top>-</td>
<td>a general <a href="refman_2.htm#1">object</a>
     (atom or sequence)</td></tr>


<tr><td valign=top><b>s</b></td>
<td width=10 align=center valign=top>-</td>
<td>a <a href="refman_2.htm#1">sequence</a></td></tr>


<tr><td valign=top><b>a</b></td>
<td width=10 align=center valign=top>-</td>
<td>an <a href="refman_2.htm#1">atom</a></td></tr>


<tr><td valign=top><b>i</b></td>
<td width=10 align=center valign=top>-</td>
<td>an <a href="refman_2.htm#integer">integer</a></td></tr>


<tr><td valign=top><b>fn</b></td>
<td width=10 align=center valign=top>-</td>
<td>an <a href="refman_2.htm#integer">integer</a> used
     as a file number</td></tr>


<tr><td valign=top><b>st</b></td>
<td width=10 align=center valign=top>-</td>
<td>a <a href="refman_2.htm#11">string sequence</a>,
     or <a href="refman_2.htm#char">single-character atom</a></td></tr>


<tr><td valign=top><b>m</b></td>
<td width=10 align=center valign=top>-</td>
<td>a <a href="#map">Map</a> created using <a href="lib_h_o.htm#map_new">map_new()</a></td></tr>


</table></center>

<p>
 Some routines are only available on one or two of the four platforms. 
 This is noted
 with "Platform: <font color="#CC3366"><b>DOS32</b></font>" or
 "Platform: <font color="#CC3366"><b>WIN32</b></font>" or
 "Platform: <font color="#CC3366"><b>Linux</b></font>" 
 in the description
 of the routine, and with (<font color="#CC3366"><b>DOS32</b></font>) or
 (<font color="#CC3366"><b>WIN32</b></font>) or
 (<font color="#CC3366"><b>Linux</b></font>) 
 in some other places. Things that work on Linux can generally be assumed
 to work on FreeBSD. The only exception is the mouse routines.

<p>
 A run-time error message will usually result if an illegal argument value
 is passed to any of these routines.

<p>
<hr>
<a name=2></a>
<center><font color="#FF0099" size=+2>
<br>
 2. Routines by Application Area
</font></center>
<p>

<a name=predefined></a>
<font color="#FF0099" size=+1>
<br>

<a name="type_checking"></a>
2.1 Type checking

</font>
<p>

 As well as declaring variables with these types, you can also call them
 just like ordinary functions, in order to test if a value is a certain
 type.

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_h_o.htm#integer"><b>integer</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an object is an integer</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#atom"><b>atom</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an object is an atom</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#sequence"><b>sequence</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an object is a sequence</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#object"><b>object</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an object is an object (always true)</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#isalnum"><b>isalnum</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is an alphanumeric character</td></tr>

<tr><td valign=top><a href="lib_h_o.htm#isalpha"><b>isalpha</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is an alpha character</td></tr>

<tr><td valign=top><a href="lib_h_o.htm#isascii"><b>isascii</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is an ascii character</td></tr>

<tr><td valign=top><a href="lib_h_o.htm#iscntrl"><b>iscntrl</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is a control character</td></tr>

<tr><td valign=top><a href="lib_h_o.htm#isdigit"><b>isdigit</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is a digit</td></tr>

<tr><td valign=top><a href="lib_h_o.htm#isgraph"><b>isgraph</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is a printable character not including space</td></tr>

<tr><td valign=top><a href="lib_h_o.htm#islower"><b>islower</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is a lower case character</td></tr>

<tr><td valign=top><a href="lib_h_o.htm#isprint"><b>isprint</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is a printable character including space</td></tr>

<tr><td valign=top><a href="lib_h_o.htm#ispunct"><b>ispunct</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is a punctuation character</td></tr>

<tr><td valign=top><a href="lib_h_o.htm#isspace"><b>isspace</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is a space</td></tr>

<tr><td valign=top><a href="lib_h_o.htm#isupper"><b>isupper</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is an upper case character</td></tr>

<tr><td valign=top><a href="lib_h_o.htm#isxdigit"><b>isxdigit</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if an atom is a valid hex digit</td></tr>

</table>

<p>
<hr>

<a name=seq_manip></a>
<font color="#FF0099" size=+1>
<br>

2.2 Sequence Manipulation

</font>
<p>

<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_h_o.htm#length"><b>length</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return the length of a sequence</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#repeat"><b>repeat</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>repeat an object n times to form a sequence of length n</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#reverse"><b>reverse</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>reverse a sequence</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#append"><b>append</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>add a new element to the end of a sequence</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#prepend"><b>prepend</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>add a new element to the beginning of a sequence</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#insert"><b>insert</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>insert one sequence into another</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#remove"><b>remove</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>remove an item from a sequence</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#remove_range"><b>remove_range</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>remove a range of items from a sequence</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#replace_range"><b>replace_range</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>replace a range of items with a new item or sequence</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#left"><b>left</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return the first n items of st with bounds checking</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#mid"><b>mid</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return from n1 n2 number of items of st with bounds checking</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#slice"><b>slice</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return from n1 to n2 of st with bounds checking</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#right"><b>right</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return the last n items of st with bounds checking</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#split"><b>split</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>split a sequence by a sequence</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#split_adv"><b>split_adv</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>advanced split that will allow setting a limit and split type</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#join"><b>join</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>join a sequence by another sequence</td></tr>


</table>

<p>
<hr>

<a name=srch_srt></a>
<font color="#FF0099" size=+1>
<br>

2.3 Searching and Sorting

</font>
<p>

<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_c_d.htm#compare"><b>compare</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>compare two objects</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#equal"><b>equal</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test if two objects are identical</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#find"><b>find</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>find an object in a sequence - start searching from element number 1</td></tr>

<tr><td valign=top><a href="lib_e_g.htm#find_from"><b>find_from</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>find an object in a sequence - start searching from any element number</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#findany"><b>findany</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>find any element in needle in haystack - start searching from element number 1</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#findany_from"><b>findany_from</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>find any element in needle in haystack - start searching from any element number</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#match"><b>match</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>find a sequence as a slice of another sequence - start searching from element number 1</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#match_from"><b>match_from</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>find a sequence as a slice of another sequence - start searching from any element number</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#sort"><b>sort</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>sort the elements of a sequence into ascending order</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#custom_sort"><b>custom_sort</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>sort the elements of a sequence based on a compare
     function that you supply</td></tr>


</table>

<p>
<hr>

<a name=pattern_m></a>
<font color="#FF0099" size=+1>
<br>

2.4 Pattern Matching

</font>
<p>

<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_h_o.htm#lower"><b>lower</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>convert an atom or sequence to lower case</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#upper"><b>upper</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>convert an atom or sequence to upper case</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#wildcard_match"><b>wildcard_match</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>match a pattern containing ? and * wildcards</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#wildcard_file"><b>wildcard_file</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>match a file name against a wildcard specification</td></tr>


</table>

<p>
<hr>

<a name=math></a>
<font color="#FF0099" size=+1>
<br>

2.5 Math

</font>
<p>
 These routines can be applied to individual atoms or to sequences of
 values. See <a href="refman_2.htm#26">Part I - Core Language -
 Operations on Sequences</a>.

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_s_t.htm#sqrt"><b>sqrt</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>calculate the square root of an object</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#rand"><b>rand</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>generate random numbers</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#sin"><b>sin</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>calculate the sine of an angle</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#arcsin"><b>arcsin</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>calculate the angle with a given sine</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#cos"><b>cos</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>calculate the cosine of an angle</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#arccos"><b>arccos</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>calculate the angle with a given cosine</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#tan"><b>tan</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>calculate the tangent of an angle</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#arctan"><b>arctan</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>calculate the arc tangent of a number</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#log"><b>log</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>calculate the natural logarithm</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#floor"><b>floor</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>round down to the nearest integer</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#ceil"><b>ceil</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>round up to the nearest integer</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#round"><b>round</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>rounds's elements to the nearest integer</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#round_prec"><b>round_prec</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>rounds's elements to the given precision</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#remainder"><b>remainder</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>calculate the remainder when a number is divided by another</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#power"><b>power</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>calculate a number raised to a power</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#sign"><b>sign</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>test an objects signness</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#abs"><b>abs</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return the absolute value</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#average"><b>average</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>compute the average item in a sequence</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#sum"><b>sum</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>add all items in a sequence</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#max"><b>max</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>find the maximum item in a sequence</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#min"><b>min</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>find the minumum item in a sequence</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#PI"><b>PI</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>the mathematical value PI (3.14159...)</td></tr>


</table>

<p>
<hr>

<a name=bitw_logic></a>
<font color="#FF0099" size=+1>
<br>

2.6 Bitwise Logical Operations

</font>
<p>

 These routines treat numbers as collections of binary bits,
 and logical operations are performed on corresponding
 bits in the binary representation of the numbers. There are
 no routines for shifting bits left or right, but you can
 achieve the same effect by multiplying or dividing by
 powers of 2.

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_a_b.htm#and_bits"><b>and_bits</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>perform logical AND on corresponding bits</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#or_bits"><b>or_bits</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>perform logical OR on corresponding bits</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#xor_bits"><b>xor_bits</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>perform logical XOR on corresponding bits</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#not_bits"><b>not_bits</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>perform logical NOT on all bits</td></tr>


</table>

<p>
<hr>

<a name=i_o></a>
<font color="#FF0099" size=+1>
<br>

2.7 File and Device I/O

</font>
<p>

 To do input or output on a file or device you must first open the file
 or device, then use the routines below to read or write to it, then close
 the file or device. <a href="lib_h_o.htm#open">open()</a> will give you
 a file number to use as the first argument of the other I/O routines.
 Certain files/devices are opened for you automatically (as text files):
<dl>
<dl>
<dt>
 0 - standard input
<dt>
 1 - standard output
<dt>
 2 - standard error
</dl>
</dl>

 Unless you redirect them on the 
 <a href="refman_1.htm#3">command-line</a>, standard input comes from
 the keyboard, standard output and standard error go to the screen. When
 you write something to the screen it is written immediately without
 buffering. If you write to a file, your characters are put into a buffer
 until there are enough of them to write out efficiently. When you 
 <a href=lib_c_d.htm#close>close()</a>
 or <a href=lib_e_g.htm#flush>flush()</a> the file or device, any 
 remaining characters are written out. 
 Input from
 files is also buffered. When your program terminates, any files that are
 still open will be closed for you automatically.

<dl>
<dt>
 <b><font color="#006633">Note:</font></b>

<dd>
 If a program (written in Euphoria or any other language) has a
 file open for writing, and you are forced to reboot your computer for
 any reason, you should immediately run <b>scandisk</b> to repair any
 damage to the file system that may have occurred.
</dl>

<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_h_o.htm#open"><b>open</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>open a file or device</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#close"><b>close</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>close a file or device</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#flush"><b>flush</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>flush out buffered data to a file or device</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#lock_file"><b>lock_file</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>lock a file or device</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#unlock_file"><b>unlock_file</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>unlock a file or device</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#read_file"><b>read_file</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read an entire file from an open file handle or from a given filename</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#read_lines"><b>read_lines</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read all lines from an open file handle or from a given filename</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#print"><b>print</b></a></td>
<td width=10 align=center valign=top>-</td>
<td><a name=print></a>print a Euphoria
     object on one line, with braces and commas {,,} to show the structure</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#pretty_print"><b>pretty_print</b></a></td>
<td width=10 align=center valign=top>-</td>
<td><a name=pretty_print></a>print a Euphoria
     object in a nice readable form, using multiple lines
     and appropriate indentation</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#?"><b>? x</b></a></td>
<td width=10 align=center valign=top>-</td>
<td><a name=questn></a>shorthand for print(1, x)</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#sprint"><b>sprint</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return a printed Euphoria object as a string sequence</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#printf"><b>printf</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>formatted print to a file or device</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#sprintf"><b>sprintf</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>formatted print returned as a string sequence</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#puts"><b>puts</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>output a string sequence to a file or device</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#getc"><b>getc</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read the next character from a file or device</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#gets"><b>gets</b></a></td>
<td width=10 align=center valign=top>-</td>
<td><a name=gets></a>read the next line from a file or device</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#get_bytes"><b>get_bytes</b></a></td>
<td width=10 align=center valign=top>-</td>
<td><a name=get_bytes></a>read the next n bytes
     from a file or device</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#prompt_string"><b>prompt_string</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>prompt the user to enter a string</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#get_key"><b>get_key</b></a></td>
<td width=10 align=center valign=top>-</td>
<td><a name=get_key></a>check for key
     pressed by the user, don't wait</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#wait_key"><b>wait_key</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>wait for user to press a key</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#get"><b>get</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read the representation of any Euphoria object from a file</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#prompt_number"><b>prompt_number</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>prompt the user to enter a number</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#value"><b>value</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read the representation of any Euphoria object from a string</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#seek"><b>seek</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>move to any byte position within an open file</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#where"><b>where</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>report the current byte position in an open file</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#pathinfo"><b>pathinfo</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return path information about a filename (dir, filename, extension)</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#dirname"><b>dirname</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return the directory name of a fully qualified filename</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#filename"><b>filename</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return the filename of a fully qualified filename</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#fileext"><b>fileext</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return the extension of a filename</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#current_dir"><b>current_dir</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return the name of the current directory</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#chdir"><b>chdir</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>change to a new current directory</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#dir"><b>dir</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return complete info on all files in a directory</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#walk_dir"><b>walk_dir</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>recursively walk through all files in a directory</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#allow_break"><b>allow_break</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>allow control-c/control-Break to terminate your program or not</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#check_break"><b>check_break</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>check if user has pressed control-c or control-Break</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#PATHSEP"><b>PATHSEP</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>the platform's path separator</td></tr>


</table>

<p>
<hr>

<a name=mouse_spt></a>
<font color="#FF0099" size=+1>
<br>

2.8 Mouse Support (DOS32 and Linux)

</font>
<p>

<b>Note:</b> On Windows XP, if you want the DOS mouse
to work in a (non-full-screen) window, you must disable QuickEdit mode
in the Properties for the DOS Window. 

<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_e_g.htm#get_mouse"><b>get_mouse</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return mouse "events" (clicks, movements)</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#mouse_events"><b>mouse_events</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>select mouse events to watch for</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#mouse_pointer"><b>mouse_pointer</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>display or hide the mouse pointer</td></tr>


</table>

<p>
<hr>

<a name=op_sys></a>
<font color="#FF0099" size=+1>
<br>

2.9 Operating System

</font>
<p>

<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_s_t.htm#time"><b>time</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>number of seconds since a fixed point in the past</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#tick_rate"><b>tick_rate</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>set the number of clock ticks per second (DOS32)</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#date"><b>date</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>current year, month, day, hour, minute, second etc.</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#command_line"><b>command_line</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>command-line used to run this program</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#getenv"><b>getenv</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>get value of an environment variable</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#system"><b>system</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>execute an operating system command line</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#system_exec"><b>system_exec</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>execute a program and get its exit code</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#abort"><b>abort</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>terminate execution</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#sleep"><b>sleep</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>suspend execution for a period of time</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#platform"><b>platform</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>find out which operating system are we running on</td></tr>


</table>

<p>
<hr>

<a name=machine_dep></a>
<font color="#FF0099" size=+1>
<br>

2.10 Special Machine-Dependent Routines

</font>
<p>

<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_h_o.htm#machine_func"><b>machine_func</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>specialized internal operations with a return value</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#machine_proc"><b>machine_proc</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>specialized internal operations with no return value</td></tr>


</table>

<p>
<hr>

<a name=debugging></a>
<font color="#FF0099" size=+1>
<br>

2.11 Debugging

</font>
<p>

<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_s_t.htm#trace"><b>trace</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>dynamically turns tracing on or off</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#profile"><b>profile</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>dynamically turns profiling on or off</td></tr>


</table>

<p>
<hr>

<a name=gr_sound></a>
<font color="#FF0099" size=+1>
<br>

2.12 Graphics & Sound

</font>
<p>

 The following routines let you display information on the screen. 
 In DOS, the
 PC screen can be placed into one of many graphics modes. See the top
 of <font color="#5500FF"><b>include\graphics.e</b></font> for a
 description of the modes. <b>There are two basic types of graphics mode
 available.</b> <font color="#993333"><b>Text</b> <b>modes</b></font>
 divide the screen up into lines, where each line has a certain number
 of characters.
 <font color="#993333"><b>Pixel-graphics</b> <b>modes</b></font>
 divide the screen up into many rows of dots, or "pixels". Each pixel
 can be a different color. In text modes you can display text only,
 with the choice of a foreground and a background
 color for each character. In pixel-graphics modes you can display lines,
 circles, dots, and also text. Any pixels that would be off the screen
 are safely clipped out of the image.

<p>
 For DOS32 we've included a routine for making sounds on your PC speaker.
 To make more sophisticated sounds, get the <b>Sound Blaster</b> library
 developed by <b>Jacques Deschenes</b>. It's available on the
 <a href="http://www.RapidEuphoria.com">Euphoria Web page</a>.

<p>
 <font color="#006633"><b>The following routines work in all
 text and pixel-graphics modes:</b></font>

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_c_d.htm#clear_screen"><b>clear_screen</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>clear the screen</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#position"><b>position</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>set cursor line and column</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#get_position"><b>get_position</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return cursor line and column</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#graphics_mode"><b>graphics_mode</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>select a new pixel-graphics or text mode (DOS32)</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#video_config"><b>video_config</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return parameters of current mode</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#scroll"><b>scroll</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>scroll text up or down</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#wrap"><b>wrap</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>control line wrap at right edge of screen</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#text_color"><b>text_color</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>set foreground text color</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#bk_color"><b>bk_color</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>set background color</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#palette"><b>palette</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>change color for one color number (DOS32)</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#all_palette"><b>all_palette</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>change color for all color numbers (DOS32)</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#get_all_palette"><b>get_all_palette</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>get the palette values for all colors (DOS32)</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#read_bitmap"><b>read_bitmap</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read a bitmap (.bmp) file and return a palette and
     a 2-d sequence of pixels</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#save_bitmap"><b>save_bitmap</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>create a bitmap (.bmp) file, given a palette and a
     2-d sequence of pixels</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#get_active_page"><b>get_active_page</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return the page currently being written to (DOS32)</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#set_active_page"><b>set_active_page</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>change the page currently being written to (DOS32)</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#get_display_page"><b>get_display_page</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return the page currently being displayed (DOS32)</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#set_display_page"><b>set_display_page</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>change the page currently being displayed (DOS32)</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#sound"><b>sound</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>make a sound on the PC speaker (DOS32)</td></tr>


</table>

<p>
 <font color="#006633"><b>The following routines work in text
 modes only:</b></font>

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_c_d.htm#cursor"><b>cursor</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>select cursor shape</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#text_rows"><b>text_rows</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>set number of lines on text screen</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#get_screen_char"><b>get_screen_char</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>get one character from the screen</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#put_screen_char"><b>put_screen_char</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>put one or more characters on the screen</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#save_text_image"><b>save_text_image</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>save a rectangular region from a text screen</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#display_text_image"><b>display_text_image</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>display an image on the text screen</td></tr>


</table>

<p>
 <font color="#006633"><b>The following routines work in
 pixel-graphics modes only (DOS32):</b></font>

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_p_r.htm#pixel"><b>pixel</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>set color of a pixel or set of pixels</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#get_pixel"><b>get_pixel</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read color of a pixel or set of pixels</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#draw_line"><b>draw_line</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>connect a series of graphics points with a line</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#polygon"><b>polygon</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>draw an n-sided figure</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#ellipse"><b>ellipse</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>draw an ellipse or circle</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#save_screen"><b>save_screen</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>save the screen to a bitmap (.bmp) file</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#save_image"><b>save_image</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>save a rectangular region from a pixel-graphics screen</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#display_image"><b>display_image</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>display an image on the pixel-graphics screen</td></tr>


</table>

<p>
<hr>

<a name=m_level_i></a>
<font color="#FF0099" size=+1>
<br>

2.13 Machine Level Interface

</font>
<p>

 We've grouped here a number of routines that you can use to access your
 machine at a low-level. With this low-level machine interface you can
 read and write to memory. You can also set up your own 386+ machine
 language routines and call them.

<p>
 Some of the routines listed below are unsafe, in the sense that Euphoria
 can't protect you if you use them incorrectly. You could crash your
 program or even your system. Under DOS32, if you reference a bad memory
 address it will often be safely caught by the CauseWay DOS extender, and
 you'll get an error message on the screen plus a dump of machine-level
 information in the file <font color="#993333"><b>cw.err</b></font>.
 Under WIN32, the operating system will usually pop up a termination box 
 giving a diagnostic message plus register information. Under Linux
 you'll typically get a segmentation violation.

<dl>
<dt>
<a name=safe></a>
<b><font color="#006633">Note:</font></b>

<dd>
 To assist programmers in debugging code involving these unsafe routines,
 we have supplied <font color="#5500FF"><b>safe.e</b></font>, an
 alternative to <font color="#5500FF"><b>machine.e</b></font>. If you copy
 <font color="#5500FF"><b>euphoria\include\safe.e</b></font> into the directory
 containing your program, and you rename <font color="#5500FF">
 <b>safe.e</b></font> as <font color="#5500FF"><b>machine.e</b></font> 
 in that directory, your program will run using safer 
 (but slower) versions of these low-level
 routines. <font color="#5500FF"><b>safe.e</b></font> can catch many
 errors, such as poking into a bad memory location.
 See the comments at the top of safe.e for instructions on
 how to use it and how to configure it optimally for your program. 
</dl>

<p>
 These machine-level-interface routines are important because they
 allow Euphoria programmers
 to access low-level features of the hardware and operating system.
 For some applications this is essential.

<p>
 Machine code routines can be written by hand, or taken from the
 disassembled output of a compiler for C or some other language.
 Pete Eberlein has written a "mini-assembler" for use with Euphoria.
 See the <a href="http://www.RapidEuphoria.com/">Archive</a>.
 Remember that your machine code will be running in 32-bit protected
 mode. See <font color="#5500FF"><b>demo\callmach.ex</b></font>
 for an example.

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_p_r.htm#peek"><b>peek</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read one or more bytes from memory</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#peeks"><b>peeks</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read one or more signed bytes from memory</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#peek2s"><b>peek2s</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read 2-byte signed values from memory</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#peek2u"><b>peek2u</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read 2-byte unsigned values from memory</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#peek4s"><b>peek4s</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read 4-byte signed values from memory</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#peek4u"><b>peek4u</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read 4-byte unsigned values from memory</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#peek_string"><b>peek_string</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>read a sequence of text from a null terminated string from memory</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#poke"><b>poke</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>write one or more bytes to memory</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#poke2"><b>poke2</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>write 2-bye values into memory</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#poke4"><b>poke4</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>write 4-byte values into memory</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#mem_copy"><b>mem_copy</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>copy a block of memory</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#mem_set"><b>mem_set</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>set a block of memory to a value</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#call"><b>call</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>call a machine language routine</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#dos_interrupt"><b>dos_interrupt</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>call a DOS software interrupt routine (DOS32)</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#allocate"><b>allocate</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>allocate a block of memory</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#free"><b>free</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>deallocate a block of memory</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#allocate_low"><b>allocate_low</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>allocate a block of low memory (address less than 1Mb) (DOS32)</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#free_low"><b>free_low</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>free a block allocated with allocate_low (DOS32)</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#allocate_string"><b>allocate_string</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>allocate a string of characters with 0 terminator</td></tr>


<tr><td valign=top><a href="lib_p_r.htm#register_block"><b>register_block</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>register an externally-allocated block of memory</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#unregister_block"><b>unregister_block</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>unregister an externally-allocated block of memory</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#get_vector"><b>get_vector</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return address of interrupt handler (DOS32)</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#set_vector"><b>set_vector</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>set address of interrupt handler (DOS32)</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#lock_memory"><b>lock_memory</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>ensure that a region of memory will never be swapped out (DOS32)</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#int_to_bytes"><b>int_to_bytes</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>convert an integer to 4 bytes</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#bytes_to_int"><b>bytes_to_int</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>convert 4 bytes to an integer</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#int_to_bits"><b>int_to_bits</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>convert an integer to a sequence of bits</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#bits_to_int"><b>bits_to_int</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>convert a sequence of bits to an integer</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#atom_to_float64"><b>atom_to_float64</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>convert an atom, to a sequence of 8 bytes in IEEE 64-bit
     floating-point format</td></tr>


<tr><td valign=top><a href="lib_a_b.htm#atom_to_float32"><b>atom_to_float32</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>convert an atom, to a sequence of 4 bytes in IEEE 32-bit
     floating-point format</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#float64_to_atom"><b>float64_to_atom</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>convert a sequence of 8 bytes in IEEE 64-bit floating-point
     format, to an atom</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#float32_to_atom"><b>float32_to_atom</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>convert a sequence of 4 bytes in IEEE 32-bit floating-point
     format, to an atom</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#set_rand"><b>set_rand</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>set the random number generator so it will generate a
     repeatable series of random numbers</td></tr>


<tr><td valign=top><a href="lib_u_z.htm#use_vesa"><b>use_vesa</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>force the use of the VESA graphics standard (DOS32)</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#crash_file"><b>crash_file</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>specify the file for writing error diagnostics 
     if Euphoria detects an error in your program.</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#crash_message"><b>crash_message</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>specify a message to be printed if Euphoria detects an error
     in your program</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#crash_routine"><b>crash_routine</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>specify a routine to be called if Euphoria detects an error
     in your program</td></tr>


</table>

<p>
<hr>

<a name=dyn_call></a>
<font color="#FF0099" size=+1>
<br>

2.14 Dynamic Calls

</font>
<p>

 These routines let you call Euphoria procedures and functions using a
 unique integer known as a
 <font color="#993333"><b>routine identifier</b></font>, rather than by
 specifying the name of the routine.

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_p_r.htm#routine_id"><b>routine_id</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>get a unique identifying number for a Euphoria routine</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#call_proc"><b>call_proc</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>call a Euphoria procedure using a routine id</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#call_func"><b>call_func</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>call a Euphoria function using a routine id</td></tr>


</table>

<p>
<hr>

<a name=call_c_func></a>
<font color="#FF0099" size=+1>
<br>

2.15 Calling C Functions (WIN32 and Linux)

</font>
<p>

 See
 <a class="blue" href="platform.htm#win32plat"><b>platform.doc</b>
 </a>for a description of WIN32 and Linux programming in Euphoria.

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_h_o.htm#open_dll"><b>open_dll</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>open a Windows dynamic link library (.dll file) 
  or Linux shared library (.so file)</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#define_c_proc"><b>define_c_proc</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>define a C function that is VOID (no value returned), or
     whose value your program will ignore</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#define_c_func"><b>define_c_func</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>define a C function that returns a value that your program
     will use</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#define_c_var"><b>define_c_var</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>get the memory address of a C variable.</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#c_proc"><b>c_proc</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>call a C function, ignoring any return value</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#c_func"><b>c_func</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>call a C function and get the return value</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#call_back"><b>call_back</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>get a 32-bit machine address for a Euphoria routine for use
     as a call-back address</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#message_box"><b>message_box</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>pop up a small window to get a Yes/No/Cancel response from
     the user</td></tr>


<tr><td valign=top><a href="lib_e_g.htm#free_console"><b>free_console</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>delete the console text window</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#instance"><b>instance</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>get the instance handle for the current program</td></tr>


</table>


<p>
<hr>

<a name=dyn_call></a>
<font color="#FF0099" size=+1>
<br>

2.14 Dynamic Calls

</font>
<p>

 These routines let you call Euphoria procedures and functions using a
 unique integer known as a
 <font color="#993333"><b>routine identifier</b></font>, rather than by
 specifying the name of the routine.

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_p_r.htm#routine_id"><b>routine_id</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>get a unique identifying number for a Euphoria routine</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#call_proc"><b>call_proc</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>call a Euphoria procedure using a routine id</td></tr>


<tr><td valign=top><a href="lib_c_d.htm#call_func"><b>call_func</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>call a Euphoria function using a routine id</td></tr>


</table>

<p>
<hr>

<a name=map></a>
<font color="#FF0099" size=+1>
<br>

2.16 Map

</font>
<p>

An object that maintains mapping from keys to values. No duplicate keys are allowed,
so each key can only map to one value.

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_h_o.htm#map_new"><b>map_new</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>create a new map</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#map_get"><b>map_get</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>get the value of the specified key from the map</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#map_put"><b>map_put</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>put a new entry into the map</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#map_remove"><b>map_remove</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>remove an entry from the map</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#map_size"><b>map_size</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>get the number of entries in the map</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#map_keys"><b>map_keys</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return all keys as a sequence</td></tr>


<tr><td valign=top><a href="lib_h_o.htm#map_values"><b>map_values</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return all values as a sequence</td></tr>



</table>


<p>
<hr>

<a name=tasking></a>
<font color="#FF0099" size=+1>
<br>

2.17 Multitasking
</font>
<p>
This collection of routines lets you create multiple, independent
tasks. Each task has its own current statement being executed,
its own subroutine call stack, and its own set of private variables.
The local and global variables of a program are shared amongst all tasks.
When a task calls task_yield(), it is suspended, and the Euphoria scheduler 
decides which task to execute next. 
<p>
The Language War demo program, lw.ex, makes heavy use of tasks to 
create a simulated battle involving numerous independently 
moving ships, torpedos, phasors etc. See also the taskwire.exw 
Windows demo program, and the news.exu demo for Linux and FreeBSD.

<p>
<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><a href="lib_s_t.htm#task_clock_start"><b>task_clock_start</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>restart the scheduler's clock</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#task_clock_stop"><b>task_clock_stop</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>stop the scheduler's clock</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#task_create"><b>task_create</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>create a new task</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#task_list"><b>task_list</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>get a list of all tasks</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#task_schedule"><b>task_schedule</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>schedule a task for execution</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#task_self"><b>task_self</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>return the task id of the current task</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#task_status"><b>task_status</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>the current status (active, suspended, terminated) of a task</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#task_suspend"><b>task_suspend</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>Suspend a task.</td></tr>


<tr><td valign=top><a href="lib_s_t.htm#task_yield"><b>task_yield</b></a></td>
<td width=10 align=center valign=top>-</td>
<td>Yield control, so the scheduler can pick a new task to run.</td></tr>


</table>

<p>&nbsp;<p><center>
<font color="#006633" face="Arial, Helvetica" size=+1>... continue 
<a href="lib_a_b.htm">3. Alphabetical Listing of All Routines, From A to B</a></font>
</center>
<p>&nbsp;



</td></tr></table>

</body>
</html>
