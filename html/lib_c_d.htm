<!-- GENERATED BY A EUPHORIA PROGRAM. DO NOT EDIT! -->


<html>
<head><title>Euphoria Reference Manual Part II - Section 3</title>
<style type="text/css">
<!--
body        {background-color: "#FFFFFF";}
a           {text-decoration: none;}
a:link      {color: "#0033BB"; text-decoration: underline;}
a:visited   {color: "#006699"; text-decoration: underline;}
a:active    {color: red; text-decoration: underline;}
a:hover     {color: red; text-decoration: underline;}
a.blue    {text-decoration: none;}
a.blue:link      {color: "#5500FF"; text-decoration: underline;}
a.blue:visited   {color: "#5500FF"; text-decoration: underline;}
a.blue:active    {color: red; text-decoration: underline;}
a.blue:hover     {color: red; text-decoration: underline;}
a.brown      {text-decoration: none;}
a.brown:link      {color: "#993333"; text-decoration: underline;}
a.brown:visited   {color: "#993333"; text-decoration: underline;}
a.brown:active    {color: red; text-decoration: underline;}
a.brown:hover     {color: red; text-decoration: underline;}
-->
</style>

</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">
<br>


<a name=call></a><font color="#006633" size=+2><br>
<center><b>call</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> call(a)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Call a machine language routine that starts at address a. This
 routine must execute a RET instruction #C3 to return control
 to Euphoria. The routine should save and restore any registers
 that it uses.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>You can allocate a block of memory for the routine and then poke
 in the bytes of machine code. You might allocate other blocks of
 memory for data and parameters that the machine code can operate
 on. The addresses of these blocks could be poked into the
 machine code.
</td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\callmach.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_e_g.htm#free">free</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#poke">poke</a>,
<a href="lib_p_r.htm#poke4">poke4</a>,
<a href="lib_c_d.htm#c_proc">c_proc</a>,
<a href="lib_c_d.htm#define_c_proc">define_c_proc</a>

</td></tr>

</table>


<a name=call_back></a><font color="#006633" size=+2><br>
<center><b>call_back</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>WIN32, Linux, FreeBSD</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include dll.e<br>
 a = call_back(i)<br>
 or<br>
 a = call_back({i1, i})<br>
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Get a machine address for the Euphoria routine with
 <font color="#993333"><b>routine id</b></font> i.
 This address can be
 used by Windows, or an external C routine in a Windows <b>.</b>dll
 or Linux/FreeBSD shared library (.so), as a
 32-bit "call-back" address for calling your Euphoria routine. On Windows,
 you can specify i1, which determines the C calling convention that can
 be used to call your routine. If i1 is '+', then your routine will
  work with the <b>cdecl</b> calling convention. By default it will work with the
  <b>stdcall</b> convention. On Linux and FreeBSD you should only use 
  the first form, as there is just one standard calling convention
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>You can set up as many call-back functions as you like, but they
 must all be Euphoria functions (or types) with 0 to 9 arguments.
 If your routine has nothing to return (it should really be a procedure), 
 just return 0 (say), and the calling C routine can ignore the result.
<P>
When your routine is called, the argument values will all be
 32-bit unsigned (positive) values. You should declare each
 parameter of your routine as <font color="#993333"><b>atom</b></font>,
 unless you want to impose
 tighter checking. Your routine must return a 32-bit integer
 value.
 <p> You can also use a call-back address to specify a Euphoria routine 
 as an exception handler in the Linux/FreeBSD signal() function. For example,
 you might want to catch the SIGTERM signal, and do a graceful shutdown.
 Some Web hosts send a SIGTERM to a CGI process that has used too much
 CPU time.
 <p> A call-back routine that uses the cdecl convention and returns 
 a floating-point result, might not work with exw. This is because
 the Watcom C compiler (used to build exw) has a non-standard way 
 of handling cdecl floating-point return values.
</td></tr>


<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\win32\window.exw,
  demo\linux\qsort.exu</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#routine_id">routine_id</a>,
 <a class="blue" href="platform.htm#callback"><b>platform.doc</b>
 </a>
</td></tr>

</table>


<a name=c_func></a><font color="#006633" size=+2><br>
<center><b>c_func</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>WIN32, Linux, FreeBSD</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x = c_func(i, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Call the C function, or machine code function, or translated/compiled 
Euphoria function with <font color="#993333"><b>routine id</b></font> i.
 i must be a valid routine
 id returned by define_c_func(). s is a sequence of argument
 values of length n, where n is the number of arguments required
 by the function. x will be the result returned by the function.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>If the function does not take any arguments then s should
 be {}.
 <p>
 If you pass an argument value which contains a fractional part, 
 where the C function expects a C integer type, the argument will
  be rounded towards 0. e.g. 5.9 will be passed as 5, -5.9 will be passed
   as -5.
   <p>
   The function could be part of a .dll or .so created by the Euphoria To 
   C Translator. In this case, a Euphoria atom or sequence could be
   returned. C and machine code functions can only return integers,
   or more generally, atoms (IEEE floating-point numbers).
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">atom </font><font color="#330033">user32, hwnd, ps, hdc</font>
<font color="#FF00FF">integer </font><font color="#330033">BeginPaint</font>
<font color="#330033"></font>
<font color="#FF0055">-- open user32.dll - it contains the BeginPaint C function</font>
<font color="#330033">user32 = open_dll(</font><font color="#00A033">"user32.dll"</font><font color="#330033">)</font>
<font color="#330033"></font>
<font color="#FF0055">-- the C function BeginPaint takes a C int argument and</font>
<font color="#FF0055">-- a C pointer, and returns a C int as a result:</font>
<font color="#330033">BeginPaint = define_c_func(user32, </font><font color="#00A033">"BeginPaint"</font><font color="#330033">,</font>
<font color="#330033">                           {C_INT, C_POINTER}, C_INT)</font>
<font color="#330033"></font>
<font color="#FF0055">-- call BeginPaint, passing hwnd and ps as the arguments,</font>
<font color="#FF0055">-- hdc is assigned the result:</font>
<font color="#330033">hdc = </font><font color="#FF00FF">c_func</font><font color="#330033">(BeginPaint, </font><font color="#993333">{</font><font color="#330033">hwnd, ps</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#c_proc">c_proc</a>,
<a href="lib_c_d.htm#define_c_func">define_c_func</a>,
<a href="lib_h_o.htm#open_dll">open_dll</a>,
<a class="blue" href="platform.htm#call_cfunc"><b>platform.doc</b>
</a>
</td></tr>

</table>


<a name=c_proc></a><font color="#006633" size=+2><br>
<center><b>c_proc</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>WIN32, Linux, FreeBSD</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> c_proc(i, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Call the C function, or machine code routine, with 
 <font color="#993333"><b>routine id</b></font> i.
 i must be a valid routine
 id returned by define_c_proc(). s is a sequence of argument
 values of length n, where n is the number of arguments required
 by the function.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>If the C function does not take any arguments then s should
 be {}.
 <p>
 If you pass an argument value which contains a fractional part, 
 where the C function expects a C integer type, the argument will
 be rounded towards 0. e.g. 5.9 will be passed as 5, -5.9 will be passed
   as -5.
   <p>
   The C function could be part of a .dll created by the Euphoria To 
   C Translator.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">atom </font><font color="#330033">user32, hwnd, rect</font>
<font color="#FF00FF">integer </font><font color="#330033">GetClientRect</font>
<font color="#330033"></font>
<font color="#FF0055">-- open user32.dll - it contains the GetClientRect C function</font>
<font color="#330033">user32 = open_dll(</font><font color="#00A033">"user32.dll"</font><font color="#330033">)</font>
<font color="#330033"></font>
<font color="#FF0055">-- GetClientRect is a VOID C function that takes a C int</font>
<font color="#FF0055">-- and a C pointer as its arguments:</font>
<font color="#330033">GetClientRect = define_c_proc(user32, </font><font color="#00A033">"GetClientRect"</font><font color="#330033">,</font>
<font color="#330033">                              {C_INT, C_POINTER})</font>
<font color="#330033"></font>
<font color="#FF0055">-- pass hwnd and rect as the arguments</font>
<font color="#FF00FF">c_proc</font><font color="#330033">(GetClientRect, </font><font color="#993333">{</font><font color="#330033">hwnd, rect</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#c_func">c_func</a>,
  <a href="lib_c_d.htm#call">call</a>,
<a href="lib_c_d.htm#define_c_proc">define_c_proc</a>,
<a href="lib_h_o.htm#open_dll">open_dll</a>,
<a class="blue" href="platform.htm#call_cfunc"><b>platform.doc</b>
</a>
</td></tr>

</table>


<a name=call_func></a><font color="#006633" size=+2><br>
<center><b>call_func</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x = call_func(i, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Call the user-defined Euphoria function with
 <font color="#993333"><b>routine id</b></font> i.
 i must be a valid routine id returned by routine_id(). s must
 be a sequence of argument values of length n, where n is the
 number of arguments required by function i. x will be the
 result returned by function i. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> If function i does not take any arguments then s should be {}.
 
</td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\csort.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#call_proc">call_proc</a>,
<a href="lib_p_r.htm#routine_id">routine_id</a>
</td></tr>

</table>


<a name=call_proc></a><font color="#006633" size=+2><br>
<center><b>call_proc</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> call_proc(i, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Call the user-defined Euphoria procedure with
 <font color="#993333"><b>routine id</b></font> i.
 i must be a valid routine id returned by routine_id(). s must be
 a sequence of argument values of length n, where n is the number
 of arguments required by procedure i. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> If procedure i does not take any arguments then s should be {}.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">global </font><font color="#FF00FF">integer </font><font color="#330033">foo_id</font>
<font color="#330033"></font>
<font color="#0000FF">procedure </font><font color="#330033">x()</font>
<font color="#FF00FF">    call_proc</font><font color="#330033">(foo_id, </font><font color="#993333">{</font><font color="#330033">1, </font><font color="#00A033">"Hello World\n"</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#0000FF">end procedure</font>
<font color="#330033"></font>
<font color="#0000FF">procedure </font><font color="#330033">foo(</font><font color="#FF00FF">integer </font><font color="#330033">a, </font><font color="#FF00FF">sequence </font><font color="#330033">s)</font>
<font color="#FF00FF">    puts</font><font color="#330033">(a, s)</font>
<font color="#0000FF">end procedure</font>
<font color="#330033"></font>
<font color="#330033">foo_id = </font><font color="#FF00FF">routine_id</font><font color="#330033">(</font><font color="#00A033">"foo"</font><font color="#330033">)</font>
<font color="#330033"></font>
<font color="#330033">x()</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#call_func">call_func</a>,
<a href="lib_p_r.htm#routine_id">routine_id</a>
</td></tr>

</table>


<a name=ceil></a><font color="#006633" size=+2><br>
<center><b>ceil</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetical"> include math.e<BR>
 i = ceil()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Computes next higher argument's integers. Returns the integers that are
greater or equal to each element in the argument.
</td></tr>

 <tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to an atom or to all elements of a sequence
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">sequence </font><font color="#330033">nums</font>
<font color="#330033">nums = {8, -5, 3.14, 4.89, -7.62, -4.3}</font>
<font color="#330033">nums = ceil(nums) </font><font color="#FF0055">-- {8, -5, 4, 5, -7, -4}</font>
</pre></td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#floor">floor</a>,
<a href="lib_p_r.htm#round">round</a>,
<a href="lib_p_r.htm#round_prec">round_prec</a>
</td></tr>


</table>

<a name=chdir></a><font color="#006633" size=+2><br>
<center><b>chdir</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include file.e<BR>
 i = chdir(s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Set the current directory to the path given by sequence s. s must name
 an existing directory on the system. If successful, chdir() returns 1. 
 If unsuccessful, chdir() returns 0.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>By setting the current directory, you can refer to files in that
 directory using just the file name.
<P>
The function current_dir() will return the name of the current directory.
<P>
On DOS32 and WIN32 the current directory is a global property shared
by all the processes running under one shell. On Linux/FreeBSD, a subprocess
can change the current directory for itself, but this won't
affect the current directory of its parent process.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">if </font><font color="#330033">chdir(</font><font color="#00A033">"c:\\euphoria"</font><font color="#330033">) </font><font color="#0000FF">then</font>
<font color="#330033">    f = </font><font color="#FF00FF">open</font><font color="#330033">(</font><font color="#00A033">"readme.doc"</font><font color="#330033">, </font><font color="#00A033">"r"</font><font color="#330033">)</font>
<font color="#0000FF">else</font>
<font color="#FF00FF">    puts</font><font color="#330033">(1, </font><font color="#00A033">"Error: No euphoria directory?\n"</font><font color="#330033">)</font>
<font color="#0000FF">end if</font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#current_dir">current_dir</a>
</td></tr>

</table>


<a name=check_break></a><font color="#006633" size=+2><br>
<center><b>check_break</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include file.e<BR>
 i = check_break()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the number of times that control-c or control-Break have
 been pressed since the last call to check_break(), or since the
 beginning of the program if this is the first call.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This is useful after you have called allow_break(0) which
 prevents control-c or control-Break from terminating your
 program. You can use check_break() to find out if the user
 has pressed one of these keys. You might then perform some action
 such as a graceful shutdown of your program.
<P>
Neither control-c nor control-Break will be returned as input
 characters when you read the keyboard. You can only detect
 them by calling check_break().
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">k = </font><font color="#FF00FF">get_key</font><font color="#330033">()</font>
<font color="#0000FF">if </font><font color="#330033">check_break() </font><font color="#0000FF">then</font>
<font color="#330033">    temp = graphics_mode(-1)</font>
<font color="#FF00FF">    puts</font><font color="#330033">(1, </font><font color="#00A033">"Shutting down..."</font><font color="#330033">)</font>
<font color="#330033">    save_all_user_data()</font>
<font color="#FF00FF">    abort</font><font color="#330033">(1)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#allow_break">allow_break</a>,
<a href="lib_e_g.htm#get_key">get_key</a>
</td></tr>

</table>


<a name=clear_screen></a><font color="#006633" size=+2><br>
<center><b>clear_screen</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> clear_screen()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Clear the screen using the current background color (may be set
 by bk_color()).
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This works in all <font color="#CC3366">text and pixel-graphics
 modes</font>.
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#bk_color">bk_color</a>,
<a href="lib_e_g.htm#graphics_mode">graphics_mode</a>
</td></tr>

</table>


<a name=close></a><font color="#006633" size=+2><br>
<center><b>close</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> close(fn)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Close a file or device and flush out any still-buffered
 characters. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> Any still-open files will be closed automatically when your
 program terminates.
 
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#open">open</a>,
               <a href="lib_e_g.htm#flush">flush</a>
</td></tr>

</table>


<a name=command_line></a><font color="#006633" size=+2><br>
<center><b>command_line</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> s = command_line()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a sequence of strings, where each string is a word from
 the <a href="refman_1.htm#3">command-line</a> that started
 your program. The first word will be the path to either the Euphoria
 executable, <b><font color="#993333">ex.exe</font>,
 <font color="#993333">exw.exe</font> </b>or<b>
  <font color="#993333">exu</font></b>,
  or to
 your <font color="#993333"><b>bound executable</b></font> file. 
 The next word
 is either the name of your Euphoria main file, or (again) the path
 to your bound executable file. After
 that will come any extra words typed by the user. You can use
 these words in your program.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The Euphoria interpreter itself does not use any
 command-line options. You are free to use any options for your own program.
<p>
The user can put quotes around a series of words to
make them into a single argument.
<P>
If you convert your program into an executable file, either by 
 <font color="#993333"><b>binding</b></font> it, or
 <font color="#993333"><b>translating</b></font> it to C,
 you will find that all command-line arguments remain the same, 
 except for the first two, even though your user no longer types "ex" on the
 command-line (see examples below).
  
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF0055">-- The user types:  ex myprog myfile.dat 12345 "the end"</font>
<font color="#330033"></font>
<font color="#330033">cmd = </font><font color="#FF00FF">command_line</font><font color="#330033">()</font>
<font color="#330033"></font>
<font color="#FF0055">-- cmd will be:</font>
<font color="#330033">      {</font><font color="#00A033">"C:\EUPHORIA\BIN\EX.EXE"</font><font color="#330033">,</font>
<font color="#00A033">       "myprog"</font><font color="#330033">,</font>
<font color="#00A033">       "myfile.dat"</font><font color="#330033">,</font>
<font color="#00A033">       "12345"</font><font color="#330033">,</font>
<font color="#00A033">       "the end"</font><font color="#330033">}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF0055">-- Your program is bound with the name "myprog.exe"</font>
<font color="#FF0055">-- and is stored in the directory c:\myfiles</font>
<font color="#FF0055">-- The user types:  myprog myfile.dat 12345 "the end"</font>
<font color="#330033"></font>
<font color="#330033">cmd = </font><font color="#FF00FF">command_line</font><font color="#330033">()</font>
<font color="#330033"></font>
<font color="#FF0055">-- cmd will be:</font>
<font color="#330033">       {</font><font color="#00A033">"C:\MYFILES\MYPROG.EXE"</font><font color="#330033">,</font>
<font color="#00A033">        "C:\MYFILES\MYPROG.EXE"</font><font color="#330033">, </font><font color="#FF0055">-- place holder</font>
<font color="#00A033">        "myfile.dat"</font><font color="#330033">,</font>
<font color="#00A033">        "12345"</font><font color="#330033">,</font>
<font color="#00A033">        "the end"</font>
<font color="#330033">        }</font>
<font color="#330033"></font>
<font color="#FF0055">-- Note that all arguments remain the same as example 1</font>
<font color="#FF0055">-- except for the first two. The second argument is always</font>
<font color="#FF0055">-- the same as the first and is inserted to keep the numbering</font>
<font color="#FF0055">-- of the subsequent arguments the same, whether your program</font>
<font color="#FF0055">-- is bound or translated as a .exe, or not.</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#getenv">getenv</a>
</td></tr>

</table>


<a name=compare></a><font color="#006633" size=+2><br>
<center><b>compare</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = compare(x1, x2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Return 0 if objects x1 and x2 are identical, 1 if x1 is greater
 than x2, -1 if x1 is less than x2. Atoms are considered to be
 less than sequences. Sequences are compared "alphabetically"
 starting with the first element until a difference is found. 
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">x = </font><font color="#FF00FF">compare</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">1,2,</font><font color="#0000FF">{</font><font color="#330033">3,</font><font color="#5500FF">{</font><font color="#330033">4</font><font color="#5500FF">}</font><font color="#0000FF">}</font><font color="#330033">,5</font><font color="#993333">}</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">2-1,1+1,</font><font color="#0000FF">{</font><font color="#330033">3,</font><font color="#5500FF">{</font><font color="#330033">4</font><font color="#5500FF">}</font><font color="#0000FF">}</font><font color="#330033">,6-1</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- identical, x is 0</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">if </font><font color="#FF00FF">compare</font><font color="#330033">(</font><font color="#00A033">"ABC"</font><font color="#330033">, </font><font color="#00A033">"ABCD"</font><font color="#330033">) < 0 </font><font color="#0000FF">then   </font><font color="#FF0055">-- -1</font>
<font color="#FF0055">    -- will be true: ABC is "less" because it is shorter</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 3:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">x = </font><font color="#FF00FF">compare</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">12345, 99999, -1, 700, 2</font><font color="#993333">}</font><font color="#330033">,</font>
<font color="#330033">            {12345, 99999, -1, 699, 3, 0})</font>
<font color="#FF0055">-- x will be 1 because 700 > 699</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 4:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">x = </font><font color="#FF00FF">compare</font><font color="#330033">(</font><font color="#00A033">'a'</font><font color="#330033">, </font><font color="#00A033">"a"</font><font color="#330033">)</font>
<font color="#FF0055">-- x will be -1 because 'a' is an atom</font>
<font color="#FF0055">-- while "a" is a sequence</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#equal">equal</a>, 
               <a href="refman_2.htm#23">relational operators</a>,
               <a href="refman_2.htm#26">operations on sequences</a>
</td></tr>

</table>


<a name=cos></a><font color="#006633" size=+2><br>
<center><b>cos</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x2 = cos(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Return the cosine of x1, where x1 is in radians. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> This function may be applied to an atom or to all elements
 of a sequence.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">x = </font><font color="#FF00FF">cos</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">.5, .6, .7</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
<font color="#FF0055">-- x is {0.8775826, 0.8253356, 0.7648422}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#sin">sin</a>,
<a href="lib_s_t.htm#tan">tan</a>,
<a href="lib_h_o.htm#log">log</a>,
<a href="lib_s_t.htm#sqrt">sqrt</a>
</td></tr>

</table>


<a name=crash_file></a><font color="#006633" size=+2><br>
<center><b>crash_file</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 crash_file(s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Specify a file name, s, for holding error diagnostics if
 Euphoria must stop your program due to a compile-time or
 run-time error. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Normally Euphoria prints a diagnostic message such as
 "syntax error" or "divide by zero" on the screen, as well as
 dumping debugging information into
 <font color="#993333"><b>ex.err</b></font> in the current directory. 
 By calling crash_file()
 you can control the directory and file name where the debugging information
 will be written.
<P>
s may be empty, i.e. "". In this case no diagnostics or debugging 
information will be written to either a file or the screen. 
s might also be "NUL" or "/dev/null", in which case diagnostics will 
be written to the screen, but the ex.err information will be discarded.
 
<P>
You can call crash_file() as many times as you like from
 different parts of your program. The file specified by the
 last call will be the one used.
</td></tr>


<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">crash_file(</font><font color="#00A033">"\\tmp\\mybug"</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#abort">abort</a>,
               <a href="lib_c_d.htm#crash_message">crash_message</a>,
               <a href="lib_c_d.htm#crash_routine">crash_routine</a>,
               <a href="refman_3.htm">debugging and profiling</a>
</td></tr>

</table>

<a name=crash_message></a><font color="#006633" size=+2><br>
<center><b>crash_message</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 crash_message(s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Specify a string, s, to be printed on the screen in the event
 that Euphoria must stop your program due to a run-time error. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> Normally Euphoria prints a diagnostic message such as
 "subscript out of bounds", or "divide by zero" on the screen, 
 as well as dumping debugging information into
 <font color="#993333"><b>ex.err</b></font>. Euphoria's error
 messages will not be meaningful for your users unless they
 happen to be Euphoria programmers. By calling crash_message()
 you can control the message that will appear on the screen.
 Debugging information will still be stored in
 <font color="#993333"><b>ex.err</b></font>. You won't
 lose any information by doing this.
<P>
s may contain '\n', new-line characters, so your message can
 span several lines on the screen. Euphoria will switch to the
 top of a clear <font color="#CC3366">text-mode</font> screen
 before printing your message.
<P>
You can call crash_message() as many times as you like from
 different parts of your program. The message specified by the
 last call will be the one displayed.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">crash_message(</font><font color="#00A033">"An unexpected error has occurred!\n" </font><font color="#330033">&</font>
<font color="#00A033">              "Please contact john_doe@whoops.com\n" </font><font color="#330033">&</font>
<font color="#00A033">              "Do not delete the file \"ex.err\".\n"</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#abort">abort</a>,
               <a href="lib_c_d.htm#crash_file">crash_file</a>,
               <a href="lib_c_d.htm#crash_routine">crash_routine</a>,
               <a href="refman_3.htm">debugging and profiling</a>
</td></tr>

</table>


<a name=crash_routine></a><font color="#006633" size=+2><br>
<center><b>crash_routine</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 crash_routine(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Pass the routine id of a function that you want Euphoria to call
   in the event that a run-time error is detected and your program must
   be shut down. Your function should
   take one argument of type object. The object that is passed to your function
   is currently always 0. In future releases of Euphoria, a more meaningful
   value may be passed. You can call crash_routine many times with 
   many different routine id's. When a crash occurs, Euphoria will 
   call your crash routines, the most recently specified first, 
   working back to the first one specified. Normally each routine 
   should return 0. If any routine returns a non-zero value, 
   the chain of calls will terminate immediately.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> By specifying a crash routine, you give your program a chance to
  handle fatal run-time errors, such as subscript out of bounds,
  in a more graceful way. You might save some critical data to disk.
  You might inform the user about what has happened, and what he can
  do about it. You might also save some key debugging information.
  In fact, when your crash routine is called, ex.err will have already
  been written. Your crash routine could save ex.err somewhere, 
  or even open it and extract information from it, such as the
  error message.
  
  <p>
  crash_routine can be used with the Interpreter or the Translator.
  Translated code does not check for as many run-time errors, and
  does not provide a full ex.err dump, but machine-level exceptions
  are caught, and a crash routine will give you an excellent opportunity
  to save some variable values to disk for debugging.
  
  <p>
  The developer of a library might want to specify a crash routine
  for his library. It could tidy things up by unlocking and closing files,
  releasing resources etc. The developer of the main program could have
  his own crash routine. Both routines would be called by Euphoria,
  unless the first one called (the last one specified) returned non-zero.
  
  <p>
  A crash routine can't resume execution at the point of the crash,
  but there is no limitation on what else it can do. It doesn't have to return.
  It could even reinitialize global variables and effectively restart the 
  program.
  
  <p>
  If another error occurs while a crash routine is running, a new
  error dump will occur, but the file name this time will be ex_crash.err,
  rather than ex.err. At this point no more calls to crash routines will
  be allowed. You will have to look at both ex.err and ex_crash.err to fully 
  understand what took place.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">function </font><font color="#330033">crash(</font><font color="#FF00FF">object </font><font color="#330033">x)</font>
<font color="#FF0055">-- in case of fire ...</font>
<font color="#330033">    </font>
<font color="#FF0055">    -- (on Linux) send an e-mail containing ex.err</font>
<font color="#FF00FF">    system</font><font color="#330033">(</font><font color="#00A033">"mail -s \"crash!\" myname@xxx.com < ex.err > /dev/null"</font><font color="#330033">, 2)</font>
<font color="#330033">    </font>
<font color="#0000FF">    return </font><font color="#330033">0</font>
<font color="#0000FF">end function</font>
<font color="#330033"></font>
<font color="#330033">crash_routine(</font><font color="#FF00FF">routine_id</font><font color="#993333">(</font><font color="#00A033">"crash"</font><font color="#993333">)</font><font color="#330033">)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#abort">abort</a>,
               <a href="lib_c_d.htm#crash_file">crash_file</a>,
               <a href="lib_c_d.htm#crash_message">crash_message</a>,
               <a href="refman_3.htm">debugging and profiling</a>
</td></tr>

</table>


<a name=current_dir></a><font color="#006633" size=+2><br>
<center><b>current_dir</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include file.e<BR>
 s = current_dir()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Return the name of the current working directory. 
</td></tr>


<tr><td valign=top><b>Comments:</b></td>
<td>There will be no slash or backslash on the end of the
current directory, except under DOS/Windows, at the top-level of
 a drive, e.g. C:\ 
</td></tr>


<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>


<tr><td></td><td>
<pre><font color="#FF00FF">sequence </font><font color="#330033">s</font>
<font color="#330033">s = current_dir()</font>
<font color="#FF0055">-- s would have "C:\EUPHORIA\DOC" if you were in that directory</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#dir">dir</a>,
<a href="lib_c_d.htm#chdir">chdir</a>,
<a href="lib_e_g.htm#getenv">getenv</a>
</td></tr>

</table>


<a name=cursor></a><font color="#006633" size=+2><br>
<center><b>cursor</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>WIN32, DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 cursor(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Select a style of cursor. <font color="#5500FF"><b>graphics.e</b></font>
 contains:
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">    global constant </font><font color="#330033">NO_CURSOR = #2000,</font>
<font color="#330033">             UNDERLINE_CURSOR = #0607,</font>
<font color="#330033">       THICK_UNDERLINE_CURSOR = #0507,</font>
<font color="#330033">            HALF_BLOCK_CURSOR = #0407,</font>
<font color="#330033">                 BLOCK_CURSOR = #0007</font>
</pre></td></tr>
 
 <tr><td valign=top><b></b></td>
<td>The second and fourth hex digits (from the left) determine the
 top and bottom rows of pixels in the cursor. The first digit
 controls whether the cursor will be visible or not. For example,
 #0407 turns on the 4th through 7th rows.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>In <font color="#CC3366">pixel-graphics modes</font> no cursor is
 displayed.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">cursor(BLOCK_CURSOR)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#graphics_mode">graphics_mode</a>,
<a href="lib_s_t.htm#text_rows">text_rows</a>
</td></tr>

</table>


<a name=custom_sort></a><font color="#006633" size=+2><br>
<center><b>custom_sort</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include sort.e<BR>
 s2 = custom_sort(i, s1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Sort the elements of sequence s1, using a compare function with
 <font color="#993333"><b>routine id</b></font> i. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> Your compare function must be a function of two arguments
 similar to Euphoria's compare(). It will compare two objects
 and return -1, 0 or +1.
 
</td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\csort.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#sort">sort</a>,
<a href="lib_c_d.htm#compare">compare</a>,
<a href="lib_p_r.htm#routine_id">routine_id</a>
</td></tr>

</table>


<a name=date></a><font color="#006633" size=+2><br>
<center><b>date</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> s = date()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a sequence with the following information:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">             { year,  </font><font color="#FF0055">-- since 1900</font>
<font color="#330033">              month,  </font><font color="#FF0055">-- January = 1</font>
<font color="#330033">                day,  </font><font color="#FF0055">-- day of month, starting at 1</font>
<font color="#330033">               hour,  </font><font color="#FF0055">-- 0 to 23</font>
<font color="#330033">             minute,  </font><font color="#FF0055">-- 0 to 59</font>
<font color="#330033">             second,  </font><font color="#FF0055">-- 0 to 59</font>
<font color="#330033">    day of the week,  </font><font color="#FF0055">-- Sunday = 1</font>
<font color="#330033">    day of the year}  </font><font color="#FF0055">-- January 1st = 1</font>
</pre></td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">now = </font><font color="#FF00FF">date</font><font color="#330033">()</font>
<font color="#FF0055">-- now has: {95,3,24,23,47,38,6,83}</font>
<font color="#FF0055">-- i.e. Friday March 24, 1995 at 11:47:38pm, day 83 of the year</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The value returned for the year is actually the number of years since 1900
 (<font color="#CC0099"><b><i>not</i></b></font> the last 2 digits of the
 year). In the year 2000 this value will be 100. In 2001 it will be 101, etc.
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#time">time</a>
</td></tr>

</table>

<a name=param_types></a>

<a name=define_c_func></a><font color="#006633" size=+2><br>
<center><b>define_c_func</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include dll.e<BR>
 i1 = define_c_func(x1, x2, s1, i2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Define the characteristics of either a C function, or a machine-code 
 routine that returns a value. A small integer, i1, 
 known as a <font color="#993333"><b>routine id</b></font>, will be
 returned. Use this routine id as the first argument to c_func() when
 you wish to call the function from Euphoria.
 
 <p>
 When defining a C function, x1 is the address of the library containing
 the C function, while x2 is the name of the C function. 
 x1 is a value returned by open_dll(). If the C function can't be found,
 -1 will be returned as the routine id. On Windows,
 you can add a '+' character as a prefix to the function name. 
 This indicates to Euphoria that
 the function uses the <b>cdecl</b> calling convention. By default, Euphoria
 assumes that C routines accept the <b>stdcall</b> convention. 
 
 <p>
 When defining a machine code routine, x1 must be the empty sequence,
 "" or {}, and x2 indicates the address of the machine code routine.
 You can poke the bytes of machine code into a block of 
 memory reserved using allocate(). On Windows, the machine code routine 
 is normally expected to follow the <b>stdcall</b> calling convention, 
 but if you wish to use the <b>cdecl</b> convention instead, 
 you can code <b>{'+', address}</b> instead of <b>address</b> for x2. 
 
 <p>
 s1 is a list of the parameter types for the function. i2 is the return
 type of the function. A list of C types is contained in
 <font color="#5500FF"><b>dll.e</b></font>, and these can be used to define
 machine code parameters as well:
</td></tr>


<tr><td></td><td>
<pre><font color="#0000FF">    global constant </font><font color="#330033">C_CHAR = #01000001,</font>
<font color="#330033">                   C_UCHAR = #02000001,</font>
<font color="#330033">                   C_SHORT = #01000002,</font>
<font color="#330033">                  C_USHORT = #02000002,</font>
<font color="#330033">                     C_INT = #01000004,</font>
<font color="#330033">                    C_UINT = #02000004,</font>
<font color="#330033">                    C_LONG = C_INT,</font>
<font color="#330033">                   C_ULONG = C_UINT,</font>
<font color="#330033">                 C_POINTER = C_ULONG,</font>
<font color="#330033">                   C_FLOAT = #03000004,</font>
<font color="#330033">                  C_DOUBLE = #03000008</font>
</pre></td></tr>

 
 <tr><td valign=top><b></b></td>
<td>The C function that you define could be one created by the
Euphoria To C Translator, in which case you can pass Euphoria data
to it, and receive Euphoria data back.
A list of Euphoria types is contained in
 <font color="#5500FF"><b>dll.e</b></font>:
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">    global constant</font>
<font color="#330033">		 E_INTEGER = #06000004,</font>
<font color="#330033">		 E_ATOM    = #07000004,</font>
<font color="#330033">		 E_SEQUENCE= #08000004,</font>
<font color="#330033">		 E_OBJECT  = #09000004</font>
</pre></td></tr>


<tr><td valign=top><b>Comments:</b></td>
<td>You can pass or return any C integer type or pointer type.
 You can also pass a Euphoria atom as a C double or float, and get
 a C double or float returned to you as a Euphoria atom.
<P>
 Parameter types which use 4 bytes 
 or less are all passed the same way, so it is not necessary to be 
 exact when choosing a 4-byte parameter type. However the
 distinction between signed and unsigned may be important when
 you specify the return type of a function.
<P>
Currently, there is no way to pass a C structure by value or
 get a C structure as a return result. You can only pass a pointer
 to a structure and get a pointer to a structure as a result.
<P>
If you are not interested in using the value returned by the
 C function, you should instead define it with define_c_proc()
 and call it with c_proc().
<p>
Some routines in shared libraries - there are cases in the Windows API - expect a 64 bit integer
 to be passed to them as one of its arguments. There is no such data type in Euphoria, even though
 it exists in C. However, there is a workaround:
<ul>
<li>represent your 64 bit parameter as two consecutive C_LONG parameters. As mentioned above, this
will work whether the integer is specified as signed or unsigned.
<li>when calling the routine, the first C_LONG parameter must contain the lower 32 bits of
 the actual 64 bit parameter, and the second parameter must hold the upper 32 bits.
<li>do not store the 64 bit integer you supply as an atom, because it would be encoded in a
way the routine you are calling will not understand. Further, an atom cannot hold more than 53
bits of information, which is too short for 64 bit data.
</ul>
<p>
If an external routine returns a 64 bit integer, changing the return type like shown above
will not work. You must design a machine code wrapper that will call the routine (check its call
convention under Windows) and retrieve the integer returned in edx:eax. Then code an Euphoria function
that will call() your machine code and retrieve the two parts as two atoms, returning them as
appropriate, typically in a {lower 32 bits, upper 32 bits} sequence. How you reassemble the two parts
will depend on the returned value being specified as signed or unsigned.

<p>
If you use exw to call a cdecl C routine that returns
 a floating-point value, it might not work. This is because
 the Watcom C compiler (used to build exw) has a non-standard
 way of handling cdecl floating-point return values.
 
 <p> Passing floating-point values to a machine code routine will be
   faster if you use c_func()  rather than call() to call the routine, 
   since you won't have to use atom_to_float64() and poke() to get the 
   floating-point values into memory.
 
 <p> ex.exe (DOS) uses calls to WATCOM floating-point routines (which then
   use hardware floating-point instructions if available),
   so floating-point values are generally passed and returned in
   integer register-pairs rather than floating-point registers. 
   You'll have to disassemble some Watcom code to see how it works.
</td></tr>


<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">atom </font><font color="#330033">user32</font>
<font color="#FF00FF">integer </font><font color="#330033">LoadIcon</font>
<font color="#330033"></font>
<font color="#FF0055">-- open user32.dll - it contains the LoadIconA C function</font>
<font color="#330033">user32 = open_dll(</font><font color="#00A033">"user32.dll"</font><font color="#330033">)</font>
<font color="#330033"></font>
<font color="#FF0055">-- It takes a C pointer and a C int as parameters.</font>
<font color="#FF0055">-- It returns a C int as a result.</font>
<font color="#330033">LoadIcon = define_c_func(user32, </font><font color="#00A033">"LoadIconA"</font><font color="#330033">,</font>
<font color="#330033">                         {C_POINTER, C_INT}, C_INT)</font>
<font color="#FF0055">-- We use "LoadIconA" here because we know that LoadIconA</font>
<font color="#FF0055">-- needs the stdcall convention, as do</font>
<font color="#FF0055">-- all standard .dll routines in the WIN32 API. </font>
<font color="#FF0055">-- To specify the cdecl convention, we would have used "+LoadIconA".</font>
<font color="#330033"></font>
<font color="#0000FF">if </font><font color="#330033">LoadIcon = -1 </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(1, </font><font color="#00A033">"LoadIconA could not be found!\n"</font><font color="#330033">)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td>euphoria\demo\callmach.ex,
  <a href="lib_c_d.htm#c_func">c_func</a>,
<a href="lib_c_d.htm#define_c_proc">define_c_proc</a>,
<a href="lib_c_d.htm#c_proc">c_proc</a>,
<a href="lib_h_o.htm#open_dll">open_dll</a>,
<a class="blue" href="platform.htm#call_cfunc"><b>platform.doc</b>
</a>
</td></tr>

</table>


<a name=define_c_proc></a><font color="#006633" size=+2><br>
<center><b>define_c_proc</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include dll.e<BR>
 i1 = define_c_proc(x1, x2, s1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Define the characteristics of either a C function, or a machine-code routine
 that you wish to call as a procedure from your Euphoria program. 
 A small integer, known as
 a <font color="#993333"><b>routine id</b></font>,
 will be returned. Use this routine id as the first argument to
 c_proc() when you wish to call the routine from Euphoria.
 
 <p>
 When defining a C function, x1 is the address of the library containing
 the C function, while x2 is the name of the C function. x1 is a value
 returned by open_dll(). If the C function can't be found, -1 will be returned
 as the routine id.
 On Windows, you can add a '+' character as a prefix to the function name. 
 This tells Euphoria that
 the function uses the <b>cdecl</b> calling convention. By default, Euphoria
 assumes that C routines accept the <b>stdcall</b> convention. 
 <p>
 When defining a machine code routine, x1 must be the empty sequence,
 "" or {}, and x2 indicates the address of the machine code routine.
 You can poke the bytes of machine code into a block of 
 memory reserved using allocate(). On Windows, the machine code routine 
 is normally expected to follow the <b>stdcall</b> calling convention, 
 but if you wish to use the <b>cdecl</b> convention instead, 
 you can code <b>{'+', address}</b> instead of <b>address</b>. 
 
 <p>
 s1 is a list of the parameter types for the function. A list of
 C types is contained in <font color="#5500FF"><b>dll.e</b></font>,
 and <a href="lib_c_d.htm#param_types">shown above</a>. These can be
 used to define machine code parameters as well.
</td></tr>


 <tr><td valign=top><b></b></td>
<td>The C function that you define could be one created by the
Euphoria To C Translator, in which case you can pass Euphoria data
to it, and receive Euphoria data back.
A list of Euphoria types is contained in
 <font color="#5500FF"><b>dll.e</b></font>, and 
 <a href="lib_c_d.htm#param_types">shown above.</a>
</td></tr>


<tr><td valign=top><b>Comments:</b></td>
<td>You can pass any C integer type or pointer type.
 You can also pass a Euphoria atom as a C double or float.
<P>
 Parameter types which use 4 bytes or less are 
 all passed the same way, so it is not necessary to be exact.
<P>
Currently, there is no way to pass a C structure by value.
 You can only pass a pointer to a structure.
<P>
The C function can return a value but it will be ignored.
 If you want to use the value returned by the C function,
 you must instead define it with define_c_func() and call it
 with c_func().
<p>
Some routines in shared libraries - there are cases in the Windows API - expect a 64 bit integer
 to be passed to them as one of its arguments. There is no such data type in Euphoria, even though
 it exists in C. However, there is a workaround:
<ul>
<li>represent your 64 bit parameter as two consecutive C_LONG parameters. As mentioned above, this
will work whether the integer is specified as signed or unsigned.
<li>when calling the routine, the first C_LONG parameter must contain the lower 32 bits of
 the actual 64 bit parameter, and the second parameter must hold the upper 32 bits.
<li>do not store the 64 bit integer you supply as an atom, because it would be encoded in a
way the routine you are calling will not understand. Further, an atom cannot hold more than 53
bits of information, which is too short for 64 bit data.
</ul>
<p>
If an external routine returns a 64 bit integer, changing the return type like shown above
will not work. You must design a machine code wrapper that will call the routine (check its call
convention under Windows) and retrieve the integer returned in edx:eax. Then code an Euphoria function
that will call() your machine code and retrieve the two parts as two atoms, returning them as
appropriate, typically in a {lower 32 bits, upper 32 bits} sequence. How you reassemble the two parts
will depend on the returned value being specified as signed or unsigned.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">atom </font><font color="#330033">user32</font>
<font color="#FF00FF">integer </font><font color="#330033">ShowWindow</font>
<font color="#330033"></font>
<font color="#FF0055">-- open user32.dll - it contains the ShowWindow C function</font>
<font color="#330033">user32 = open_dll(</font><font color="#00A033">"user32.dll"</font><font color="#330033">)</font>
<font color="#330033"></font>
<font color="#FF0055">-- It has 2 parameters that are both C int.</font>
<font color="#330033">ShowWindow = define_c_proc(user32, </font><font color="#00A033">"ShowWindow"</font><font color="#330033">, </font><font color="#993333">{</font><font color="#330033">C_INT, C_INT</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- If ShowWindow used the cdecl convention, </font>
<font color="#FF0055">-- we would have coded "+ShowWindow" here</font>
<font color="#330033"></font>
<font color="#0000FF">if </font><font color="#330033">ShowWindow = -1 </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(1, </font><font color="#00A033">"ShowWindow not found!\n"</font><font color="#330033">)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#c_proc">c_proc</a>,
<a href="lib_c_d.htm#define_c_func">define_c_func</a>,
<a href="lib_c_d.htm#c_func">c_func</a>,
<a href="lib_h_o.htm#open_dll">open_dll</a>,
<a class="blue" href="platform.htm#call_cfunc"><b>platform.doc</b>
</a>
</td></tr>

</table>

<a name=define_c_var></a><font color="#006633" size=+2><br>
<center><b>define_c_var</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>WIN32, Linux, FreeBSD</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include dll.e<BR>
 a1 = define_c_var(a2, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>a2 is the address of a Linux or FreeBSD shared
 library, or Windows .dll, as returned by open_dll(). 
 s is the name of a global C variable defined within the library.
 a1 will be the memory address of variable s.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Once you have the address of a C variable, and you know
  its type, you can use peek() and poke() to read or write the value 
  of the variable.
</td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td>euphoria/demo/linux/mylib.exu
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#c_proc">c_proc</a>,
<a href="lib_c_d.htm#define_c_func">define_c_func</a>,
<a href="lib_c_d.htm#c_func">c_func</a>,
<a href="lib_h_o.htm#open_dll">open_dll</a>,
<a class="blue" href="platform.htm#call_cfunc"><b>platform.doc</b>
</a>
</td></tr>

</table>


<a name=dir></a><font color="#006633" size=+2><br>
<center><b>dir</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include file.e<BR>
 x = dir(st)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return directory information for the file or directory named by
 st. If there is no file or directory with this name then -1 is
 returned. st can also contain * and ? wildcards to select multiple
 files.
<P>
<a name=dir_entry></a>
This information is similar to what you would get from the DOS
 DIR command. A sequence is returned where each element is a
 sequence that describes one file or subdirectory.
<P>
If st names a <b>directory</b> you may have entries for "." and "..",
 just as with the DOS DIR command. If st names a <b>file</b> then x will
 have just one entry,
 i.e. <a href="lib_h_o.htm#length">length(x)</a> will
 be 1. If st contains wildcards you may have multiple entries.
<P>
Each entry contains the name, attributes and file size as well as
 the year, month, day, hour, minute and second of the last modification.
 You can refer to the elements of an entry with the following constants
 defined in <font color="#5500FF"><b>file.e</b></font>:
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">    global constant </font><font color="#330033">D_NAME = 1,</font>
<font color="#330033">              D_ATTRIBUTES = 2,</font>
<font color="#330033">                    D_SIZE = 3,</font>
<font color="#330033"></font>
<font color="#330033">                    D_YEAR = 4,</font>
<font color="#330033">                   D_MONTH = 5,</font>
<font color="#330033">                     D_DAY = 6,</font>
<font color="#330033"></font>
<font color="#330033">                    D_HOUR = 7,</font>
<font color="#330033">                  D_MINUTE = 8,</font>
<font color="#330033">                  D_SECOND = 9</font>
</pre></td></tr>


<tr><td valign=top><b></b></td>
<td>The attributes element is a string sequence containing
 characters chosen from:
</td></tr>

<tr><td></td><td>
<pre><font color="#00A033">    'd' </font><font color="#FF0055">-- directory</font>
<font color="#00A033">    'r' </font><font color="#FF0055">-- read only file</font>
<font color="#00A033">    'h' </font><font color="#FF0055">-- hidden file</font>
<font color="#00A033">    's' </font><font color="#FF0055">-- system file</font>
<font color="#00A033">    'v' </font><font color="#FF0055">-- volume-id entry</font>
<font color="#00A033">    'a' </font><font color="#FF0055">-- archive file</font>
</pre></td></tr>


<tr><td valign=top><b></b></td>
<td>A normal file without special attributes would just have an empty
 string, "", in this field.
 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> The top level directory, e.g. c:\ does not have "." or ".."
 entries.
<P>
This function is often used just to test if a file or
 directory exists.
<P>
Under <font color="#CC3366"><b>WIN32</b></font>, st can have a long file
 or directory name anywhere in the path.
<P>
Under <font color="#CC3366"><b>Linux/FreeBSD</b></font>, the only attribute
 currently available is 'd'.
<P>
<font color="#CC3366"><b>DOS32:</b></font> The file name returned
 in D_NAME will be a standard DOS 8.3 name. (See
 <a href="http://www.rapideuphoria.com/cgi-bin/asearch.exu?dos=on&keywords=dir">Archive
 Web page</a> for a better solution).
<P>
<font color="#CC3366"><b>WIN32:</b></font> The file name returned
 in D_NAME will be a long file name.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">d = dir(current_dir</font><font color="#993333">()</font><font color="#330033">)</font>
<font color="#330033"></font>
<font color="#FF0055">-- d might have:</font>
<font color="#330033">  {</font>
<font color="#330033">    {</font><font color="#00A033">"."</font><font color="#330033">,    </font><font color="#00A033">"d"</font><font color="#330033">,     0  1994, 1, 18,  9, 30, 02},</font>
<font color="#330033">    {</font><font color="#00A033">".."</font><font color="#330033">,   </font><font color="#00A033">"d"</font><font color="#330033">,     0  1994, 1, 18,  9, 20, 14},</font>
<font color="#330033">    {</font><font color="#00A033">"fred"</font><font color="#330033">, </font><font color="#00A033">"ra"</font><font color="#330033">, 2350, 1994, 1, 22, 17, 22, 40},</font>
<font color="#330033">    {</font><font color="#00A033">"sub"</font><font color="#330033">,  </font><font color="#00A033">"d" </font><font color="#330033">,    0, 1993, 9, 20,  8, 50, 12}</font>
<font color="#330033">  }</font>
<font color="#330033"></font>
<font color="#330033">d[3][D_NAME] would be </font><font color="#00A033">"fred"</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>bin\search.ex</b></font>
  </font>
</td></tr>


<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_u_z.htm#wildcard_file">wildcard_file</a>,
<a href="lib_c_d.htm#current_dir">current_dir</a>,
<a href="lib_h_o.htm#open">open</a>
</td></tr>

</table>


<a name=display_image></a><font color="#006633" size=+2><br>
<center><b>display_image</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include image.e<BR>
 display_image(s1, s2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Display at point s1 on a <font color="#CC3366">pixel-graphics</font>
 screen the 2-d sequence
 of pixels contained in s2. s1 is a two-element sequence {x, y}.
 s2 is a sequence of sequences, where each sequence is one
 horizontal row of pixel colors to be displayed. The first pixel
 of the first sequence is displayed at s1. It is the top-left
 pixel. All other pixels appear to the right or below of this
 point. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> s2 might be the result of a previous call to save_image(), or
 read_bitmap(), or it could be something you have created.
<P>
The sequences (rows) of the image do not have to all be the
 same length.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">display_image(</font><font color="#993333">{</font><font color="#330033">20,30</font><font color="#993333">}</font><font color="#330033">, </font><font color="#993333">{</font><font color="#0000FF">{</font><font color="#330033">7,5,9,4,8</font><font color="#0000FF">}</font><font color="#330033">,</font>
<font color="#330033">                        {2,4,1,2},</font>
<font color="#330033">                        {1,0,1,0,4,6,1},</font>
<font color="#330033">                        {5,5,5,5,5,5}})</font>
<font color="#FF0055">-- This will display a small image containing 4 rows of</font>
<font color="#FF0055">-- pixels. The first pixel (7) of the top row will be at</font>
<font color="#FF0055">-- {20,30}. The top row contains 5 pixels. The last row</font>
<font color="#FF0055">-- contains 6 pixels ending at {25,33}.</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\dos32\bitmap.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#save_image">save_image</a>,
<a href="lib_p_r.htm#read_bitmap">read_bitmap</a>,
<a href="lib_c_d.htm#display_text_image">display_text_image</a>
</td></tr>

</table>


<a name=display_text_image></a><font color="#006633" size=+2><br>
<center><b>display_text_image</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include image.e<BR>
 display_text_image(s1, s2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Display the 2-d sequence of characters and attributes contained
 in s2 at line s1[1], column s1[2]. s2 is a sequence of sequences,
 where each sequence is a string of characters and attributes to
 be displayed. The top-left character is displayed at s1. Other
 characters appear to the right or below this position. The
 attributes indicate the foreground and background color of the
 preceding character. On DOS32, the attribute should consist of the 
 foreground color plus 16 times the background color.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> s2 would normally be the result of a previous call to
 save_text_image(), although you could construct it yourself.
<P>
This routine only works in <font color="#CC3366">text modes</font>.
<P>
You might use save_text_image()/display_text_image() in a text-mode
 graphical user interface, to allow "pop-up" dialog boxes, and
 drop-down menus to appear and disappear without losing what was
 previously on the screen.
<P>
The sequences of the text image do not have to all be the same
 length.
 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">clear_screen</font><font color="#330033">()</font>
<font color="#330033">display_text_image(</font><font color="#993333">{</font><font color="#330033">1,1</font><font color="#993333">}</font><font color="#330033">, </font><font color="#993333">{</font><font color="#0000FF">{</font><font color="#00A033">'A'</font><font color="#330033">, WHITE, </font><font color="#00A033">'B'</font><font color="#330033">, GREEN</font><font color="#0000FF">}</font><font color="#330033">,</font>
<font color="#330033">                           {</font><font color="#00A033">'C'</font><font color="#330033">, RED+16*WHITE},</font>
<font color="#330033">                           {</font><font color="#00A033">'D'</font><font color="#330033">, BLUE}})</font>
<font color="#FF0055">-- displays:</font>
<font color="#330033">     AB</font>
<font color="#330033">     C</font>
<font color="#330033">     D</font>
<font color="#FF0055">-- at the top left corner of the screen.</font>
<font color="#FF0055">-- 'A' will be white with black (0) background color,</font>
<font color="#FF0055">-- 'B' will be green on black, </font>
<font color="#FF0055">-- 'C' will be red on white, and</font>
<font color="#FF0055">-- 'D' will be blue on black.</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#save_text_image">save_text_image</a>,
<a href="lib_c_d.htm#display_image">display_image</a>,
<a href="lib_p_r.htm#put_screen_char">put_screen_char</a>
</td></tr>

</table>


<a name=dos_interrupt></a><font color="#006633" size=+2><br>
<center><b>dos_interrupt</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 s2 = dos_interrupt(i, s1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Call DOS software interrupt number i. s1 is a 10-element
 sequence of 16-bit register values to be used as input to the
 interrupt routine. s2 is a similar 10-element sequence containing
 output register values after the call returns. 
 <font color="#5500FF"><b>machine.e</b></font> has the following
 declaration which shows the order of
 the register values in the input and output sequences.
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">    global constant </font><font color="#330033">REG_DI = 1,</font>
<font color="#330033">                    REG_SI = 2,</font>
<font color="#330033">                    REG_BP = 3,</font>
<font color="#330033">                    REG_BX = 4,</font>
<font color="#330033">                    REG_DX = 5,</font>
<font color="#330033">                    REG_CX = 6,</font>
<font color="#330033">                    REG_AX = 7,</font>
<font color="#330033">                    REG_FLAGS = 8,</font>
<font color="#330033">                    REG_ES = 9,</font>
<font color="#330033">                    REG_DS = 10</font>
</pre></td></tr>


<tr><td valign=top><b>Comments:</b></td>
<td> The register values returned in s2 are always positive values
 between 0 and #FFFF (65535).
<P>
The flags value in s1[REG_FLAGS] is ignored on input. On output
 the least significant bit of s2[REG_FLAGS] has the carry flag,
 which usually indicates failure if it is set to 1.
<P>
Certain interrupts require that you supply addresses of blocks of
 memory. These addresses must be conventional, low-memory
 addresses. You can allocate/deallocate low-memory using
 allocate_low() and free_low().
<P>
With DOS software interrupts you can perform a wide variety
 of specialized operations, anything from formatting your
 floppy drive to rebooting your computer. For documentation
 on these interrupts consult a technical manual such as
 Peter Norton's <i>"PC Programmer's Bible"</i>, or download Ralf
 Brown's <i>Interrupt List</i> from the Web:
<P>
<a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html">
http://www.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html</a>
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">sequence </font><font color="#330033">registers</font>
<font color="#330033"></font>
<font color="#330033">registers = </font><font color="#FF00FF">repeat</font><font color="#330033">(0, 10)  </font><font color="#FF0055">-- no registers need to be set</font>
<font color="#330033"></font>
<font color="#FF0055">-- call DOS interrupt 5: Print Screen</font>
<font color="#330033">registers = dos_interrupt(#5, registers)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\dos32\dosint.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#allocate_low">allocate_low</a>,
<a href="lib_e_g.htm#free_low">free_low</a>
</td></tr>

</table>


<a name=draw_line></a><font color="#006633" size=+2><br>
<center><b>draw_line</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 draw_line(i, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Draw a line on a <font color="#CC3366">pixel-graphics</font> screen
 connecting two or more points in s, using color i. 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">draw_line(WHITE, </font><font color="#993333">{</font><font color="#0000FF">{</font><font color="#330033">100, 100</font><font color="#0000FF">}</font><font color="#330033">, </font><font color="#0000FF">{</font><font color="#330033">200, 200</font><font color="#0000FF">}</font><font color="#330033">, </font><font color="#0000FF">{</font><font color="#330033">900, 700</font><font color="#0000FF">}</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#330033"></font>
<font color="#FF0055">-- This would connect the three points in the sequence using</font>
<font color="#FF0055">-- a white line, i.e. a line would be drawn from {100, 100} to</font>
<font color="#FF0055">-- {200, 200} and another line would be drawn from {200, 200} to</font>
<font color="#FF0055">-- {900, 700}.</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#polygon">polygon</a>,
<a href="lib_e_g.htm#ellipse">ellipse</a>,
<a href="lib_p_r.htm#pixel">pixel</a>
</td></tr>

</table>

<p>&nbsp;<p><center>
<font color="#006633" face="Arial, Helvetica" size=+1>... continue</font><br>&nbsp;<br>
<font face="Arial, Helvetica" size=-1>
<a href="lib_a_b.htm">from A to B</a> &nbsp; | &nbsp;
from C to D &nbsp; | &nbsp;
<a href="lib_e_g.htm">from E to G</a> &nbsp; | &nbsp;
<a href="lib_h_o.htm">from H to O</a> &nbsp; | &nbsp;
<a href="lib_p_r.htm">from P to R</a> &nbsp; | &nbsp;
<a href="lib_s_t.htm">from S to T</a> &nbsp; | &nbsp;
<a href="lib_u_z.htm">from U to Z</a></font></center><p>&nbsp;


</body>
</html>

