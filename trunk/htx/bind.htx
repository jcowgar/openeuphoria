<_init_comment>
<html>
<head><title>Shrouding and Binding</title>
<_css>
</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">
<_width>
<_center><font face="Arial, Helvetica" color="#FF0099" size=+2>
<br>
                         Binding and Shrouding
</font></_center>
<_center><font face="Arial, Helvetica" color="#003366" size=+1>

</font></_center>
<p>

<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br>

<_dul>The Shroud Command</_dul>

</font>
<p>
<b>Synopsis:</b>

<pre>
     <b>shroud [-full_debug] [-list] [-quiet] [-out shrouded_file] filename.ex[w/u]</b>
</pre>

<p>
 The <i><b>shroud</b></i> command converts a Euphoria program, 
 typically consisting of a main file plus many include files, into a single, 
 compact file. A single file is not only convenient, it allows you to 
 give people your program to use, without giving them your source code.
 
<p>
 A shrouded file does not contain any 
 Euphoria source code statements. Rather, it contains a low-level 
 intermediate language (IL) that is executed by the back-end of the 
 interpreter. A shrouded file does not require any parsing. 
 It starts running immediately, and with large programs you will
 see a quicker start-up time. Shrouded files must be run using the 
 interpreter back-end: backend.exe (DOS), backendw.exe (Windows) or 
 backendu (Linux/FreeBSD). This backend is freely available, and you
 can give it to any of your users who need it. It's stored in 
 euphoria\bin in the Euphoria interpreter package. On DOS you can run your
 .il file with:
 <pre>
      backend myprog.il
 </pre>
 On Windows use:
 <pre>
      backendw myprog.il
 </pre>
 On Linux or FreeBSD use:
 <pre>
      backendu myprog.il
 </pre>
 
 <p>
 Although it does not contain any source statements, a .il file will
 generate a useful ex.err dump in case of a run-time error.
 
 <p>
 The shrouder will remove any routines and variables that your program
 doesn't use. This will give you a smaller .il file. There are often a
 great number of unused routines and unused variables. For example your
 program might include several 3rd party include files, plus some
 standard files from euphoria\include, but only use a few items from
 each file. The unused items will be deleted.

</table>

<p>
<font color="#006633"><b><_sul><i>options</i> can be:</_sul></b></font>
<p>

<table border=0 cellspacing=2 cellpadding=2>

<_4clist
  name="<font color=\"#006699\">-full_debug</font>"
  pos=20
  description="Make a somewhat larger .il file that contains enough
  debug information to provide a full ex.err dump when a crash occurs.
  <p>
  Normally, variable names and line-number information is stripped out 
  of the .il file, so the ex.err will simply have \"no-name\" where 
  each variable name should be, and line numbers will only be accurate
  to the start of a routine or the start of a file. Only the private variable
  values are shown, not the global or local values. In addition to saving
  space, some people might prefer that the shrouded file, and any ex.err 
  file, not expose as much information."
>

<_4clist
  name="<font color=\"#006699\">-list</font>"
  pos=20
  description="Produce a listing in <b>deleted.txt</b> of the routines and
    constants that were deleted."
>

<_4clist
  name="<font color=\"#006699\">-quiet</font>"
  pos=20
  description="Suppress normal messages and statistics. Only report
  errors."
>

<_4clist
  name="<font color=\"#006699\">-out <i>shrouded_file</i></font>"
  pos=20
  description="Write the output to shrouded_file."
>

</table>

<p>
 The Euphoria interpreter will not perform tracing on a 
 shrouded file. You must trace your original source.

<p>
On Linux/FreeBSD, the shrouder will make your shrouded file executable,
and will add a #! line at the top, that will run backendu. You can
override this #! line by specifying your own #! line at the top of your main
Euphoria file.

<p>
 Always keep a copy of your original source. There's no way to recover it
 from a shrouded file.

<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br>

<_dul>The Bind Command</_dul>

</font>

<p>
<b>Synopsis:</b>
<p>
<pre>
     <b>bind  [-full_debug] [-list] [-quiet] [-out executable_file] [filename.ex]
     bindu [-full_debug] [-list] [-quiet] [-out executable_file] [filename.exu]
     bindw [-full_debug] [-list] [-quiet] [-out executable_file] [-con] [-icon filename.ico] [filename.exw]</b>
</pre>

<p>
 <b>bind</b>
 (<b>bindw</b> or <b>bindu</b>) does the same thing as
 <b>shroud</b>, and includes the same options. 
 It then combines your shrouded .il file with the interpreter backend
 (backend.exe, backendw.exe or backendu)
 to make a <font color="#CC0099"><b>single, stand-alone executable</b></font> 
 file that you can conveniently use and distribute. Your users need not 
 have Euphoria installed. Each time your executable file is run, a 
 quick integrity check is performed to detect any tampering or corruption.
 Your program will start up very quickly since no parsing is needed.

<p> 
 The Euphoria interpreter will not perform tracing on a 
 bound file since the source statements are not there.

<p>
<font color="#006633"><b><_sul><i>options</i> can be:</_sul></b></font>
<p>

<table border=0 cellspacing=2 cellpadding=2>

<_4clist
  name="<font color=\"#006699\">-full_debug</font>"
  pos=20
  description="Same as <b>shroud</b> above. 
  If Euphoria detects an error, your executable will generate
  either a partial, or a full, ex.err dump, according to this option."
>

<_4clist
  name="<font color=\"#006699\">-list</font>"
  pos=20
  description="Same as <b>shroud</b> above."
>

<_4clist
  name="<font color=\"#006699\">-quiet</font>"
  pos=20
  description="Same as <b>shroud</b> above."
>

<_4clist
  name="<font color=\"#006699\">-out <i>executable_file</i></font>"
  pos=20
  description="This option lets you choose the name of the executable
  file created by the binder. Without this option, bind will choose
  a name based on the name of the main Euphoria source file."
>

<_4clist
  name="<font color=\"#006699\">-con</font>"
  pos=20
  description="<b>(bindw only)</b>  
  This option will create a Windows console program instead of a Windows
  GUI program. Console programs can access standard input and output,
  and they work within the current console window, rather than popping up
  a new one."
>
<_4clist
  name="<font color=\"#006699\">-icon <i>filename[.ico]</i></font>"
  pos=20
  description="<b>(bindw only)</b> When you bind a program, you can patch in your own 
  customized icon, overwriting the one in <b>exw.exe</b>. 
  <b>exw.exe</b> contains a 32x32 icon using 256 colors. It resembles 
  an <b>E)</b> shape. Windows will display this shape beside exw.exe,
  and beside your bound program, in file listings. You can also 
  load this icon as a resource, using the name \"exw\" 
  (see euphoria\demo\win32\window.exw for an example). 
  When you bind your program, you can substitute your own 32x32 256-color 
  icon file of size 2238 bytes or less. Other dimensions may also work
  as long as the file is 2238 bytes or less. The file must contain
  a single icon image (Windows will create a smaller or larger image
  as necessary). The default <b>E)</b> icon file, euphoria.ico, 
  is included in the euphoria\bin directory."
>
</table>

<p>
 A one-line Euphoria program will result in an executable file as large as
 the back-end you are binding with, but the size increases
 very slowly as you add to your program.
 <font color="#006633"><b>When bound, the entire Euphoria editor, ed.ex, 
 adds only 27K to the size of the back-end.</b></font>  
 <b>backendw.exe</b> and <b>backendu</b> (Linux) are compressed using 
 <b>UPX</b> 
 (see <a href=http://upx.sourceforge.net>http://upx.sourceforge.net</a>). 
 <b>backend.exe</b> is compressed using a tool that comes with the CauseWay DOS
 extender. <b>backend.exe</b> is the largest of the three since it 
 includes a lot of pixel graphics routines, not part of <b>backendw.exe</b> 
 or <b>backendu</b>. Note: In some very rare cases, a compressed executable 
 may trigger a warning message from a virus scanner. This is simply because
 the executable file looks abnormal to the virus scanner. 

<p>
 The first two arguments returned by the
 <font color="#006699"><b>command_line()</b></font> library routine will be
 slightly different when your program is bound. See
 <a class="blue" href="lib_c_d.htm#command_line"><b>library.doc</b></a>
 for the details.

<p>
 A <b><font color="#993333">bound</font> executable</b> file
 <font color="#CC0099"><b><i>can</i></b></font> handle standard input and
 output redirection. e.g.
<pre>
        myprog.exe < file.in > file.out
</pre>
 
 If you were to write a small DOS <b>.bat</b> file <_bq>myprog.bat</_bq> that
 contained the line "<b>ex myprog.ex</b>" you would <i>not</i> be able to
 redirect input and output in the following manner:
<pre>
        myprog.bat < file.in > file.out     <font color="#FF0000">(doesn't work in DOS!)</font>
</pre>
 You <i>could</i> however use redirection on individual lines <i>within</i>
 the <b>.bat</b> file.

<p>
<a name=cl_options></a>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br>


</table>


<p>&nbsp;

</_width>
</body>
</html>

