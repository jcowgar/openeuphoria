<_init_comment>
<html>
<head><title>Euphoria Database System</title>
<_css>
</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">
<_width>
<_center><font face="Arial, Helvetica" color="#FF0099" size=+2>
<br>
	                  Euphoria Database System (EDS)
</font></_center>
<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul> Introduction </_dul> 
</font>

 <p>
 Many people have expressed an interest in accessing databases using 
 Euphoria programs. Those people have either wanted to access a
 name-brand database management system from Euphoria, or they've 
 wanted a simple, easy-to-use, Euphoria-oriented database for storing data. 
 EDS is the latter. <font color="#006633"><b>It provides a simple,
 extremely flexible, database system 
 for use by Euphoria programs.</b></font>
 
<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>Structure of an EDS database</_dul>
</font> 
 <p>
 In EDS, a <font color="#993333"><b>database</b></font> is a single file
 with <_bq>.edb</_bq> file type.
 An EDS database contains 0 or more
 <font color="#993333"><b>tables</b></font>. Each table has a
 <font color="#993333"><b>name</b></font>, and 
 contains 0 or more <font color="#993333"><b>records</b></font>.
 Each record consists of a <font color="#993333"><b>key</b></font> part, 
 and a <font color="#993333"><b>data</b></font> part. The key can be
 <font color="#CC0099"><b>any</b></font> Euphoria object - 
 an atom, a sequence, a deeply-nested sequence, whatever. Similarly the 
 data can be <font color="#CC0099"><b>any</b></font> Euphoria object.
 There are <font color="#CC0099"><b>no</b></font> constraints on the 
 size or structure of the key or data. Within a given table, the keys 
 are all unique. That is, no two records in the same table can have 
 the same key part.
 
 <p>
 The records of a table are stored in ascending order of key value.
 An efficient binary search is used when you refer to a record
 by key. You can also access a record directly, with no search, if you 
 know its current <font color="#993333"><b>record number</b></font> within
 the table. Record numbers are 
 integers from 1 to the length (current number of records) of the table. 
 By incrementing the record number, you can efficiently step through all 
 the records, in order of key. Note however that a record's number can 
 change whenever a new record is inserted, or an existing record is deleted.
 
 <p>
 The keys and data parts are stored in a compact form, but
 <font color="#CC0099"><b>no</b></font> accuracy is 
 lost when saving or restoring floating-point numbers or
 <font color="#CC0099"><b>any</b></font> other Euphoria data.
 
 <p>
 <font color="#5500FF"><b>database.e</b></font> will work as is,
 on <font color="#CC3366"><b>Windows</b></font>,
 <font color="#CC3366"><b>DOS</b></font>,
 <font color="#CC3366"><b>Linux</b></font>
 or <font color="#CC3366"><b>FreeBSD</b></font>. 
 <font color="#006633"><b>EDS database files can be copied and shared
 between programs running on Linux/FreeBSD and DOS/Windows.</b></font>
 Be sure to make an exact byte for byte copy 
 using "binary" mode copying, rather than "text" or "ASCII" mode which
 could change the line terminators.
 
<_eucode> 
 Example:
    database: "mydata.edb"
          first table: "passwords"
               record #1:  key: "jones"   data: "euphor123"
               record #2:  key: "smith"   data: "billgates"
        
          second table: "parts"
               record #1:  key: 134525    data: {"hammer", 15.95, 500}
               record #2:  key: 134526    data: {"saw", 25.95, 100}
               record #3:  key: 134530    data: {"screw driver", 5.50, 1500}
        
</_eucode>
 It's up to you to interpret the meaning of the key and data.
 <font color="#006633"><b>In keeping with the spirit of Euphoria, you have
 total flexibility.</b></font> 
 Unlike most other database systems, an EDS record is
 <font color="#CC0099"><_ba><i>not</i></_ba></font> required to 
 have either a fixed number of fields, or fields with a preset maximum length.
 
 <p>
 In many cases there will not be any natural key value for your records.
 In those cases you should simply create a meaningless, but unique, 
 integer to be the key. Remember that you can always access the data 
 by record number. It's easy to loop through the records looking for 
 a particular field value.

<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>How to access the data</_dul>
</font> 

 <p>
 To reduce the number of parameters that you have to pass,
 there is a notion of the <font color="#993333"><b>current database</b></font>,
 and <font color="#993333"><b>current table</b></font>.
 Most routines use these <_bq>current</_bq> values automatically.
 You normally start by opening (or creating) a database file, then
 selecting the table that you want to work with.
 
 <p>
 You can map a key to a record number using
 <a href="database.htm#find_key"><b>db_find_key()</b></a>. It uses
 an efficient binary search. Most of the other record-level routines 
 expect the record number as an argument. You can very quickly access 
 any record, given it's number. You can access all the records by 
 starting at record number 1 and looping through to the record number 
 returned by <a href="database.htm#table_size"><b>db_table_size()</b></a>.
 
<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>How does storage get recycled?</_dul>
</font> 

<p>
 When you delete something, such as a record, the space for that item
 gets put on a free list, for future use. Adjacent free areas are 
 combined into larger free areas. When more space is needed, and no 
 suitable space is found on the free list, the file will grow in size.
 Currently there is no automatic way that a file will shrink in size, 
 but you can use <a href="database.htm#compress"><b>db_compress()</b></a> to
 completely rewrite a database, removing the unused spaces.

<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>Security / Multi-user Access</_dul>
</font> 

<p>
 This release provides a simple way to lock an entire database to prevent
 unsafe access by other processes.

<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>Scalability</_dul>
</font> 

<p>
 Internal pointers are 4 bytes. In theory that limits the size of a 
 database file to 4 Gb. In practice, the limit is 2 Gb because of
 limitations in various C file functions used by Euphoria.
 Given enough user demand, EDS databases could be expanded well beyond
 2 Gb in the future.
 
<p> 
 The current algorithm allocates 4 bytes of memory per record in the 
 current table. So you'll need at least 4Mb RAM per million records
 on disk.
<p> 
 The binary search for keys should work reasonably well for large tables. 
<p> 
 Inserts and deletes take slightly longer as a table gets larger. 
<p> 
 At the low end of the scale, it's possible to create extremely small
 databases without incurring much disk space overhead.

<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>Disclaimer</_dul>
</font> 

 <p>
 Do not store valuable data without a backup. 
 RDS will not be responsible for any damage or data loss.

<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>Warning</_dul>
</font> 

 <p>
 .edb files are binary files, not text files. 
 You *must* use BINARY mode when transferring a .edb file
 via FTP from one machine to another. You must also avoid
 loading a .edb file into an editor and saving it. If you 
 open a .edb file directly using Euphoria's open(), 
 which is not recommended, you must use binary mode, not text mode. 
 Failure to follow these rules could result in 10 (line-feed) 
 and 13 (carriage-return) bytes being changed, leading to subtle 
 and not-so-subtle forms of corruption in your database.
 
<p>
<font face="Arial, Helvetica" color="#FF0099" size=+1>
<br> 
 <_dul>Database Routines</_dul>
</font> 

<p>
 In the descriptions below, to indicate what kind of
 <font color="#993333"><b>object</b></font> may
 be passed in and returned, the following prefixes are used:

<center><table border=0 cellspacing=2 cellpadding=2>

<_3clist
  name="x"
  pos=10
  description="a general <a href=\"refman_2.htm#1\">object</a>
     (atom or sequence)"
>

<_3clist
  name="s"
  pos=10
  description="a <a href=\"refman_2.htm#1\">sequence</a>"
>

<_3clist
  name="a"
  pos=10
  description="an <a href=\"refman_2.htm#1\">atom</a>"
>

<_3clist
  name="i"
  pos=10
  description="an <a href=\"refman_2.htm#integer\">integer</a>"
>

<_3clist
  name="fn"
  pos=10
  description="an <a href=\"refman_2.htm#integer\">integer</a> used
     as a file number"
>

<_3clist
  name="st"
  pos=10
  description="a <a href=\"refman_2.htm#11\">string sequence</a>,
     or <a href=\"refman_2.htm#char\">single-character atom</a>"
>

</table></center>

<p>

<table border=0 cellspacing=2 cellpadding=2>

<_3clist
  href="database.htm#create"
  name="db_create"
  description="create a new database"
>

<_3clist
  href="database.htm#open"
  name="db_open"
  description="open an existing database"
>

<_3clist
  href="database.htm#select"
  name="db_select"
  description="select a database to be the current one"
>

<_3clist
  href="database.htm#close"
  name="db_close"
  description="close a database"
>

<_3clist
  href="database.htm#create_table"
  name="db_create_table"
  description="create a new table within a database"
>

<_3clist
  href="database.htm#select_table"
  name="db_select_table"
  description="select a table to be the current one"
>

<_3clist
  href="database.htm#rename_table"
  name="db_rename_table"
  description="rename a table"
>

<_3clist
  href="database.htm#delete_table"
  name="db_delete_table"
  description="delete a table"
>

<_3clist
  href="database.htm#table_list"
  name="db_table_list"
  description="get a list of all the table names in a database"
>

<_3clist
  href="database.htm#table_size"
  name="db_table_size"
  description="get the number of records in the current table"
>

<_3clist
  href="database.htm#find_key"
  name="db_find_key"
  description="quickly find the record with a certain key value"
>

<_3clist
  href="database.htm#record_key"
  name="db_record_key"
  description="get the key portion of a record"
>

<_3clist
  href="database.htm#record_data"
  name="db_record_data"
  description="get the data portion of a record"
>

<_3clist
  href="database.htm#insert"
  name="db_insert"
  description="insert a new record into the current table"
>

<_3clist
  href="database.htm#delete_record"
  name="db_delete_record"
  description="delete a record from the current table"
>

<_3clist
  href="database.htm#replace_data"
  name="db_replace_data"
  description="replace the data portion of a record"
>

<_3clist
  href="database.htm#compress"
  name="db_compress"
  description="compress a database"
>

<_3clist
  href="database.htm#dump"
  name="db_dump"
  description="print the contents of a database"
>

<_3clist
  href="database.htm#fatal_id"
  name="db_fatal_id"
  description="handle fatal database errors"
>

</table>

<p>
<hr>

<a name=create></a>
<_routine name="db_create">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
 i1 = db_create(s, i2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Create a new database. A new database will be created in the file with path
 given by s. i2 indicates the type of lock that will be applied to the file
 as it is created. i1 is an error code that indicates success or failure.
 The values for i2 can be either DB_LOCK_NO (no lock) or 
 DB_LOCK_EXCLUSIVE (exclusive lock). i1
 is DB_OK if the new database is successfully created. This database
 becomes the <font color=\"#993333\"><b>current database</b></font> to which
 all other database operations will apply."
 >
<_2clist
  name="Comments:"
  description=
"If the path, s, does not end in .edb, it will be added automatically.
 <p>If the database already exists, it will not be overwritten.
 db_create() will return DB_EXISTS_ALREADY.
 <p>A version number is stored in the database file so future
 versions of the database software can recognize the format, and
  possibly read it and deal with it in some way."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if db_create("mydata", DB_LOCK_NO) != DB_OK then
    puts(2, "Couldn't create the database!\n")
    abort(1)
end if
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_open\">db_open</a>,
               <a href=\"database.htm#db_close\">db_close</a>"
 >
</table>


<a name=open></a>
<_routine name="db_open">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include database.e<BR>
 i1 = db_open(s, i2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Open an existing Euphoria database. The file containing the database is
 given by s. i1 is a return code indicating success or failure.
 i2 indicates the type of lock that you want to place on the database
 file while you have it open. This database
 becomes the <font color=\"#993333\"><b>current database</b></font> to
 which all other database operations will apply.
 <p>The return codes are:"
 >

<_eucode>
    global constant DB_OK = 0   -- success
             DB_OPEN_FAIL = -1  -- couldn't open the file 
             DB_LOCK_FAIL = -3  -- couldn't lock the file in the
                                --     manner requested
</_eucode>

<_2clist
  name="Comments:"
  description=
"The types of lock that you can use are: DB_LOCK_NO (no lock), 
 DB_LOCK_SHARED (shared lock for read-only access) and
 DB_LOCK_EXCLUSIVE (for read/write access). DB_LOCK_SHARED is only supported on
 <font color=\"#CC3366\"><b>Linux</b></font>/<font color=\"#CC3366\"><b>FreeBSD</b></font>.
 It allows you to read the database, but not write anything to it. If you
 request DB_LOCK_SHARED on <font color=\"#CC3366\"><b>WIN32</b></font> or
 <font color=\"#CC3366\"><b>DOS32</b></font> it will be treated as if you had
 asked for DB_LOCK_EXCLUSIVE.<P>
  If the lock fails, your program should wait a few seconds and try again.
  Another process might be currently accessing the database.<P>
  DOS programs will typically get a \"critical error\" message if they
  try to access a database that is currently locked."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
tries = 0
while 1 do
    err = db_open("mydata", DB_LOCK_SHARED) 
    if err = DB_OK then
        exit
    elsif err = DB_LOCK_FAIL then
    	tries += 1
    	if tries > 10 then
            puts(2, "too many tries, giving up\n")
            abort(1)
    	else    
    	    sleep(5)
    	end if
    else
    	puts(2, "Couldn't open the database!\n")
    	abort(1)
    end if
end while

</_eucode>

 <_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_create\">db_create</a>,
               <a href=\"database.htm#db_close\">db_close</a>"
 >
</table>


<a name=select></a>
<_routine name="db_select">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\"> include database.e<BR>
 i = db_select(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Choose a new, already open, database to be the
 <font color=\"#993333\"><b>current database</b></font>.
 Subsequent database operations will apply to this database. s is the
 path of the database file as it was originally opened with db_open() or
 db_create(). i is a return code indicating success (DB_OK) or failure."
 >
<_2clist
  name="Comments:"
  description="When you create (db_create) or open (db_open)
  a database, it automatically becomes the current database.
  Use db_select() when you want to switch back and forth between
  open databases, perhaps to copy records 
  from one to the other.<p>
  After selecting a new database, you should select a table
  within that database using db_select_table()."
 >

<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if db_select("employees") != DB_OK then
    puts(2, "Couldn't select employees database\n")
end if
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_open\">db_open</a>"
 >
</table>


<a name=close></a>
<_routine name="db_close">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
 db_close()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Unlock and close the <font color=\"#993333\"><b>current database</b></font>."
 >
<_2clist
  name="Comments:"
  description=
"Call this procedure when you are finished with the current database.
 Any lock will be removed, allowing other processes to access 
 the database file."
 >

 <_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_open\">db_open</a>"
 >
</table>

<a name=create_table></a>
<_routine name="db_create_table">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
 i = db_create_table(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Create a new table within the
 <font color=\"#993333\"><b>current database</b></font>. The name of the
 table is given by the sequence of characters, s, and may not be the same
 as any existing table in the current database."
 >
<_2clist
  name="Comments:"
  description=
"The table that you create will initially have 0 records.
 It becomes the <font color=\"#993333\"><b>current table</b></font>."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if db_create_table("my_new_table") != DB_OK then
    puts(2, "Couldn't create my_new_table!\n")
end if
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_delete_table\">db_delete_table</a>"
 >
</table>

<a name=select_table></a>
<_routine name="db_select_table">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
 i = db_select_table(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"The table with name given by s,
 becomes the <font color=\"#993333\"><b>current table</b></font>.
 The return code, i, will be DB_OK if the table exists in the 
 <font color=\"#993333\"><b>current database</b></font>, otherwise you'll
 get DB_OPEN_FAIL."
 >

<_2clist
  name="Comments:"
  description="All record-level database operations apply automatically 
  to the current table."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if db_select_table("salary") != DB_OK then
    puts(2, "Couldn't find salary table!\n")
    abort(1)
end if
</_eucode>

 <_2clist
  name="See Also:"
  description="
  <a href=\"database.htm#db_create_table\">db_create_table</a>,
  <a href=\"database.htm#db_delete_table\">db_delete_table</a>"
 >
</table>

<a name=rename_table></a>
<_routine name="db_rename_table">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<br>
  db_rename_table(s1, s2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Rename a table in the <font color=\"#993333\"><b>current database</b></font>.
The current name of the table is given by s1. The new name of the table is s2."
 >
<_2clist
  name="Comments:"
  description=
"The table to be renamed can be the 
 <font color=\"#993333\"><b>current table</b></font>, 
 or some other table in the current database.
 An error will occur if s1 is not the name of a table in the current database,
 or if s2 <b>is</b> the name of an existing table in the current database."
 >

<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_create_table\">db_create_table</a>
               <a href=\"database.htm#db_select_table\">db_select_table</a>
               <a href=\"database.htm#db_delete_table\">db_delete_table</a>"
 >
</table>


<a name=delete_table></a>
<_routine name="db_delete_table">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<br>
  db_delete_table(s)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Delete a table in the <font color=\"#993333\"><b>current database</b></font>.
The name of the table is given by s."
 >
<_2clist
  name="Comments:"
  description=
"All records are deleted and all space used by the table is freed up.
 If the table is the <font color=\"#993333\"><b>current table</b></font>,
 the <font color=\"#993333\"><b>current table</b></font> becomes undefined.<p>
 If there is no table with the name given by s, then nothing happens."
 >

<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_create_table\">db_create_table</a>
               <a href=\"database.htm#db_select_table\">db_select_table</a>"
 >
</table>


<a name=table_list></a>
<_routine name="db_table_list">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">s = db_table_list()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return a sequence of all the table names in the
<font color=\"#993333\"><b>current database</b></font>. Each
element of s is a sequence of characters containing the name of a table."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
sequence names

names = db_table_list()
for i = 1 to length(names) do
    puts(1, names[i] & '\n')
end for
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_create_table\">db_create_table</a>"
 >
</table>

<a name=table_size></a>
<_routine name="db_table_size">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
 i = db_table_size()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the current number of records in the
 <font color=\"#993333\"><b>current table</b></font>."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
-- look at all records in the current table
for i = 1 to db_table_size() do
    if db_record_key(i) = 0 then
    	puts(1, "0 key found\n")
    	exit
    end if
end for
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_select_table\">db_select_table</a>"
 >
</table>

<a name=find_key></a>
<_routine name="db_find_key">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
  i = db_find_key(x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Find the record in the <font color=\"#993333\"><b>current table</b></font>
 with key value x. If found,
 the record number will be returned. If not found, the record number
 that key would occupy, if inserted, is returned as a negative number."
 >

<_2clist
  name="Comments:"
  description="A fast binary search is used to find the key in the
  current table. The number of comparisons is proportional
  to the log of the number of records in the table.
  <p>
  You can select a range of records by searching for the first and
  last key values in the range. If those key values don't exist,
  you'll at least get a negative value showing where they would be, 
  if they existed.
  e.g. Suppose you want to know which records have keys greater than \"GGG\"
  and less than \"MMM\". If -5 is returned for key \"GGG\", it means 
  a record with \"GGG\" as a key would be inserted as record number 5. 
  -27 for \"MMM\" means a record with \"MMM\" as its key would 
  be inserted as record number 27. This quickly tells you that
  all records, >= 5 and < 27 qualify."
 >

<_2clist
  name="Example:"
  description=""
 >
<_eucode>
rec_num = db_find_key("Millennium")
if rec_num > 0 then
    ? db_record_key(rec_num)
    ? db_record_data(rec_num)
else
    puts(2, "Not found, but if you insert it,\n")
    printf(2, "it will be #%d\n", -rec_num)
end if
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_record_key\">db_record_key</a>,
               <a href=\"database.htm#db_record_data\">db_record_data</a>,
               <a href=\"database.htm#db_insert\">db_insert</a>"
 >
</table>

<a name=record_key></a>
<_routine name="db_record_key">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
 x = db_record_key(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the key portion of record number i in the
 <font color=\"#993333\"><b>current table</b></font>."
 >
<_2clist
  name="Comments:"
  description=
"Each record in a Euphoria database consists of a key portion and
a data portion. Each of these can be any Euphoria atom or sequence."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
puts(1, "The 6th record has key value: ")
? db_record_key(6)
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_record_data\">db_record_data</a>"
 >
</table>

<a name=record_data></a>
<_routine name="db_record_data">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
 x = db_record_data(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Return the data portion of record number i in the
 <font color=\"#993333\"><b>current table</b></font>."
 >
<_2clist
  name="Comments:"
  description=
"Each record in a Euphoria database consists of a key portion and
a data portion. Each of these can be any Euphoria atom or sequence."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
puts(1, "The 6th record has data value: ")
? db_record_data(6)
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_record_key\">db_record_key</a>"
 >
</table>

<a name=insert></a>
<_routine name="db_insert">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
  i = db_insert(x1, x2)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Insert a new record into the
 <font color=\"#993333\"><b>current table</b></font>. The record
key is x1 and the record data is x2. Both x1 and x2 can be any Euphoria
data objects, atoms or sequences. The return code i1 is DB_OK if the record
is inserted."
 >
<_2clist
  name="Comments:"
  description=
"Within a table, all keys must be unique. db_insert() will fail with
  DB_EXISTS_ALREADY if a record already exists with the same key value."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if db_insert("Smith", {"Peter", 100, 34.5}) != DB_OK then
    puts(2, "insert failed!\n")
end if
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_find_key\">db_find_key</a>,
               <a href=\"database.htm#db_record_key\">db_record_key</a>,
               <a href=\"database.htm#db_record_data\">db_record_data</a>"
 >
</table>

<a name=delete_record></a>
<_routine name="db_delete_record">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<br>
  db_delete_record(i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Delete record number i from the
 <font color=\"#993333\"><b>current table</b></font>."
 >
<_2clist
  name="Comments:"
  description=
"The record number, i, must be an integer from 1 to the number 
of records in the current table."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
db_delete_record(55)
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_insert\">db_insert</a>,
               <a href=\"database.htm#db_table_size\">db_table_size</a>"
 >
</table>

<a name=replace_data></a>
<_routine name="db_replace_data">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<br>
  db_replace_data(i, x)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"In the <font color=\"#993333\"><b>current table</b></font>, replace the
 data portion of record number i, with x.
 x can be any Euphoria atom or sequence."
 >
<_2clist
  name="Comments:"
  description=
"The record number, i, must be from 1 to the number of records in the 
  current table."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
db_replace_data(67, {"Peter", 150, 34.5})
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_delete_record\">db_delete_record</a>"
 >
</table>

<a name=compress></a>
<_routine name="db_compress">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
 i = db_compress()
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Compress the <font color=\"#993333\"><b>current database</b></font>.
 The current database is copied
to a new file such that any blocks of unused space are eliminated. 
If successful, i will be set to DB_OK, and the new compressed database 
file will retain the same name. The current table will be undefined.
As a backup, the original, uncompressed
file will be renamed with an extension of .t0 (or .t1, .t2 ,..., .t99). 
In the highly unusual case that the compression is unsuccessful, 
the database will be left unchanged, and no backup will be made."
>
<_2clist
  name="Comments:"
  description=
"When you delete items from a database, you create blocks of free
space within the database file. The system keeps track of these blocks and
tries to use them for storing new data that you insert. db_compress() will
copy the current database without copying these free areas. The size of the 
database file may therefore be reduced.
<p>
If the backup filenames reach .t99 you will have to delete some of them."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if db_compress() != DB_OK then
    puts(2, "compress failed!\n")
end if
</_eucode>
<_2clist
  name="See Also:"
  description="
  <a href=\"database.htm#db_create\">db_create</a>"
 >
</table>

<a name=dump></a>
<_routine name="db_dump">
<table border=0 cellspacing=2 cellpadding=2>


 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
 db_dump(fn, i)
</font>"
 >
 <_2clist
  name="Description:"
  description=
"Print the contents of an already-open Euphoria database.
 The contents are printed to file or device fn.
 All records in all tables are shown. If i is non-zero, 
 then a low-level byte-by-byte dump is also shown. The low-level
 dump will only be meaningful to someone who is familiar
 with the internal format of a Euphoria database."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
if db_open("mydata", DB_LOCK_SHARED) != DB_OK then
    puts(2, "Couldn't open the database!\n")
    abort(1)
end if
fn = open("db.txt", "w")
db_dump(fn, 0)

</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_open\">db_open</a>"
 >
</table>

<a name=fatal_id></a>
<_routine name="db_fatal_id">
<table border=0 cellspacing=2 cellpadding=2>

 <_2clist
  name="Syntax:"
  description="<font face = \"Arial, Helvetica\">include database.e<BR>
 db_fatal_id = i
</font>"
 >
 <_2clist
  name="Description:"
  description=
"You can catch certain fatal database errors by installing your own fatal error
handler. Simply overwrite the global variable db_fatal_id with the
routine id of one of your own procedures. The procedure must take
a single argument which is a sequence. When certain errors occur your
procedure will be called with an error message string as the argument. 
Your procedure should end by calling abort()."
 >
<_2clist
  name="Example:"
  description=""
 >
<_eucode>
procedure my_fatal(sequence msg)
    puts(2, "A fatal error occurred - " & msg & '\n')
    abort(1)
end procedure

db_fatal_id = routine_id("my_fatal")
</_eucode>
<_2clist
  name="See Also:"
  description="<a href=\"database.htm#db_close\">db_close</a>"
 >
</table>

<p>&nbsp;

</_width>
</body>
</html>
