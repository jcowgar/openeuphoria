<!-- GENERATED BY A EUPHORIA PROGRAM. DO NOT EDIT! -->


<html>
<head><title>Euphoria Reference Manual Part II - Section 3</title>
<style type="text/css">
<!--
body        {background-color: "#FFFFFF";}
a           {text-decoration: none;}
a:link      {color: "#0033BB"; text-decoration: underline;}
a:visited   {color: "#006699"; text-decoration: underline;}
a:active    {color: red; text-decoration: underline;}
a:hover     {color: red; text-decoration: underline;}
a.blue    {text-decoration: none;}
a.blue:link      {color: "#5500FF"; text-decoration: underline;}
a.blue:visited   {color: "#5500FF"; text-decoration: underline;}
a.blue:active    {color: red; text-decoration: underline;}
a.blue:hover     {color: red; text-decoration: underline;}
a.brown      {text-decoration: none;}
a.brown:link      {color: "#993333"; text-decoration: underline;}
a.brown:visited   {color: "#993333"; text-decoration: underline;}
a.brown:active    {color: red; text-decoration: underline;}
a.brown:hover     {color: red; text-decoration: underline;}
-->
</style>

</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">
<br>

<a name=unlock_file></a><font color="#006633" size=+2><br>
<center><b>unlock_file</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><b>Syntax:</b></td>
<td><font face="Arial, Helvetica"> include file.e<BR>
 unlock_file(fn, s)</font>
</td></tr>

<tr><td valign=top><b>Description:</b></td>
<td>Unlock an open file fn, or a portion of file fn. 
 You must have previously locked the file using lock_file(). 
 On DOS32 and WIN32 you can unlock a range of bytes within a file by
 specifying the s parameter as {first_byte, last_byte}.
 The same range of bytes must have been locked by a previous call 
 to lock_file(). On Linux/FreeBSD
 you can currently only lock or unlock an entire file. The s
 parameter should be {} when you want to unlock an entire file. 
 On Linux/FreeBSD, s must always be {}.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>
  You should unlock a file as soon as possible so other processes 
  can use it.
</td></tr>
 
<tr><td valign=top><b></b></td>
<td>Any files that you have 
  locked, will automatically be unlocked when your program terminates.
</td></tr>

<tr><td valign=top><b></b></td>
<td>See lock_file() for further comments and an example.
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#lock_file">lock_file</a>
</td></tr>

</table>

<a name=unregister_block></a><font color="#006633" size=+2><br>
<center><b>unregister_block</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

<tr><td valign=top><b>Syntax:</b></td>
<td><font face="Arial, Helvetica"> include machine.e (or safe.e)<BR>
 unregister_block(a)</font>
</td></tr>

<tr><td valign=top><b>Description:</b></td>
<td>Remove a block of memory from the list of safe blocks maintained
 by <font color="#5500FF"><b>safe.e</b></font> (the debug version of
 <font color="#5500FF"><b>machine.e</b></font>). The block starts at
 address a.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This routine is only meant to be used for <b>debugging
  purposes</b>. Use it to unregister blocks of memory that you have
  previously registered using register_block(). By unregistering a block,
  you remove it from the list of safe blocks maintained by
  <font color="#5500FF"><b>safe.e</b></font>. This prevents your program
  from performing any further reads or writes of memory within the block.
</td></tr>
 
<tr><td valign=top><b></b></td>
<td>See register_block() for further comments and an example.
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#register_block">register_block</a>,
 <a class="blue" href="library.htm#safe"><b>safe.e</b></a>
</td></tr>

</table>
 
<a name=upper></a><font color="#006633" size=+2><br>
<center><b>upper</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>

 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include wildcard.e<BR>
 x2 = upper(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Convert an atom or sequence to upper case. 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = upper(</font><font color="#00A033">"Euphoria"</font><font color="#330033">)</font>
<font color="#FF0055">-- s is "EUPHORIA"</font>
<font color="#330033"></font>
<font color="#330033">a = upper(</font><font color="#00A033">'g'</font><font color="#330033">)</font>
<font color="#FF0055">-- a is 'G'</font>
<font color="#330033"></font>
<font color="#330033">s = upper(</font><font color="#993333">{</font><font color="#00A033">"Euphoria"</font><font color="#330033">, </font><font color="#00A033">"Programming"</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- s is {"EUPHORIA", "PROGRAMMING"}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#lower">lower</a>
</td></tr>

</table>


<a name=use_vesa></a><font color="#006633" size=+2><br>
<center><b>use_vesa</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 use_vesa(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>use_vesa(1) will force Euphoria to use the VESA graphics
 standard. This may cause Euphoria programs to work better
 in SVGA graphics modes with certain video cards.
 use_vesa(0) will restore Euphoria's original method of
 using the video card.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>Most people can ignore this. However if you experience
 difficulty in SVGA graphics modes you should try calling
 use_vesa(1) at the start of your program before any calls
 to graphics_mode().
<P>
Arguments to use_vesa() other than 0 or 1 should not be used.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">use_vesa(1)</font>
<font color="#330033">fail = graphics_mode(261)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#graphics_mode">graphics_mode</a>
</td></tr>

</table>


<a name=value></a><font color="#006633" size=+2><br>
<center><b>value</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include get.e<BR>
 s = value(st)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Read the string representation of a Euphoria object, and compute
 the value of that object. A 2-element sequence,
 <b>{error_status, value}</b> is actually returned, where error_status
 can be one of:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">    GET_SUCCESS </font><font color="#FF0055">-- a valid object representation was found</font>
<font color="#330033">    GET_EOF     </font><font color="#FF0055">-- end of string reached too soon</font>
<font color="#330033">    GET_FAIL    </font><font color="#FF0055">-- syntax is wrong</font>
</pre></td></tr>


<tr><td valign=top><b>Comments:</b></td>
<td>This works the same as <b>get()</b>, but it reads from a string
 that you supply, rather than from a file or device.
 <p>
 After reading one valid representation of a Euphoria object, value() will
 stop reading and ignore any additional characters in the string. For 
 example, "36" and "36P" will both give you {GET_SUCCESS, 36}.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = value(</font><font color="#00A033">"12345"</font><font color="#330033">}</font>
<font color="#FF0055">-- s is {GET_SUCCESS, 12345}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = value(</font><font color="#00A033">"{0, 1, -99.9}"</font><font color="#330033">)</font>
<font color="#FF0055">-- s is {GET_SUCCESS, {0, 1, -99.9}}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 3:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = value(</font><font color="#00A033">"+++"</font><font color="#330033">)</font>
<font color="#FF0055">-- s is {GET_FAIL, 0}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get">get</a>,
<a href="lib_s_t.htm#sprintf">sprintf</a>,
<a href="lib_p_r.htm#print">print</a>
</td></tr>

</table>


<a name=video_config></a><font color="#006633" size=+2><br>
<center><b>video_config</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 s = video_config()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a sequence of values describing the current video
 configuration:<br>
 {color monitor?, graphics mode, text rows, text columns,
 xpixels, ypixels, number of colors, number of pages}<P>
The following constants are defined in
 <font color="#5500FF"><b>graphics.e</b></font>:
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">    global constant </font><font color="#330033">VC_COLOR   = 1,</font>
<font color="#330033">                    VC_MODE    = 2,</font>
<font color="#330033">                    VC_LINES   = 3,</font>
<font color="#330033">                    VC_COLUMNS = 4,</font>
<font color="#330033">                    VC_XPIXELS = 5,</font>
<font color="#330033">                    VC_YPIXELS = 6,</font>
<font color="#330033">                    VC_NCOLORS = 7,</font>
<font color="#330033">                    VC_PAGES   = 8</font>
</pre></td></tr>
 

<tr><td valign=top><b>Comments:</b></td>
<td>This routine makes it easy for you to parameterize a program
 so it will work in many different graphics modes.
<P>
On the PC there are two types of graphics mode. The first type,
 <font color="#CC3366">text mode</font>, lets you print text only.
 The second type, <font color="#CC3366">pixel-graphics mode</font>,
 lets you plot pixels, or points, in various colors, as well as text.
 You can tell that you are in a <font color="#CC3366">text mode</font>,
 because the VC_XPIXELS and VC_YPIXELS fields will be 0. Library routines
 such as <a href="lib_p_r.htm#polygon">polygon()</a>,
 <a href="lib_c_d.htm#draw_line">draw_line()</a>, and
 <a href="lib_e_g.htm#ellipse">ellipse()</a>
 only work in a <font color="#CC3366">pixel-graphics mode</font>.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">vc = video_config()  </font><font color="#FF0055">-- in mode 3 with 25-lines of text:</font>
<font color="#FF0055">-- vc is {1, 3, 25, 80, 0, 0, 32, 8}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#graphics_mode">graphics_mode</a>
</td></tr>

</table>


<a name=wait_key></a><font color="#006633" size=+2><br>
<center><b>wait_key</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include get.e<BR>
 i = wait_key()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the next key pressed by the user. Don't return until
 a key is pressed.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>You could achieve the same result using <b>get_key()</b> as follows:
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">    while </font><font color="#330033">1 </font><font color="#0000FF">do</font>
<font color="#330033">        k = </font><font color="#FF00FF">get_key</font><font color="#330033">()</font>
<font color="#0000FF">        if </font><font color="#330033">k != -1 </font><font color="#0000FF">then</font>
<font color="#0000FF">            exit</font>
<font color="#0000FF">        end if</font>
<font color="#0000FF">    end while</font>
</pre></td></tr>

<tr><td valign=top><b></b></td>
<td>However, on multi-tasking systems like
 <font color="#CC3366"><b>Windows</b></font>
 or <font color="#CC3366"><b>Linux/FreeBSD</b></font>, this "busy waiting"
 would tend to slow the system down.
 wait_key() lets the operating system do other useful work
 while your program is waiting for the user to press a key.
<P>
You could also use <b>getc(0)</b>, assuming file number 0 was input
 from the keyboard, except that you wouldn't pick up the special
 codes for function keys, arrow keys etc.
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get_key">get_key</a>,
<a href="lib_e_g.htm#getc">getc</a>
</td></tr>

</table>


<a name=walk_dir></a><font color="#006633" size=+2><br>
<center><b>walk_dir</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include file.e<BR>
 i1 = walk_dir(st, i2, i3)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>This routine will "walk" through a directory with path name
 given by st. i2 is the <font color="#993333"><b>routine id</b></font>
 of a routine that you supply.
 walk_dir() will call your routine once for each file and
 subdirectory in st. If i3 is non-zero (TRUE), then the
 subdirectories in st will be walked through recursively.<P>
The routine that you supply should accept the path name and 
 <a href="lib_c_d.htm#dir_entry">dir() entry</a> for each file and
 subdirectory. It should return 0 to keep going, or
 non-zero to stop walk_dir().
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This mechanism allows you to write a simple function that handles
 one file at a time, while walk_dir() handles the
 process of walking through all the files and subdirectories.
<P>
By default, the files and subdirectories will be visited in
 alphabetical order. To use a different order, set the global
 integer <b>my_dir</b> to the <font color="#993333"><b>routine id</b></font>
 of your own <i>modified</i> dir()
 function that sorts the directory entries differently. See the default
 dir() function in <font color="#5500FF"><b>file.e</b></font>.
 <p>
 The path that you supply to walk_dir() must not contain wildcards (* or ?).
 Only a single directory (and its subdirectories) can be searched at one
 time.
</td></tr>


<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">function </font><font color="#330033">look_at(</font><font color="#FF00FF">sequence </font><font color="#330033">path_name, </font><font color="#FF00FF">sequence </font><font color="#330033">entry)</font>
<font color="#FF0055">-- this function accepts two sequences as arguments</font>
<font color="#FF00FF">    printf</font><font color="#330033">(1, </font><font color="#00A033">"%s\\%s: %d\n"</font><font color="#330033">,</font>
<font color="#330033">           {path_name, entry</font><font color="#993333">[</font><font color="#330033">D_NAME</font><font color="#993333">]</font><font color="#330033">, entry</font><font color="#993333">[</font><font color="#330033">D_SIZE</font><font color="#993333">]</font><font color="#330033">})</font>
<font color="#0000FF">    return </font><font color="#330033">0 </font><font color="#FF0055">-- keep going</font>
<font color="#0000FF">end function</font>
<font color="#330033"></font>
<font color="#330033">exit_code = walk_dir(</font><font color="#00A033">"C:\\MYFILES"</font><font color="#330033">, </font><font color="#FF00FF">routine_id</font><font color="#993333">(</font><font color="#00A033">"look_at"</font><font color="#993333">)</font><font color="#330033">, TRUE)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>euphoria\bin\search.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#dir">dir</a>,
<a href="lib_c_d.htm#current_dir">current_dir</a>
</td></tr>

</table>


<a name=where></a><font color="#006633" size=+2><br>
<center><b>where</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include file.e<BR>
 a1 = where(fn)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  This function returns the current byte position in the file fn.
 This position is updated by reads, writes and seeks on the file.
 It is the place in the file where the next byte will be read
 from, or written to. 
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#seek">seek</a>,
<a href="lib_h_o.htm#open">open</a>
</td></tr>

</table>


<a name=wildcard_file></a><font color="#006633" size=+2><br>
<center><b>wildcard_file</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include wildcard.e<BR>
 i = wildcard_file(st1, st2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return 1 (true) if the filename st2 matches the wild card pattern
 st1. Return 0 (false) otherwise. This is similar to DOS wildcard
 matching, but better in some cases. * matches any 0 or more
 characters, ? matches any single character. On Linux and FreeBSD
 the character comparisons are case sensitive. On DOS and Windows
 they are not.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>You might use this function to check the output of the dir()
 routine for file names that match a pattern supplied by the
 user of your program.
<P>
In DOS "*ABC.*" will match <b><i>all</i></b> files.
 wildcard_file("*ABC.*", s) will only match when the file name part
 has "ABC" at the end (as you would expect).
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">i = wildcard_file(</font><font color="#00A033">"AB*CD.?"</font><font color="#330033">, </font><font color="#00A033">"aB123cD.e"</font><font color="#330033">)</font>
<font color="#FF0055">-- i is set to 1 on DOS or Windows, 0 on Linux or FreeBSD</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">i = wildcard_file(</font><font color="#00A033">"AB*CD.?"</font><font color="#330033">, </font><font color="#00A033">"abcd.ex"</font><font color="#330033">)</font>
<font color="#FF0055">-- i is set to 0 on all systems, </font>
<font color="#FF0055">-- because the file type has 2 letters not 1</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>bin\search.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_u_z.htm#wildcard_match">wildcard_match</a>,
<a href="lib_c_d.htm#dir">dir</a>
</td></tr>

</table>


<a name=wildcard_match></a><font color="#006633" size=+2><br>
<center><b>wildcard_match</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include wildcard.e<BR>
 i = wildcard_match(st1, st2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>This function performs a general matching of a string against a
 pattern containing * and ? wildcards. It returns 1 (true) if
 string st2 matches pattern st1. It returns 0 (false) otherwise.
 * matches any 0 or more characters. ? matches any
 single character. Character comparisons are case sensitive.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>If you want case insensitive comparisons, pass both st1 and st2
 through upper(), or both through lower() before calling
 wildcard_match().
<P>
If you want to detect a pattern anywhere within a string,
 add * to each end of the pattern:
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">i = wildcard_match(</font><font color="#00A033">'*' </font><font color="#330033">& pattern & </font><font color="#00A033">'*'</font><font color="#330033">, string)</font>
</pre></td></tr>


<tr><td valign=top><b></b></td>
<td>There is currently no way to treat * or ? literally in a pattern.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">i = wildcard_match(</font><font color="#00A033">"A?B*"</font><font color="#330033">, </font><font color="#00A033">"AQBXXYY"</font><font color="#330033">)</font>
<font color="#FF0055">-- i is 1 (TRUE)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">i = wildcard_match(</font><font color="#00A033">"*xyz*"</font><font color="#330033">, </font><font color="#00A033">"AAAbbbxyz"</font><font color="#330033">)</font>
<font color="#FF0055">-- i is 1 (TRUE)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 3:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">i = wildcard_match(</font><font color="#00A033">"A*B*C"</font><font color="#330033">, </font><font color="#00A033">"a111b222c"</font><font color="#330033">)</font>
<font color="#FF0055">-- i is 0 (FALSE) because upper/lower case doesn't match</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>bin\search.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_u_z.htm#wildcard_file">wildcard_file</a>,
<a href="lib_h_o.htm#match">match</a>,
<a href="lib_u_z.htm#upper">upper</a>,
<a href="lib_h_o.htm#lower">lower</a>,
<a href="lib_c_d.htm#compare">compare</a>
</td></tr>

</table>


<a name=wrap></a><font color="#006633" size=+2><br>
<center><b>wrap</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include graphics.e<BR>
 wrap(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Allow text to wrap at the right margin (i = 1) or get truncated
 (i = 0).
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>By default text will wrap.
<P>
Use wrap() in <font color="#CC3366">text modes</font> or
 <font color="#CC3366">pixel-graphics modes</font> when you
 are displaying long lines of text.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">puts</font><font color="#330033">(1, </font><font color="#FF00FF">repeat</font><font color="#993333">(</font><font color="#00A033">'x'</font><font color="#330033">, 100</font><font color="#993333">) </font><font color="#330033">& </font><font color="#00A033">"\n\n"</font><font color="#330033">)</font>
<font color="#FF0055">-- now have a line of 80 'x' followed a line of 20 more 'x'</font>
<font color="#330033">wrap(0)</font>
<font color="#FF00FF">puts</font><font color="#330033">(1, </font><font color="#FF00FF">repeat</font><font color="#993333">(</font><font color="#00A033">'x'</font><font color="#330033">, 100</font><font color="#993333">) </font><font color="#330033">& </font><font color="#00A033">"\n\n"</font><font color="#330033">)</font>
<font color="#FF0055">-- creates just one line of 80 'x'</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_p_r.htm#puts">puts</a>,
<a href="lib_p_r.htm#position">position</a>
</td></tr>

</table>


<a name=xor_bits></a><font color="#006633" size=+2><br>
<center><b>xor_bits</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x3 = xor_bits(x1, x2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Perform the logical XOR (exclusive OR) operation on
 corresponding bits in x1 and x2. A bit in x3 will be 1
 when one of the two corresponding bits in x1 or x2 is 1,
 and the other is 0.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The arguments to this function may be atoms or sequences. The
 rules for <a href="refman_2.htm#26">operations on sequences</a> apply.
<P>
The arguments must be representable as 32-bit numbers,
 either signed or unsigned.
<P>
If you intend to manipulate full 32-bit values, you should
 declare your variables as
 <font color="#993333"><b>atom</b></font>, rather than integer. Euphoria's
 integer type is limited to 31-bits.
<P>
Results are treated as signed numbers. They will be
 negative when the highest-order bit is 1.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = </font><font color="#FF00FF">xor_bits</font><font color="#330033">(#0110, #1010)</font>
<font color="#FF0055">-- a is #1100</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#and_bits">and_bits</a>,
<a href="lib_h_o.htm#or_bits">or_bits</a>,
<a href="lib_h_o.htm#not_bits">not_bits</a>,
<a href="lib_h_o.htm#int_to_bits">int_to_bits</a>,
<a href="lib_h_o.htm#int_to_bytes">int_to_bytes</a>
</td></tr>


</table>

<p>&nbsp;<p><center>
<font color="#006633" face="Arial, Helvetica" size=+1>... continue</font><br>&nbsp;<br>
<font face="Arial, Helvetica" size=-1>
<a href="lib_a_b.htm">from A to B</a> &nbsp; | &nbsp;
<a href="lib_c_d.htm">from C to D</a> &nbsp; | &nbsp;
<a href="lib_e_g.htm">from E to G</a> &nbsp; | &nbsp;
<a href="lib_h_o.htm">from H to O</a> &nbsp; | &nbsp;
<a href="lib_p_r.htm">from P to R</a> &nbsp; | &nbsp;
<a href="lib_s_t.htm">from S to T</a> &nbsp; | &nbsp;
from U to Z


</body>
</html>

