<!-- GENERATED BY A EUPHORIA PROGRAM. DO NOT EDIT! -->


<html>
<head><title>Euphoria Reference Manual Part II - Section 3</title>
<style type="text/css">
<!--
body        {background-color: "#FFFFFF";}
a           {text-decoration: none;}
a:link      {color: "#0033BB"; text-decoration: underline;}
a:visited   {color: "#006699"; text-decoration: underline;}
a:active    {color: red; text-decoration: underline;}
a:hover     {color: red; text-decoration: underline;}
a.blue    {text-decoration: none;}
a.blue:link      {color: "#5500FF"; text-decoration: underline;}
a.blue:visited   {color: "#5500FF"; text-decoration: underline;}
a.blue:active    {color: red; text-decoration: underline;}
a.blue:hover     {color: red; text-decoration: underline;}
a.brown      {text-decoration: none;}
a.brown:link      {color: "#993333"; text-decoration: underline;}
a.brown:visited   {color: "#993333"; text-decoration: underline;}
a.brown:active    {color: red; text-decoration: underline;}
a.brown:hover     {color: red; text-decoration: underline;}
-->
</style>

</head>
<body bgcolor="#FFFFFF" link="#0033BB" vlink="#006699">
<br>


<a name=instance></a><font color="#006633" size=+2><br>
<center><b>instance</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>WIN32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include misc.e<BR>
 i = instance()
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return a handle to the current program.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This handle value can be passed to various Windows routines
 to get information about the current program that is running,
 i.e. your program. Each time a user starts up your program,
 a different instance will be created.
<p>
In C, this is the first parameter to WinMain().
<P>
On <font color="#CC3366"><b>DOS32 and Linux/FreeBSD</b></font>, instance() always returns 0.
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td>
 <a class="blue" href="platform.htm#win32plat"><b>platform.doc</b>
 </a>
</td></tr>

</table>


<a name=int_to_bits></a><font color="#006633" size=+2><br>
<center><b>int_to_bits</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 s = int_to_bits(a, i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the low-order i bits of a, as a sequence of 1's and 0's.
 The least significant bits come first. For negative numbers
 the two's complement bit pattern is returned.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>You can use <a href="refman_2.htm#21">subscripting</a>,
 <a href="refman_2.htm#22">slicing</a>,
 <a href="refman_2.htm#24">and/or/xor/not</a> of entire
 sequences etc. to manipulate sequences of bits. Shifting
 of bits and rotating of bits are easy to perform.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = int_to_bits(177, 8)</font>
<font color="#FF0055">-- s is {1,0,0,0,1,1,0,1} -- "reverse" order</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#bits_to_int">bits_to_int</a>,
<a href="lib_a_b.htm#and_bits">and_bits</a>,
<a href="lib_h_o.htm#or_bits">or_bits</a>,
<a href="lib_u_z.htm#xor_bits">xor_bits</a>,
<a href="lib_h_o.htm#not_bits">not_bits</a>,
<a href="refman_2.htm#26">operations on sequences</a>
</td></tr>

</table>


<a name=int_to_bytes></a><font color="#006633" size=+2><br>
<center><b>int_to_bytes</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 s = int_to_bytes(a)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Convert an integer into a sequence of 4 bytes. These bytes are in
 the order expected on the 386+, i.e. least-significant byte
 first. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> You might use this routine prior to poking the 4 bytes into
 memory for use by a machine language program.
<P>
The integer can be negative. Negative byte-values will be
 returned, but after poking them into memory you will have
 the correct (two's complement) representation for the 386+.
<P>
This function will correctly convert integer values up to 32-bits. For
 larger values, only the low-order 32-bits are converted. Euphoria's
 integer type only allows values up to 31-bits, so declare your variables as
 <font color="#993333"><b>atom</b></font> if you need a larger range.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = int_to_bytes(999)</font>
<font color="#FF0055">-- s is {231, 3, 0, 0}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = int_to_bytes(-999)</font>
<font color="#FF0055">-- s is {-231, -4, -1, -1}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#bytes_to_int">bytes_to_int</a>,
<a href="lib_h_o.htm#int_to_bits">int_to_bits</a>,
<a href="lib_a_b.htm#bits_to_int">bits_to_int</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#poke">poke</a>,
<a href="lib_p_r.htm#poke4">poke4</a>
</td></tr>

</table>


<a name=integer></a><font color="#006633" size=+2><br>
<center><b>integer</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = integer(x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Return 1 if x is an integer in the range -1073741824 to
 +1073741823. Otherwise return 0. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> This serves to define the integer type. You can also call it
 like an ordinary function to determine if an object is an
 integer.
 
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">integer </font><font color="#330033">z</font>
<font color="#330033">z = -1</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">if </font><font color="#FF00FF">integer</font><font color="#330033">(y/x) </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(SCREEN, </font><font color="#00A033">"y is an exact multiple of x"</font><font color="#330033">)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#atom">atom</a>,
<a href="lib_s_t.htm#sequence">sequence</a>,
<a href="lib_e_g.htm#floor">floor</a>
</td></tr>

</table>


<a name=length></a><font color="#006633" size=+2><br>
<center><b>length</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = length(s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Return the length of s. s must be a sequence. An error will
 occur if s is an atom. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> The length of each sequence is stored internally by the
 interpreter for quick access. (In other languages this
 operation requires a search through memory for an end marker.)
 
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">length</font><font color="#330033">(</font><font color="#993333">{</font><font color="#0000FF">{</font><font color="#330033">1,2</font><font color="#0000FF">}</font><font color="#330033">, </font><font color="#0000FF">{</font><font color="#330033">3,4</font><font color="#0000FF">}</font><font color="#330033">, </font><font color="#0000FF">{</font><font color="#330033">5,6</font><font color="#0000FF">}</font><font color="#993333">}</font><font color="#330033">)   </font><font color="#FF0055">-- 3</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">length</font><font color="#330033">(</font><font color="#00A033">""</font><font color="#330033">)    </font><font color="#FF0055">-- 0</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 3:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">length</font><font color="#330033">(</font><font color="#993333">{}</font><font color="#330033">)    </font><font color="#FF0055">-- 0</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#sequence">sequence</a>
</td></tr>

</table>


<a name=lock_file></a><font color="#006633" size=+2><br>
<center><b>lock_file</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include file.e<BR>
 i1 = lock_file(fn, i2, s)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>When multiple processes can simultaneously access a
file, some kind of locking mechanism may be needed to avoid mangling
the contents of the file, or causing erroneous data to be read from the file.
<P>lock_file() attempts to place a lock on an open file, fn, to stop 
other processes from using the file while your program is reading it 
or writing it. Under Linux/FreeBSD, there are two types of locks that 
you can request using the i2 parameter. (Under DOS32 and WIN32 the i2 parameter
is ignored, but should be an integer.)
Ask for a <b><i>shared</b></i> lock when you intend to read a file, and you want to 
temporarily block other processes from writing it. Ask for an 
<b><i>exclusive</i></b> lock 
when you intend to write to a file and you want to temporarily block other 
processes from reading or writing it. It's ok for many processes to 
simultaneously have shared locks on the same file, but only one process 
can have an exclusive lock, and that can happen only when no other 
process has any kind of lock on the file. file.e contains the following
declaration:
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">global constant </font><font color="#330033">LOCK_SHARED = 1, </font>
<font color="#330033">		LOCK_EXCLUSIVE = 2</font>
</pre></td></tr>


<tr><td valign=top><b></b></td>
<td>On DOS32 and WIN32 you can lock a specified 
 portion of a file using the s parameter. s is a sequence of the 
 form: {first_byte, last_byte}.
 It indicates the first byte and last byte in the file,
 that the lock applies to. Specify the empty sequence {}, 
 if you want to lock the whole file. In the current release for Linux/FreeBSD,
 locks always apply to the whole file, and you should specify {}
 for this parameter.
<p>
If it is successful in obtaining the desired lock, lock_file() will 
return 1. If unsuccessful, it will return 0. lock_file() does not wait
for other processes to relinquish their locks. You may have to call 
it repeatedly, before the lock request is granted.
</td></tr>


<tr><td valign=top><b>Comments:</b></td>
<td>On Linux/FreeBSD, these locks are called advisory locks, which
    means they aren't enforced by the operating system. It is up to the
    processes that use a particular file to cooperate with each other.
    A process can access a file without first obtaining a lock on it.
    On WIN32 and DOS32, locks are enforced by the operating system.
</td></tr>

<tr><td valign=top><b></b></td>
<td>On DOS32, lock_file() is more useful when
   file sharing is enabled. It will typically return 0 (unsuccessful) 
   under plain MS-DOS, outside of Windows.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#0000FF">include </font><font color="#330033">misc.e</font>
<font color="#0000FF">include </font><font color="#330033">file.e</font>
<font color="#FF00FF">integer </font><font color="#330033">v</font>
<font color="#FF00FF">atom </font><font color="#330033">t</font>
<font color="#330033">v = </font><font color="#FF00FF">open</font><font color="#330033">(</font><font color="#00A033">"visitor_log"</font><font color="#330033">, </font><font color="#00A033">"a"</font><font color="#330033">)  </font><font color="#FF0055">-- open for append</font>
<font color="#330033">t = </font><font color="#FF00FF">time</font><font color="#330033">()</font>
<font color="#0000FF">while not </font><font color="#330033">lock_file(v, LOCK_EXCLUSIVE, </font><font color="#993333">{}</font><font color="#330033">) </font><font color="#0000FF">do</font>
<font color="#0000FF">    if </font><font color="#FF00FF">time</font><font color="#330033">() > t + 60 </font><font color="#0000FF">then</font>
<font color="#FF00FF">        puts</font><font color="#330033">(1, </font><font color="#00A033">"One minute already ... I can't wait forever!\n"</font><font color="#330033">)</font>
<font color="#FF00FF">        abort</font><font color="#330033">(1)</font>
<font color="#0000FF">    end if</font>
<font color="#330033">    sleep(5) </font><font color="#FF0055">-- let other processes run</font>
<font color="#0000FF">end while</font>
<font color="#FF00FF">puts</font><font color="#330033">(v, </font><font color="#00A033">"Yet another visitor\n"</font><font color="#330033">)</font>
<font color="#330033">unlock_file(v, </font><font color="#993333">{}</font><font color="#330033">)</font>
<font color="#FF00FF">close</font><font color="#330033">(v)</font>
</pre></td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_u_z.htm#unlock_file">unlock_file</a>,
<a href="lib_e_g.htm#flush">flush</a>,
<a href="lib_s_t.htm#sleep">sleep</a>
</td></tr>

</table>

<a name=lock_memory></a><font color="#006633" size=+2><br>
<center><b>lock_memory</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include machine.e<BR>
 lock_memory(a, i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Prevent the block of virtual memory starting at address a,
 of length i, from ever being swapped out to disk.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td><p>
 lock_memory() should only be used in the highly-specialized situation
 where you have set up your own DOS hardware interrupt handler using
 machine code. When a hardware interrupt occurs, it is not possible 
 for the operating system to retrieve any code or data that has 
 been swapped out, so you need to protect any blocks of machine code or data
 that will be needed in servicing the interrupt.
</td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\dos32\hardint.ex</b></font>
</td></tr>


 <tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get_vector">get_vector</a>,
<a href="lib_s_t.htm#set_vector">set_vector</a>
</td></tr>

</table>


<a name=log></a><font color="#006633" size=+2><br>
<center><b>log</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x2 = log(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Return the natural logarithm of x1.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>This function may be applied to an atom or to all elements
 of a sequence. Note that log is only defined for positive
 numbers. Your program will abort with a message if you
 try to take the log of a negative number or zero.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = </font><font color="#FF00FF">log</font><font color="#330033">(100)</font>
<font color="#FF0055">-- a is 4.60517</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_s_t.htm#sin">sin</a>,
<a href="lib_c_d.htm#cos">cos</a>,
<a href="lib_s_t.htm#tan">tan</a>,
<a href="lib_s_t.htm#sqrt">sqrt</a>
</td></tr>

</table>


<a name=lower></a><font color="#006633" size=+2><br>
<center><b>lower</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include wildcard.e<BR>
 x2 = lower(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Convert an atom or sequence to lower case.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">s = lower(</font><font color="#00A033">"Euphoria"</font><font color="#330033">)</font>
<font color="#FF0055">-- s is "euphoria"</font>
<font color="#330033"></font>
<font color="#330033">a = lower(</font><font color="#00A033">'B'</font><font color="#330033">)</font>
<font color="#FF0055">-- a is 'b'</font>
<font color="#330033"></font>
<font color="#330033">s = lower(</font><font color="#993333">{</font><font color="#00A033">"Euphoria"</font><font color="#330033">, </font><font color="#00A033">"Programming"</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- s is {"euphoria", "programming"}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_u_z.htm#upper">upper</a>
</td></tr>

</table>


<a name=machine_func></a><font color="#006633" size=+2><br>
<center><b>machine_func</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x1 = machine_func(a, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>see <a href="lib_h_o.htm#machine_proc">machine_proc()</a> below
</td></tr>

</table>


<a name=machine_proc></a><font color="#006633" size=+2><br>
<center><b>machine_proc</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> machine_proc(a, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Perform a machine-specific operation such as graphics and sound
 effects. This routine should normally be called indirectly via
 one of the library routines in a Euphoria include file. A direct
 call might cause a machine exception if done incorrectly. 
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#machine_func">machine_func</a>
</td></tr>

</table>


<a name=match></a><font color="#006633" size=+2><br>
<center><b>match</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = match(s1, s2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Try to match s1 against some slice of s2. If successful, return
 the element number of s2 where the (first) matching slice begins,
 else return 0. 
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">location = </font><font color="#FF00FF">match</font><font color="#330033">(</font><font color="#00A033">"pho"</font><font color="#330033">, </font><font color="#00A033">"Euphoria"</font><font color="#330033">)</font>
<font color="#FF0055">-- location is set to 3</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#find">find</a>,
<a href="lib_c_d.htm#compare">compare</a>,
<a href="lib_u_z.htm#wildcard_match">wildcard_match</a>
</td></tr>

</table>


<a name=mem_copy></a><font color="#006633" size=+2><br>
<center><b>mem_copy</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> mem_copy(a1, a2, i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>  Copy a block of i bytes of memory from address a2 to address a1. 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td> The bytes of memory will be copied correctly even if the block
 of memory at a2 overlaps with the block of memory at a1.
<P>
mem_copy(a1, a2, i) is equivalent to: <b>poke(a1, peek({a2, i}))</b>
 but is much faster.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">dest = allocate(50)</font>
<font color="#330033">src = allocate(100)</font>
<font color="#FF00FF">poke</font><font color="#330033">(src, </font><font color="#993333">{</font><font color="#330033">1,2,3,4,5,6,7,8,9</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF00FF">mem_copy</font><font color="#330033">(dest, src, 9)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#mem_set">mem_set</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#poke">poke</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>
</td></tr>

</table>


<a name=mem_set></a><font color="#006633" size=+2><br>
<center><b>mem_set</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> mem_set(a1, i1, i2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Set i2 bytes of memory, starting at address a1, to the value of i1.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The low order 8 bits of i1 are actually stored in each byte.
<P>
mem_set(a1, i1, i2) is equivalent to: <b>poke(a1, repeat(i1, i2))</b>
 but is much faster.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">destination = allocate(1000)</font>
<font color="#FF00FF">mem_set</font><font color="#330033">(destination, </font><font color="#00A033">' '</font><font color="#330033">, 1000)</font>
<font color="#FF0055">-- 1000 consecutive bytes in memory will be set to 32 </font>
<font color="#FF0055">-- (the ASCII code for ' ')</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#mem_copy">mem_copy</a>,
<a href="lib_p_r.htm#peek">peek</a>,
<a href="lib_p_r.htm#poke">poke</a>,
<a href="lib_a_b.htm#allocate">allocate</a>,
<a href="lib_a_b.htm#allocate_low">allocate_low</a>
</td></tr>

</table>


<a name=message_box></a><font color="#006633" size=+2><br>
<center><b>message_box</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>WIN32</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include msgbox.e<BR>
 i = message_box(s1, s2, x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Display a window with title s2, containing the message string s1.
 x determines the combination of buttons that will be available
 for the user to press, plus some other characteristics. x can be
 an atom or a sequence. A return value of 0 indicates a failure to set up
 the window.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>See <font color="#5500FF"><b>msgbox.e</b></font> for a complete list
 of possible values for x and i.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">response = message_box(</font><font color="#00A033">"Do you wish to proceed?"</font><font color="#330033">,</font>
<font color="#00A033">                       "My Application"</font><font color="#330033">,</font>
<font color="#330033">                       MB_YESNOCANCEL)</font>
<font color="#0000FF">if </font><font color="#330033">response = IDCANCEL </font><font color="#0000FF">or </font><font color="#330033">response = IDNO </font><font color="#0000FF">then</font>
<font color="#FF00FF">    abort</font><font color="#330033">(1)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example Program:</b></td>
<td><font color="#5500FF"><b>demo\win32\email.exw</b></font>
</td></tr>


</table>


<a name=mouse_events></a><font color="#006633" size=+2><br>
<center><b>mouse_events</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32, Linux</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include mouse.e<BR>
 mouse_events(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Use this procedure to select the mouse events that you want
 get_mouse() to report. By default, get_mouse() will report all
 events. mouse_events() can be called at various stages of the
 execution of your program, as the need to detect events changes.
 Under Linux, mouse_events() currently has no effect.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>It is good practice to ignore events that you are not interested
 in, particularly the very frequent MOVE event, in order to reduce
 the chance that you will miss a significant event.
<P>
The first call that you make to mouse_events() will turn on a
 mouse pointer, or a highlighted character.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">mouse_events(LEFT_DOWN + LEFT_UP + RIGHT_DOWN)</font>
<font color="#FF0055">-- will restrict get_mouse() to reporting the left button</font>
<font color="#FF0055">-- being pressed down or released, and the right button</font>
<font color="#FF0055">-- being pressed down. All other events will be ignored.</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get_mouse">get_mouse</a>,
<a href="lib_h_o.htm#mouse_pointer">mouse_pointer</a>
</td></tr>

</table>


<a name=mouse_pointer></a><font color="#006633" size=+2><br>
<center><b>mouse_pointer</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>DOS32, Linux</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include mouse.e<BR>
 mouse_pointer(i)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>If i is 0 hide the mouse pointer, otherwise turn on the mouse
 pointer. Multiple calls to hide the pointer will require
 multiple calls to turn it back on. The first call to either
 get_mouse() or mouse_events(), will also turn the pointer
 on (once). Under Linux, mouse_pointer() currently has no effect
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>It may be necessary to hide the mouse pointer temporarily when
 you update the screen.
<P>
After a call to <a href="lib_s_t.htm#text_rows">text_rows()</a> you may
 have to call mouse_pointer(1) to see the mouse pointer again.
</td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_e_g.htm#get_mouse">get_mouse</a>,
<a href="lib_h_o.htm#mouse_events">mouse_events</a>
</td></tr>

</table>


<a name=not_bits></a><font color="#006633" size=+2><br>
<center><b>not_bits</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x2 = not_bits(x1)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Perform the logical NOT operation on each bit in x1.
 A bit in x2 will be 1 when the corresponding bit in x1
 is 0, and will be 0 when the corresponding bit in x1 is 1.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The argument to this function may be an atom or a sequence.
 The rules for <a href="refman_2.htm#26">operations on sequences</a> apply.
<P>
The argument must be representable as a 32-bit number,
 either signed or unsigned.
<P>
If you intend to manipulate full 32-bit values, you should
 declare your variables as <font color="#993333"><b>atom</b></font>,
 rather than integer. Euphoria's integer type is limited to 31-bits.
<P>
Results are treated as signed numbers. They will be
 negative when the highest-order bit is 1.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = </font><font color="#FF00FF">not_bits</font><font color="#330033">(#000000F7)</font>
<font color="#FF0055">-- a is -248 (i.e. FFFFFF08 interpreted as a negative number)</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#and_bits">and_bits</a>,
<a href="lib_h_o.htm#or_bits">or_bits</a>,
<a href="lib_u_z.htm#xor_bits">xor_bits</a>,
<a href="lib_h_o.htm#int_to_bits">int_to_bits</a>
</td></tr>

</table>


<a name=object></a><font color="#006633" size=+2><br>
<center><b>object</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> i = object(x)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Test if x is of type object. This will always be true, so
 object() will always return 1.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>All <a href="refman_2.htm#43">predefined</a> and
 <a href="refman_2.htm#type">user-defined types</a> can also be used as
 functions to test if a value belongs to the type. object()
 is included just for completeness. It always returns 1.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">? </font><font color="#FF00FF">object</font><font color="#330033">(</font><font color="#993333">{</font><font color="#330033">1,2,3</font><font color="#993333">}</font><font color="#330033">)  </font><font color="#FF0055">-- always prints 1</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_h_o.htm#integer">integer</a>,
<a href="lib_a_b.htm#atom">atom</a>,
<a href="lib_s_t.htm#sequence">sequence</a>
</td></tr>

</table>


<a name=open></a><font color="#006633" size=+2><br>
<center><b>open</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> fn = open(st1, st2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Open a file or device, to get the file number. -1 is returned if
 the open fails. st1 is the path name of the file or device. st2 is
 the mode in which the file is to be opened. Possible modes are:<P>
"r" - open text file for reading<BR>
 "rb" - open binary file for reading<BR>
 "w" - create text file for writing<BR>
 "wb" - create binary file for writing<BR>
 "u" - open text file for update (reading and writing)<BR>
 "ub" - open binary file for update<BR>
 "a" - open text file for appending<BR>
 "ab" - open binary file for appending<BR>
<P>
Files opened for read or update must already exist. Files opened
 for write or append will be created if necessary. A file opened
 for write will be set to 0 bytes. Output to a file opened for
 append will start at the end of file.
<P>
Output to <b>text files</b> will have carriage-return characters
 automatically added before linefeed characters. On input, these
 carriage-return characters are removed. A control-Z character
 (ASCII 26) will signal an immediate end of file. Note: on some versions
 of DOS, a control-Z typed by the user might cause standard input 
 to permanently appear to be at the end-of-file, until the DOS window is closed.
<P>
I/O to <b>binary files</b> is not modified in any way. Any byte values
 from 0 to 255 can be read or written.
<P>
Some typical devices that you can open on DOS or Windows are:
<P>
 "CON" - the console (screen)<BR>
 "AUX" - the serial auxiliary port<BR>
 "COM1" - serial port 1<BR>
 "COM2" - serial port 2<BR>
 "PRN" - the printer on the parallel port<BR>
 "NUL" - a non-existent device that accepts and discards output<BR>
<p>
Currently, files up to 2 Gb in size can be handled. Beyond that, 
some file operations may not work correctly. This limit will likely 
be increased in the future.
 
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td><font color="#CC3366"><b>DOS32:</b></font>
 When running under Windows 95 or later, you can open any existing file
 that has a long file or directory name in its path (i.e. greater
 than the standard DOS 8.3 format) using any open mode - read,
 write etc. However, if you try to create a <b><i>new</i></b> file (open with
 "w" or "a" and the file does not already exist) then the name
 will be truncated if necessary to an 8.3 style name. We hope to
 support creation of new long-filename files in a future release.
 <p>
 <font color="#CC3366"><b>WIN32, Linux and FreeBSD:</b></font>
 Long filenames are fully supported for reading and writing and creating.
 <p>
 <font color="#CC3366"><b>DOS32:</b></font>
 Be careful not to use the special device names in a file name, even
 if you add an extension. e.g. CON.TXT, CON.DAT, CON.JPG etc. all refer to 
 the CON device, not a file.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">integer </font><font color="#330033">file_num, file_num95</font>
<font color="#FF00FF">sequence </font><font color="#330033">first_line</font>
<font color="#0000FF">constant </font><font color="#330033">ERROR = 2</font>
<font color="#330033"></font>
<font color="#330033">file_num = </font><font color="#FF00FF">open</font><font color="#330033">(</font><font color="#00A033">"myfile"</font><font color="#330033">, </font><font color="#00A033">"r"</font><font color="#330033">)</font>
<font color="#0000FF">if </font><font color="#330033">file_num = -1 </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(ERROR, </font><font color="#00A033">"couldn't open myfile\n"</font><font color="#330033">)</font>
<font color="#0000FF">else</font>
<font color="#330033">    first_line = </font><font color="#FF00FF">gets</font><font color="#330033">(file_num)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
<font color="#330033">file_num = </font><font color="#FF00FF">open</font><font color="#330033">(</font><font color="#00A033">"PRN"</font><font color="#330033">, </font><font color="#00A033">"w"</font><font color="#330033">) </font><font color="#FF0055">-- open printer for output</font>
<font color="#330033"></font>
<font color="#FF0055">-- on Windows 95:</font>
<font color="#330033">file_num95 = </font><font color="#FF00FF">open</font><font color="#330033">(</font><font color="#00A033">"bigdirectoryname\\verylongfilename.abcdefg"</font><font color="#330033">,</font>
<font color="#00A033">                  "r"</font><font color="#330033">)</font>
<font color="#0000FF">if </font><font color="#330033">file_num95 != -1 </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(1, </font><font color="#00A033">"it worked!\n"</font><font color="#330033">)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#close">close</a>,
               <a href="lib_h_o.htm#lock_file">lock_file</a>
</td></tr>

</table>


<a name=open_dll></a><font color="#006633" size=+2><br>
<center><b>open_dll</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Platform:</b></td>
<td><font color="#CC3366"><b>WIN32, Linux, FreeBSD</b></font>
</td></tr>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> include dll.e<BR>
 a = open_dll(st)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Open a Windows dynamic link library (<b>.</b>dll) file, or a Linux or FreeBSD
shared library (<b>.</b>so) file. A 32-bit address will
 be returned, or 0 if the <b>.</b>dll can't be found. st can be a relative
 or an absolute file name. Windows will use the normal search
 path for locating <b>.</b>dll files.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The value returned by open_dll() can be passed to define_c_proc(),
 define_c_func(), or define_c_var().
<P>
You can open the same <b>.</b>dll or <b>.</b>so file multiple times.
 No extra memory is used and you'll get the same number returned
 each time.
<p>
 Euphoria will close the .dll for you automatically at the end of
 execution.
</td></tr>

<tr><td valign=top><b>Example:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#FF00FF">atom </font><font color="#330033">user32</font>
<font color="#330033">user32 = open_dll(</font><font color="#00A033">"user32.dll"</font><font color="#330033">)</font>
<font color="#0000FF">if </font><font color="#330033">user32 = 0 </font><font color="#0000FF">then</font>
<font color="#FF00FF">    puts</font><font color="#330033">(1, </font><font color="#00A033">"Couldn't open user32.dll!\n"</font><font color="#330033">)</font>
<font color="#0000FF">end if</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_c_d.htm#define_c_func">define_c_func</a>,
<a href="lib_c_d.htm#define_c_proc">define_c_proc</a>,
<a href="lib_c_d.htm#define_c_var">define_c_var</a>,
<a href="lib_c_d.htm#c_func">c_func</a>,
<a href="lib_c_d.htm#c_proc">c_proc</a>,
<a class="blue" href="platform.htm#call_cfunc"><b>platform.doc</b>
</a>
</td></tr>

</table>


<a name=or_bits></a><font color="#006633" size=+2><br>
<center><b>or_bits</b></center>
</font><p>

<table border=0 cellspacing=2 cellpadding=2>


 <tr><td valign=top><b>Syntax:</b></td>
<td><font face = "Arial, Helvetica"> x3 = or_bits(x1, x2)
</font>
</td></tr>

 <tr><td valign=top><b>Description:</b></td>
<td>Perform the logical OR operation on corresponding bits in
 x1 and x2. A bit in x3 will be 1 when a corresponding
 bit in either x1 or x2 is 1.
</td></tr>

<tr><td valign=top><b>Comments:</b></td>
<td>The arguments to this function may be atoms or sequences. The
 rules for <a href="refman_2.htm#26">operations on sequences</a> apply.
<P>
The arguments must be representable as 32-bit numbers,
 either signed or unsigned.
<P>
If you intend to manipulate full 32-bit values, you should declare your
 variables as <font color="#993333"><b>atom</b></font>, rather than
 integer. Euphoria's integer type is limited to 31-bits.
<P>
Results are treated as signed numbers. They will be
 negative when the highest-order bit is 1.
</td></tr>

<tr><td valign=top><b>Example 1:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = </font><font color="#FF00FF">or_bits</font><font color="#330033">(#0F0F0000, #12345678)</font>
<font color="#FF0055">-- a is #1F3F5678</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>Example 2:</b></td>
<td>
</td></tr>

<tr><td></td><td>
<pre><font color="#330033">a = </font><font color="#FF00FF">or_bits</font><font color="#330033">(#FF, </font><font color="#993333">{</font><font color="#330033">#123456, #876543, #2211</font><font color="#993333">}</font><font color="#330033">)</font>
<font color="#FF0055">-- a is {#1234FF, #8765FF, #22FF}</font>
<font color="#330033"></font>
</pre></td></tr>

<tr><td valign=top><b>See Also:</b></td>
<td><a href="lib_a_b.htm#and_bits">and_bits</a>,
<a href="lib_u_z.htm#xor_bits">xor_bits</a>,
<a href="lib_h_o.htm#not_bits">not_bits</a>,
<a href="lib_h_o.htm#int_to_bits">int_to_bits</a>
</td></tr>

</table>

<p>&nbsp;<p><center>
<font color="#006633" face="Arial, Helvetica" size=+1>... continue</font><br>&nbsp;<br>
<font face="Arial, Helvetica" size=-1>
<a href="lib_a_b.htm">from A to B</a> &nbsp; | &nbsp;
<a href="lib_c_d.htm">from C to D</a> &nbsp; | &nbsp;
<a href="lib_e_g.htm">from E to G</a> &nbsp; | &nbsp;
from H to O &nbsp; | &nbsp;
<a href="lib_p_r.htm">from P to R</a> &nbsp; | &nbsp;
<a href="lib_s_t.htm">from S to T</a> &nbsp; | &nbsp;
<a href="lib_u_z.htm">from U to Z</a></font></center><p>&nbsp;


</body>
</html>

