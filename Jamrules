#
# Jamrules contains rules that will be applicable to all
# Euphoria programs including user projects.
#

#
# Ensure that a proper EUDIR is set
#

if ! $(EUDIR)
{
    # The top of this Euphoria directory tree will be our EUDIR
    # since the user has not supplied one.
    EUDIR = $(TOP) ;

    Echo "Warning: $(TOP) is used as the EUDIR since EUDIR was not set" ;
}

#
# Setup some common executable names
#

OUR_EUI_EXE = [ FDirName $(EUDIR) bin eui$(SUFEXE) ] ;
OUR_EUC_EXE = [ FDirName $(EUDIR) bin euc$(SUFEXE) ] ;
OUR_EUTEST_EXE = [ FDirName $(EUDIR) bin eutest$(SUFEXE) ] ;

PATH_EUI_EXE = eui ;
PATH_EUC_EXE = euc ;
PATH_EUTEST_EXE = eutest ;

#
# Setup our build commands
#

BUILD_EUI_CMD = $(PATH_EUI_EXE) -i [ FDirName $(ROOT_DIR) include ]
    [ FDirName $(ROOT_DIR) source eu.ex ] ;
BUILD_EUC_CMD = $(PATH_EUI_EXE) -i [ FDirName $(ROOT_DIR) include ]
    [ FDirName $(ROOT_DIR) source ec.ex ] ;

#
# Echo a variables content (single or list).
#
# This rule is helpful in various Jam debugging tasks. It has
# no real applicability outside of working with Jam.
#

rule EchoVar
{
    local __i ;
    for __i in $(1)
    {
        echo $(__i) "=" [$($(__i))] ;
    }
}

#
# Determine if a file exists. 1 is returned if it does, 0 is
# returned if it does not.
#
# Example:
#   if [ FileExists hello.txt ] = 0
#   {
#       Echo hello.txt exists ;
#   }
#

rule FileExists
{
    local f ;
    f = [ Glob . : $(<) ] ;
    if $(f)
    {
        return 1 ;
    }
}

#
# EuMain builds an executable from euphoria source
#
# Example:
#   EuMain hello : hello.ex ;
#

rule EuWinMain
{
    local _s _t ;

    # so 'jam foo' works when it's really foo.exe

    # Add grist to file names
    # Add suffix to exe

    _s = [ FGristFiles $(>) ] ;
    _t = [ FAppendSuffix $(<) : $(SUFEXE) ] ;

    if $(_t) != $(<)
    {
        Depends $(<) : $(_t) ;
        NotFile $(<) ;
    }

    Depends exe : $(_t) ;
    Depends $(_t) : $(_s) ;

    # Setup the rules that will scan Euphoria source looking
    # for include statements, thus adding them as dependencies
    HDRRULE on $(_s) = HdrRule ;
    HDRSCAN on $(_s) = "^[^-\"\'\/]*include[ ]+([^ ]+.[ex])" ;
    HDRSEARCH on $(_s) = $(SEARCH_SOURCE:E) $(SUBDIRHDRS) $(HDRS) $(STDHDRS) ;
    HDRGRIST on $(_s) = $(HDRGRIST) ;

    # Add our resulting executable to the clean target
    Clean clean : $(_t) ;
    
    MakeLocate $(_t) : $(BUILD_DIR) ;

    Depends all : $(<) ;
    Depends $(<) : $(>) ;
    Depends $(<) : $(USER_LIBRARY)$(SUFLIB) ;

    FINAL_OUTPUT on $(<) = [ FDirName .. $(<) ] ;
    FINAL_BUILD_DIR on $(<) = [ FDirName $(BUILD_DIR) $(<).dir ] ;
    FINAL_USER_LIBRARY on $(<) = [ FDirName $(FINAL_BUILD_DIR) .. $(USER_LIBRARY)$(SUFLIB) ] ;

    Clean clean : $(FINAL_BUILD_DIR) ;

    EuWinMain1 $(<) : $(>)  ;
}

actions EuWinMain1
{
    $(BUILD_EUC_CMD) $(EUCFLAGS) -o $(FINAL_OUTPUT) -builddir $(FINAL_BUILD_DIR) -lib $(FINAL_USER_LIBRARY) $(>)
}

rule EuMain
{
    EUCFLAGS on $(<) = $(EUCFLAGS) -con ;

    EuWinMain $(<) : $(>) ;
}

#
# Test a given file via the eutest program. The second parameter
# can be a single test filename or a list of file names.
#
# Example:
#   EuTest test_sequence : t_sequence.e ;
#   EuTest common_tests : t_cmdline.e t_math.e t_sequence.e ;
#
# Todo:
#   * Use the newly build eutest
#   * Use -ec and -exe to pass the newly build eui and euc
#

rule EuTest
{
    if $(BUILD_EUTEST_EXE)
    {
        EUTEST_EXE on $(<) = $(BUILD_EUTEST_EXE) ;
    }
}

actions EuTest
{
    $(EUTEST_EXE) $(>)
}

#
# Test an entire directory of t_*.e files via the eutest program.
#
# Example:
#   EuTest tests : [ FDirName $(TOP) tests ] ;
#
# Todo:
#   * Use the newly build eutest
#   * Use -ec and -exe to pass the newly build eui and euc
#

rule EuTestDir
{
    if $(BUILD_EUTEST_EXE)
    {
        EUTEST_EXE on $(<) = $(BUILD_EUTEST_EXE) ;
    }
}

actions EuTestDir
{
    cd $(>)
    $(EUTEST_EXE)
}

#
# A few rules to get eudoc and compile eudoc (if you retrieved the sources)
#

rule GetEuDoc
{
    EUDOC_DIR on $(<) = [ FDirName $(TOP) source eudoc ] ;
    CREOLE_DIR on $(<) = [ FDirName $(TOP) source eudoc creole ] ;
}

actions GetEuDoc
{
    svn co http://rapideuphoria.svn.sourceforge.net/svnroot/rapideuphoria/tools/eudoc/trunk $(EUDOC_DIR)
    svn co http://rapideuphoria.svn.sourceforge.net/svnroot/rapideuphoria/tools/creole/trunk $(CREOLE_DIR)
}

EUDOC_SOURCE = [ Glob [ FDirName $(TOP) source eudoc ] : eudoc.ex ] ;
CREOLEHTML_SOURCE = [ Glob [ FDirName $(TOP) source eudoc creole ] : creolehtml.ex ] ;

GetEuDoc get_eudoc ;

#
# Generate documentation using eudoc
#
# Example:
#   EuDoc manual : manual.af : euphoria.txt : tmpl.html ;
#

rule EuDoc
{
    if ! $(EUDOC_SOURCE)
    {
        Depends $(<) : get_eudoc ;

        EUDOC_SOURCE = [ FDirName $(TOP) source eudoc eudoc.ex ] ;
        CREOLEHTML_SOURCE = [ FDirName $(TOP) source eudoc creole creolehtml.ex ] ;
    }

    ASSEMBLY_FILE on $(<) = $(2) ;
    CREOLE_FILE on $(<) = $(3) ;
    TEMPLATE on $(<) = $(4) ;
}

actions EuDoc
{
    $(EUI_EXE) $(EUDOC_SOURCE) -v -a $(ASSEMBLY_FILE) -o $(CREOLE_FILE)
    $(EUI_EXE) $(CREOLEHTML_SOURCE) -A=ON -t=$(TEMPLATE) -ohtml $(CREOLE_FILE)
}
